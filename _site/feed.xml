<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-12-27T19:24:18-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Site Title</title><subtitle>An amazing website.</subtitle><author><name>Thibault Dody</name></author><entry><title type="html">usaparks.io</title><link href="http://localhost:4000/usaparks/" rel="alternate" type="text/html" title="usaparks.io" /><published>2020-07-28T00:00:00-04:00</published><updated>2020-07-28T00:00:00-04:00</updated><id>http://localhost:4000/usaparks</id><content type="html" xml:base="http://localhost:4000/usaparks/"><![CDATA[<footer id="attribution" style="float:right; color:#999; background:#fff;">
Created by Thibault Dody, 07/28/2020.
</footer>

<h1 id="visit-the-us-national-parks">Visit the U.S. National Parks</h1>

<figure>
<img src="https://tdody.github.io/assets/img/2020-07-28-usaparks/banner.jpg" style="width:100%" />
</figure>

<h1 id="nationalparks">NationalParks</h1>

<hr />
<h2 id="motivation">Motivation</h2>
<p>The first National Park in the United States that I visited was Congaree National Park in South Carolina in 2018. I was immediately fascinated by the natural landscape and the vast biodiversity that I saw within the park. Since that time, I have visited a total of 5 National Parks across the US and I do not plan on stopping anytime soon.
Through this project, I will combine my passion for National Parks and machine learning to create a useful tool that will help those who wish to understand the National Park System better and explore America’s “Best Idea”.</p>

<hr />
<h2 id="goal">Goal</h2>
<p>Yellowstone National Park was established as the first National Park in 1872. Since then, 61 Parks have been added to the US National Park System. The National Parks are the best illustration of what the American ecosystem has to offer. Every year, these locations welcome more than 80 millions visitors. The goal of usaparks.io is to transport visitors into the best locations of each park.
By using machine learning and clustering techniques, the application identifies the most photographed locations and gives the user the possibility to access some of these photographs. 
This application can be used as a tool to help you plan your upcoming trip to a National Park by showing you the most popular attractions or simply to give you virtual access to what these Parks have to offer.</p>

<hr />
<h2 id="interface">Interface</h2>
<p align="center">
    <iframe width="720px" height="456px" src=" https://www.youtube.com/embed/JYDgPPAacCo ">
</iframe>
</p>

<hr />
<h2 id="data">Data</h2>
<p>The National Parks information was retrieved from the <a href="https://en.wikipedia.org/wiki/List_of_national_parks_of_the_United_States?oldformat=true">Wikipedia</a> page. In order to make this project feasible, we needed access to a large dataset of geolocalized photographs. The website data was scrapped using the popular python library <a href="https://www.crummy.com/software/BeautifulSoup/">BeautifulSoup</a>. Once the initial information has been gathered for all 62 National Parks, the park boundaries were obtained from the official National Park Service <a href="https://www.nps.gov/planyourvisit/maps.htm">Website</a>. The obtained Geojson files are used to identify pictures that are taken inside each park.
The photographs were obtained using the <a href="https://www.flickr.com/services/api/">Flickr API</a>. For each park, we create a bounding box using the maximum and minimum longitude and latitude obtained from the Geojson files.</p>

<hr />
<h2 id="clustering">Clustering</h2>
<p>In order to identify the most visited locations, we used Density-Based Spatial Clustering of Applications with Noise (DBSCAN). The longitude and latitude of each photograph are used to cluster the photos. The DBSCAN algorithm takes two parameters. The first one in the maximum distance used to search neighbors and the second one is the minimum number of neighbors to be contained within the maximum distance to be considered a cluster.</p>

<p>In order to identify the most visited locations, we used Density-Based Spatial Clustering of Applications with Noise (DBSCAN). The longitude and latitude of each photograph are used to cluster the photos. The DBSCAN algorithm takes two parameters. The first one in the maximum distance used to search neighbors and the second one is the minimum number of neighbors to be contained within the maximum distance to be considered a cluster.
<br /><br />In order to find the best parameters, we define a metric of interest called the silhouette score.
<br /><br />For a data point \(i \in C_{i}\) (data point \(i\) in the cluster \(C_{i}\)), let
<br />\(a(i) = \frac{1}{|C_i| - 1} \sum_{j \in C_i, i \neq j} d(i, j)\)
<br />
be the mean distance between \(i\) and all other data points in the same cluster, where \(d(i, j)\) is the distance between data points \(i\) and \(j\) in the cluster \(C_i\) (we divide by \(|C_i| - 1\) because we do not include the distance \(d(i, i)\) in the sum). We can interpret \(a(i)\) as a measure of how well \(i\) is assigned to its cluster (the smaller the value, the better the assignment). We then define the mean dissimilarity of point \(i\) to some cluster \(C_k\) as the mean of the distance from \(i\) to all points in \(C_k\) (where \(C_k \neq C_i\)). For each data point \(i \in C_i\), we now define :
<br />\(b(i) = \min_{k \neq i} \frac{1}{|C_k|} \sum_{j \in C_k} d(i, j)\)<br /> to be the ‘‘smallest’’ (hence the \(\min\) operator in the formula) mean distance of \(i\) to all points in any other cluster, of which \(i\) is not a member. The cluster with this smallest mean dissimilarity is said to be the “neighboring cluster” of \(i\) because it is the next best fit cluster for point \(i\). We now define a ‘‘silhouette’’ (value) of one data point \(i\) :
<br /><br />\(s(i) = \frac{b(i) - a(i)}{\max\{a(i),b(i)\}} , if |C_i| &gt; 1\) and : \(s(i)=0 , if |C_i|=1\)</p>

<p><br /> For each park, the parameters of the DBSCAN model are optimized. Below is an example of the clustering results for the North Cascade National Park.
<br /></p>
<table style="border:0px;">
    <tr style="border: 0px;">
        <td style="width:50%;border:0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-07-28-usaparks/noca.jpg" />
            </figure>
        </td>
        <td style="width:50%;border:0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-07-28-usaparks/noca_silhouette.jpg" />
            </figure>
        </td>
    </tr>
</table>

<p><br /> As depicted on the image below, two clusters were obtained from the photo distribution with a minimum samples equal to 3. With four photos, cluster 1 is the most visited location. The two images on the top-right were not clustered because they do not meet the minimum sample requirement. The single photo on the bottom right is not assigned to any cluster as it is too isolated.</p>
<figure>
<img src="https://tdody.github.io/assets/img/2020-07-28-usaparks/clustering.png" style="text-align:center;height:250px" />
</figure>

<hr />
<h2 id="tags">Tags</h2>
<p>When a photo is uploaded by a user on Flickr, tags can be added manually to the post. Tags consist of words that are relevant to the photo (location, photo content). The tags are compiled for each cluster and sorted using the Term Frequency–Inverse Document Frequency (tf-idf). This summary of the most import tags is then provided on the cluster page to help describe the location corresponding to the cluster. The term frequency is defined as the number of times that term \(t\) occurs in document \(d\):
<br /><br />
\(tf(t,d)=f_{t,d} \Bigg/ {\sum_{t' \in d}{f_{t',d}}}\)
where:
<br />  \(d\) is the document (list of tags associated to an image)
<br />  \(t\) is the current tag
<br /><br />The inverse document frequency is the logarithmically scaled inverse fraction of the documents that contain the word (obtained by dividing the total number of documents by the number of documents containing the term, and then taking the logarithm of that quotient):<br />
\(\mathrm{idf}(t, D) = \log \frac{N}{|\{d \in D: t \in d\}|}\)
<br />where
<br />  \(N\): total number of documents in the corpus \(N = {|D|}\)
<br /> \(|\{d \in D: t \in d\}|\) : number of documents where the term \(t\) appears (i.e., \(\mathrm{tf}(t,d) \neq 0\)). If the term is not in the corpus, this will lead to a division-by-zero. It is therefore common to adjust the denominator to \(1 + |\{d \in D: t \in d\}|\).
<br /><br />Then tf–idf is calculated as:<br /><br />\(\mathrm{tfidf}(t,d,D) = \mathrm{tf}(t,d) \cdot \mathrm{idf}(t, D)\)</p>

<hr />
<h2 id="architecture">Architecture</h2>
<figure>
<img src="https://tdody.github.io/assets/img/2020-07-28-usaparks/Architecture.png" />
</figure>]]></content><author><name>Thibault Dody</name></author><category term="AWS" /><category term="Keras" /><category term="Flask" /><category term="Deployed" /><summary type="html"><![CDATA[Explore the US National Parks with the help of machine learning]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tdody.github.io/assets/img/2020-07-28-usaparks/medium.png" /><media:content medium="image" url="https://tdody.github.io/assets/img/2020-07-28-usaparks/medium.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Style Your Art</title><link href="http://localhost:4000/Style-Your-Art/" rel="alternate" type="text/html" title="Style Your Art" /><published>2020-06-12T00:00:00-04:00</published><updated>2020-06-12T00:00:00-04:00</updated><id>http://localhost:4000/Style-Your-Art</id><content type="html" xml:base="http://localhost:4000/Style-Your-Art/"><![CDATA[<footer id="attribution" style="float:right; color:#999; background:#fff;">
Created by Thibault Dody, 06/13/2020.
</footer>

<h1 id="art-style-predictions">Art Style Predictions</h1>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/oil-paint-banner.jpg" style="height:288px;" />
</figure>

<hr />
<h2 id="goal">Goal</h2>

<p>The available dataset consists of all the paintings and artworks from Wikiart.<br />
The objective is to build a model able to predict the style of an uploaded image amongst the top 18 most popular styles.</p>

<p>My main objective through this project was to build and deploy a model and an associated API.<br />
The python code is available in my <a href="https://github.com/tdody/StyleYourArt" target=" _blank ">Github repository</a>.</p>

<p>For the deployment of this model, I have chosen the following:</p>
<ol>
  <li>Build a flask app to create a web interface.</li>
  <li>Host some of the data into a MongoDB database.</li>
  <li>Deploy a live version using an AWS instance (EC2+S3).</li>
</ol>

<hr />
<h2 id="api">API</h2>

<h3 id="deployed-api">Deployed API</h3>

<p>A live version can be accessed <a href="http://52.71.228.3/" target=" _blank "><b>HERE</b></a>.</p>

<h3 id="architecture">Architecture</h3>

<p>The application is built using:</p>
<ul>
  <li>Wikiart Web Scraper (<a href="https://github.com/lucasdavid/wikiart/" target="_blank">Repository</a>)</li>
  <li>MongoDB database containing meta information about every artwork</li>
  <li>Keras models</li>
  <li>Flask API</li>
  <li>The application is stored on Amazon S3</li>
  <li>The instance of the application is hosted on an Ubuntu 18.04 server (Amazon EC2)</li>
</ul>

<figure>
    <p align="center">
        <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/Architecture.png" alt="schema " style="width:850 " />
    </p>
</figure>

<h3 id="interface">Interface</h3>

<p align="center">
    <iframe width="720px" height="456px" src=" https://www.youtube.com/embed/ZJSRZ6CiEwM "></iframe>
</p>

<hr />
<h2 id="data">Data</h2>

<p>Keras can use the directory structure to determine the image classes. To do so, we need to store each image into a folder titled with the painting style.
A python function <code class="language-plaintext highlighter-rouge">organize_directories</code> in module <code class="language-plaintext highlighter-rouge">models.py</code> is used to move each picture in its corresponding style directory. Note that the images are also resized as <code class="language-plaintext highlighter-rouge">224x224x3</code> and saved as <code class="language-plaintext highlighter-rouge">png</code>. Finally, the distribution is done by splitting the dataset into a train and test sets. The split is done by stratifying the styles and assigning randomly 20% of each styles into the test set.</p>

<figure>
    <p align="center">
        <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/output_22_0.png" />
    </p>
</figure>

<p>As shown above, the dataset has been divided into the train and test set while maintaining the class proportion. In order to avoid bias over class that are overly represented (Impressionism, Realism…). The metrics of interest will be weighted so that each class is assigned the same importance.</p>

<figure>
    <p align="center">
        <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/StyleTrend.png" />
    </p>
</figure>

<hr />
<h2 id="model">Model</h2>

<h3 id="convolutional-neural-network">Convolutional Neural Network</h3>
<p>In this section, we will train a CNN to predict the species feature. The approach is divided between the following steps:</p>

<ul>
  <li>Encode the target feature</li>
  <li>Download the data</li>
  <li>Split the data between a training and test set</li>
  <li>Perform data augmentation</li>
  <li>Determine the cost function to be optimized</li>
  <li>Data Loader, Validation and Data Augmentation</li>
</ul>

<p>In order for our model to generalize well on unseen data, a good practice consists of using image transformation to create new unseen examples.
We need to ensure that our model does not over fit the training data. To do so, we are using a training set and a test set both taken from the original dataset.</p>

<p>Keras contains useful tools to help process image files and feed them in batches to the model. We will be using a generator for both the train and test phases.</p>

<p>First, we must create a new feature to our dataset which contains the full path to each image.
Then, we can create two generators, the training generator will contains several data augmentation transformation (horizontal and vertical flips, zoom).
Both the train and test generator will normalize the pixel values.
Finally, the images will be sent to the model using batches of 16 RGB images reshaped at 224x224.</p>

<h3 id="transfer-learning---first-generation">Transfer Learning - First Generation</h3>

<p>Before we train a model on the entire dataset, we need to investigate the following modeling choices:</p>
<ol>
  <li>Architecture</li>
  <li>Optimization metrics</li>
  <li>Callbacks</li>
  <li>Optimizers</li>
</ol>

<p>During this initial phase, we will test 5 different base models using only 1,000 images per class. The considered base models are:</p>
<ul>
  <li>ResNet50</li>
  <li>Inception V3</li>
  <li>MobileNet V2</li>
  <li>Xception</li>
  <li>VGG16</li>
</ul>

<p>For each model, we remove the top layer and add a custom model to it. This top model is defined as follows:</p>
<ul>
  <li>Conv2D (512, 2, relu)</li>
  <li>Flatten</li>
  <li>Dense (2048, relu)</li>
  <li>Dense (1024, relu)</li>
  <li>Dense (512, relu)</li>
  <li>Dense (256, relu)</li>
  <li>Dense (64, relu)</li>
  <li>Dense (18, softmax)</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## load results
</span><span class="n">results</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">../data/training_phase1.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">size_total_MB</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">size_base_MB</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">results</span><span class="p">[</span><span class="sh">'</span><span class="s">size_top_MB</span><span class="sh">'</span><span class="p">]</span>
<span class="n">results</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>model</th>
      <th>tag</th>
      <th>val_loss</th>
      <th>val_accuracy</th>
      <th>loss</th>
      <th>accuracy</th>
      <th>size_base_MB</th>
      <th>size_top_MB</th>
      <th>size_total_MB</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1.a.1000</td>
      <td>ResNet50</td>
      <td>2.512670</td>
      <td>0.208333</td>
      <td>2.610792</td>
      <td>0.181167</td>
      <td>94.7</td>
      <td>131.6</td>
      <td>226.3</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1.b.1000</td>
      <td>VGG16</td>
      <td>1.930195</td>
      <td>0.373611</td>
      <td>1.895698</td>
      <td>0.385111</td>
      <td>58.9</td>
      <td>106.5</td>
      <td>165.4</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1.c.1000</td>
      <td>InceptionV3</td>
      <td>1.890462</td>
      <td>0.391667</td>
      <td>1.687830</td>
      <td>0.453889</td>
      <td>87.9</td>
      <td>89.7</td>
      <td>177.6</td>
    </tr>
    <tr>
      <th>3</th>
      <td>1.d.1000</td>
      <td>MobileNetV2</td>
      <td>1.745986</td>
      <td>0.436389</td>
      <td>1.514181</td>
      <td>0.501667</td>
      <td>9.4</td>
      <td>119.0</td>
      <td>128.4</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1.e.1000</td>
      <td>Xception</td>
      <td>1.799670</td>
      <td>0.419722</td>
      <td>1.740675</td>
      <td>0.439667</td>
      <td>83.7</td>
      <td>131.6</td>
      <td>215.3</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">results</span><span class="p">[[</span><span class="sh">'</span><span class="s">tag</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">val_accuracy</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">accuracy</span><span class="sh">'</span><span class="p">]].</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">'</span><span class="s">tag</span><span class="sh">'</span><span class="p">).</span><span class="nf">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">kind</span><span class="o">=</span><span class="sh">'</span><span class="s">barh</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Model Accuracy</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Accuracy</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">();</span>
</code></pre></div></div>

<figure>
<p align="center">
    <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art//output_27_0.png" />
    </p>
</figure>

<p>The MobileNet V2 seems to be the best choice, it scores the highest in term of validation accuracy and is also the lightest model (128M). However, this weight is still a bit much to easily deploy on a Heroku instance. We make a new version of the top model by decreasing the size of the top model first dense layer from 2048 neurons to 1024.</p>

<h3 id="transfer-learning---second-generation">Transfer Learning - Second Generation</h3>

<h4 id="architecture---mobilenet-v2">Architecture - MobileNet V2</h4>

<figure>
<p align="center">
    <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/MobileNetV2.png" style="width:500px;" />
    </p>
</figure>

<ul>
  <li>There are 3 layers for both types of blocks.</li>
  <li>The first layer is 1×1 convolution with ReLU6.</li>
  <li>The second layer is the depthwise convolution.</li>
  <li>The third layer is another 1×1 convolution but without any non-linearity. It is claimed that if ReLU is used again, the deep networks only have the power of a linear classifier on the non-zero volume part of the output domain.</li>
</ul>

<figure>
<p align="center">
    <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/MobileNetV2_structure.png" style="width:400px;" />
    </p>
</figure>

<figure>
<p align="center">
    <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/MobileNetV2_overall.png" style="width:350px;" />
    </p>
</figure>

<p>where:</p>
<ul>
  <li>t: expansion factor</li>
  <li>c: number of output channels</li>
  <li>n: repeating number</li>
  <li>s: stride.</li>
  <li>3×3 kernels are used for spatial convolution.</li>
</ul>

<p>This top model is defined as follows:</p>
<ul>
  <li>Conv2D (512, 2, relu)</li>
  <li>Flatten</li>
  <li>Dense (1024, relu)</li>
  <li>Dense (1024, relu)</li>
  <li>Dense (512, relu)</li>
  <li>Dense (256, relu)</li>
  <li>Dense (64, relu)</li>
  <li>Dense (18, softmax)</li>
</ul>

<h4 id="results">Results</h4>

<p><strong>Training</strong></p>

<p>As shown below the training accuracy plateaus at 56% (benchmark accuracy is 5.6%) while the accuracy on the test set is 43%.</p>

<figure>
<img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/1.d.1000/history.png" style="width:1920px;" />
</figure>

<p>The F-1 score on the training set is 0.78 (macro average) and 0.78 (weighted average).
The F-1 score on the training set is 0.43 (macro average) and 0.44 (weighted average).</p>

<table style="border:0px;">
    <tr style="border:0px;">
        <td style="border:0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/1.d.1000/Train_Set_AUC_ROC.png" style="width:600px;" />
            </figure>
        </td>
        <td style="border:0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/1.d.1000/Test_Set_AUC_ROC.png" style="width:600px;" />
            </figure>
        </td>
    </tr>
</table>

<p><strong>Predictions</strong></p>
<table style="border-collapse: collapse; border: 0px;">
    <tr style="border-collapse: collapse; border: 0px;">
        <td style="border-collapse: collapse; border: 0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/1.d.1000/Train_Set_confusion_matrix.png" />
            </figure>
        </td>
        <td style="border-collapse: collapse; border: 0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/1.d.1000/Train_Set_Normalize_confusion_matrix.png" />
            </figure>
        </td>
    </tr>
</table>

<table style="border-collapse: collapse; border: 0px;">
    <tr style="border-collapse: collapse; border: 0px;">
        <td style="border-collapse: collapse; border: 0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/1.d.1000/Test_Set_confusion_matrix.png" />
            </figure>
        </td>
        <td style="border-collapse: collapse; border: 0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/1.d.1000/Test_Set_Normalize_confusion_matrix.png" />
            </figure>
        </td>
    </tr>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## load prediction reports
</span><span class="n">train_report</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">../models/1.d.1000/Train_Set_report.csv</span><span class="sh">"</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)[[</span><span class="sh">'</span><span class="s">precision</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">recall</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">f1-score</span><span class="sh">'</span><span class="p">]]</span>
<span class="n">test_report</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">../models/1.d.1000/Test_Set_report.csv</span><span class="sh">"</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)[[</span><span class="sh">'</span><span class="s">precision</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">recall</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">f1-score</span><span class="sh">'</span><span class="p">]]</span>

<span class="n">train_report</span> <span class="o">=</span> <span class="n">train_report</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">3</span><span class="p">,:]</span>
<span class="n">test_report</span> <span class="o">=</span> <span class="n">test_report</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">3</span><span class="p">,:]</span>

<span class="n">report</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">train_report</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">test_report</span><span class="p">,</span> <span class="n">left_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">suffixes</span><span class="o">=</span><span class="p">(</span><span class="sh">'</span><span class="s">_train</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">_test</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## plot report
</span><span class="n">sns</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">font_scale</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">set_style</span><span class="p">(</span><span class="sh">'</span><span class="s">whitegrid</span><span class="sh">'</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">report</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">-.</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">-.</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">g</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">orange</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">mediumpurple</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">crimson</span><span class="sh">'</span><span class="p">])</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticks</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">18</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">report</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">ha</span> <span class="o">=</span> <span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">upper center</span><span class="sh">'</span><span class="p">,</span> <span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">),</span><span class="n">fancybox</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">ncol</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Prediction Report</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">1.</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">17</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">();</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/output_38_0.png" />
</figure>

<h3 id="transfer-learning---third-generation">Transfer Learning - Third Generation</h3>

<p><strong>Training</strong></p>

<p>As shown below the training accuracy plateaus at 57% (benchmark accuracy is 5.6%) while the accuracy on the test set is 45%.</p>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/2_d/history.png" style="width:1920px;" />
</figure>

<p>The F-1 score on the training set is 0.79 (macro average) and 0.71 (weighted average).
The F-1 score on the training set is 0.45 (macro average) and 0.45 (weighted average).</p>

<table style="border-collapse: collapse; border: 0px;">
    <tr style="border-collapse: collapse; border: 0px;">
        <td style="border-collapse: collapse; border: 0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/2_d/Train_Set_AUC_ROC.png" style="width:600px;" />
            </figure>
        </td>
        <td style="border-collapse: collapse; border: 0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/2_d/Test_Set_AUC_ROC.png" style="width:600px;" />
            </figure>
        </td>
    </tr>
</table>

<p><strong>Predictions</strong></p>
<table style="border-collapse: collapse; border: 0px;">
    <tr style="border-collapse: collapse; border: 0px;">
        <td style="border-collapse: collapse; border: 0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/2_d/Train_Set_confusion_matrix.png" />
            </figure>
        </td>
        <td style="border-collapse: collapse; border: 0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/2_d/Train_Set_Normalize_confusion_matrix.png" />
            </figure>
        </td>
    </tr>
</table>

<table style="border-collapse: collapse; border: 0px;">
    <tr style="border-collapse: collapse; border: 0px;">
        <td style="border-collapse: collapse; border: 0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/2_d/Test_Set_confusion_matrix.png" />
            </figure>
        </td>
        <td style="border-collapse: collapse; border: 0px;">
            <figure>
                <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/2_d/Test_Set_Normalize_confusion_matrix.png" />
            </figure>
        </td>
    </tr>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## load prediction reports
</span><span class="n">train_report</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">../models/2_d/Train_Set_report.csv</span><span class="sh">"</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)[[</span><span class="sh">'</span><span class="s">precision</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">recall</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">f1-score</span><span class="sh">'</span><span class="p">]]</span>
<span class="n">test_report</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">../models/2_d/Test_Set_report.csv</span><span class="sh">"</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)[[</span><span class="sh">'</span><span class="s">precision</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">recall</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">f1-score</span><span class="sh">'</span><span class="p">]]</span>

<span class="n">train_report</span> <span class="o">=</span> <span class="n">train_report</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">3</span><span class="p">,:]</span>
<span class="n">test_report</span> <span class="o">=</span> <span class="n">test_report</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">3</span><span class="p">,:]</span>

<span class="n">report</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">train_report</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">test_report</span><span class="p">,</span> <span class="n">left_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">suffixes</span><span class="o">=</span><span class="p">(</span><span class="sh">'</span><span class="s">_train</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">_test</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">## plot report
</span><span class="n">sns</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">font_scale</span> <span class="o">=</span> <span class="mf">1.5</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">set_style</span><span class="p">(</span><span class="sh">'</span><span class="s">whitegrid</span><span class="sh">'</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">report</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">style</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">-.</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">:</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">-.</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">g</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">orange</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">mediumpurple</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">crimson</span><span class="sh">'</span><span class="p">])</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticks</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">18</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">report</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">ha</span> <span class="o">=</span> <span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">)</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">upper center</span><span class="sh">'</span><span class="p">,</span> <span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mf">1.1</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">),</span><span class="n">fancybox</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">ncol</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Prediction Report</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mf">1.</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">17</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">();</span>
</code></pre></div></div>

<figure>
    <p align="center">
        <img src="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/output_45_0.png" />
    </p>
</figure>
<p><br /></p>

<h2 id="references">References</h2>
<p>[1] Wikiart,<a href="https://www.wikiart.org/" target="_blank"> https://www.wikiart.org/</a>
<br />
[2] Lucas Oliveira David, Wikiart Retrieval,<a href="https://github.com/lucasdavid/wikiart/" target="_blank"> GitHub</a></p>]]></content><author><name>Thibault Dody</name></author><category term="AWS" /><category term="Keras" /><category term="Flask" /><category term="Deployed" /><summary type="html"><![CDATA[Machine Learning vs. Art Styles]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/tile.png" /><media:content medium="image" url="https://tdody.github.io/assets/img/2020-06-13-Style-Your-Art/tile.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Revenue Prediction (Deployed)</title><link href="http://localhost:4000/Revenue/" rel="alternate" type="text/html" title="Revenue Prediction (Deployed)" /><published>2020-05-03T00:00:00-04:00</published><updated>2020-05-03T00:00:00-04:00</updated><id>http://localhost:4000/Revenue</id><content type="html" xml:base="http://localhost:4000/Revenue/"><![CDATA[<footer id="attribution" style="float:right; color:#999; background:#fff;">
Created by Thibault Dody, 05/03/2020.
</footer>

<h1 id="revenue-prediction">Revenue Prediction</h1>

<h2 id="goal">Goal</h2>

<p>The available dataset consists of a set of json files. Each json file contains the monthly transaction of our company.<br />
The objective is to predict the total revenue generated during the 30 days following an input date.</p>

<p>The focus on this project is to develop and efficient and useful workflow. The project stats with an <a href="https://github.com/tdody/RevenueModel/blob/master/notebooks/Part_1_EDA.ipynb">EDA</a>, different models are then <a href="https://github.com/tdody/RevenueModel/blob/master/notebooks/Part_2_Models.ipynb">tested</a>.</p>

<p>My main objective through this project was to build and deploy a model and an associated API.<br />
The python code is available in my <a href="https://github.com/tdody/RevenueModel">Github repository</a>.</p>

<p>For the deployment of this model, I have chosen the following:</p>
<ol>
  <li>Build a flask app to create a web interface.</li>
  <li>Build a Docker container for future use.</li>
  <li>Deploy a live version using Heroku</li>
</ol>

<p><strong>A live version can be accessed <a href="https://revenue-ml.herokuapp.com/">here</a></strong></p>

<p><strong>Note</strong>: The loading of the app can take a few seconds if Heroku needs to restart the build.</p>

<h2 id="api">API</h2>

<h3 id="prediction">Prediction</h3>

<p>Two inputs are used for the prediction:</p>
<ol>
  <li>A country (if <code class="language-plaintext highlighter-rouge">all</code> is used then the predicted revenue encompasses all markets).</li>
  <li>A date for which to compute our future revenue.</li>
</ol>

<iframe width="560" height="315" src="https://www.youtube.com/embed/sh2bSUklFe4" frameborder="0"></iframe>

<h3 id="training">Training</h3>

<p>The API allows the user to re-train a model for a specific country. This useful feature can help keep the model up to date with new data.</p>
<figure class="half">
    <img src="https://tdody.github.io/assets/img/2020-05-03-Revenue/Train_training.png" />
    <img src="https://tdody.github.io/assets/img/2020-05-03-Revenue/Train_trained.png" />
    <figcaption>Training model API</figcaption>
</figure>

<h3 id="logs">Logs</h3>

<p>In order to monitor our model performance and trainings, two logs are kept up-to-date every time our models are trained or used for prediction.</p>

<figure>
<img src="https://tdody.github.io/assets/img/2020-05-03-Revenue//Logs.png" />
    <figcaption>Logs API</figcaption>
</figure>]]></content><author><name>Thibault Dody</name></author><category term="Docker" /><category term="Heroku" /><category term="python" /><summary type="html"><![CDATA[Future revenue prediction.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tdody.github.io/assets/img/2020-05-03-Revenue/tile.png" /><media:content medium="image" url="https://tdody.github.io/assets/img/2020-05-03-Revenue/tile.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Seedlings Classification (91% Accuracy)</title><link href="http://localhost:4000/Seedlings-Classification/" rel="alternate" type="text/html" title="Seedlings Classification (91% Accuracy)" /><published>2020-02-13T00:00:00-05:00</published><updated>2020-02-13T00:00:00-05:00</updated><id>http://localhost:4000/Seedlings-Classification</id><content type="html" xml:base="http://localhost:4000/Seedlings-Classification/"><![CDATA[<footer id="attribution" style="float:right; color:#999; background:#fff;">
Created by Thibault Dody, 02/13/2020.
</footer>

<h1 id="plant-seedlings-dataset">Plant Seedlings Dataset</h1>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/banner.jpg" style="width:642px;height:288px;" />
</figure>

<h1 id="table-of-content">Table of Content</h1>

<h2 id="introduction">Introduction</h2>

<p><strong>Can you differentiate a weed from a crop seedling?</strong></p>

<p>The ability to do so effectively can mean better crop yields and better stewardship of the environment.</p>

<p>The Aarhus University Signal Processing group, in collaboration with University of Southern Denmark, has recently released a dataset containing images of approximately 960 unique plants belonging to 12 species at several growth stages.</p>

<p>It comprises annotated RGB images with a physical resolution of roughly 10 pixels per mm.</p>

<p>The dataset (version 2) can be found <a href="https://vision.eng.au.dk/plant-seedlings-dataset/">here</a>.</p>

<p>The dataset contains images of the following classes subdivided into two main groups:</p>

<ul>
  <li>
    <p>Agriculture plants</p>

    <ul>
      <li>Maize</li>
      <li>Common wheat</li>
      <li>Sugar beet</li>
    </ul>
  </li>
  <li>
    <p>Wild weeds</p>

    <ul>
      <li>Scentless Mayweed</li>
      <li>Common Chickweed</li>
      <li>Shepherd’s Purse</li>
      <li>Cleavers</li>
      <li>Charlock</li>
      <li>Fat Hen</li>
      <li>Small-flowered Cranesbill</li>
      <li>Black-grass</li>
      <li>Loose Silky-bent</li>
    </ul>
  </li>
</ul>

<p><strong>Objective</strong><br />
The goal of this study is to develop a model to classify the species given a new image. The insights gained from this analysis can then be re-used by growers to eliminate weeds and better monitor species meant to be cultivated.</p>

<h2 id="load-libraries-and-import-data">Load Libraries and Import Data</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="n">matplotlib</span> <span class="kn">import</span> <span class="n">cm</span>
<span class="kn">from</span> <span class="n">matplotlib.colors</span> <span class="kn">import</span> <span class="n">ListedColormap</span><span class="p">,</span> <span class="n">LinearSegmentedColormap</span>
<span class="kn">from</span> <span class="n">matplotlib.lines</span> <span class="kn">import</span> <span class="n">Line2D</span>
<span class="kn">import</span> <span class="n">matplotlib</span>
<span class="kn">from</span> <span class="n">matplotlib</span> <span class="kn">import</span> <span class="n">colors</span>
<span class="kn">from</span> <span class="n">mpl_toolkits.mplot3d</span> <span class="kn">import</span> <span class="n">Axes3D</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">set_style</span><span class="p">(</span><span class="sh">"</span><span class="s">darkgrid</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">set</span><span class="p">()</span>

<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span><span class="p">,</span> <span class="n">LabelEncoder</span>
<span class="kn">from</span> <span class="n">sklearn.cluster</span> <span class="kn">import</span> <span class="n">KMeans</span>
<span class="kn">from</span> <span class="n">sklearn</span> <span class="kn">import</span> <span class="n">metrics</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="n">skimage.segmentation</span> <span class="kn">import</span> <span class="n">mark_boundaries</span>

<span class="kn">from</span> <span class="n">tensorflow</span> <span class="kn">import</span> <span class="n">keras</span>
<span class="kn">from</span> <span class="n">keras.preprocessing.image</span> <span class="kn">import</span> <span class="n">ImageDataGenerator</span>
<span class="kn">from</span> <span class="n">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
<span class="kn">from</span> <span class="n">keras.layers</span> <span class="kn">import</span> <span class="n">Dense</span>
<span class="kn">from</span> <span class="n">keras.layers</span> <span class="kn">import</span> <span class="n">Dropout</span>
<span class="kn">from</span> <span class="n">keras.layers</span> <span class="kn">import</span> <span class="n">Flatten</span>
<span class="kn">from</span> <span class="n">keras.layers.convolutional</span> <span class="kn">import</span> <span class="n">Conv2D</span>
<span class="kn">from</span> <span class="n">keras.layers.convolutional</span> <span class="kn">import</span> <span class="n">MaxPooling2D</span>
<span class="kn">from</span> <span class="n">keras.layers</span> <span class="kn">import</span> <span class="n">BatchNormalization</span>
<span class="kn">from</span> <span class="n">keras.callbacks</span> <span class="kn">import</span> <span class="n">ModelCheckpoint</span><span class="p">,</span><span class="n">ReduceLROnPlateau</span><span class="p">,</span><span class="n">CSVLogger</span>
<span class="kn">from</span> <span class="n">keras</span> <span class="kn">import</span> <span class="n">Model</span>
<span class="kn">from</span> <span class="n">keras</span> <span class="kn">import</span> <span class="n">losses</span>
<span class="kn">from</span> <span class="n">keras.utils</span> <span class="kn">import</span> <span class="n">to_categorical</span><span class="p">,</span> <span class="n">np_utils</span>
<span class="kn">from</span> <span class="n">keras.preprocessing.image</span> <span class="kn">import</span> <span class="n">ImageDataGenerator</span>
<span class="kn">from</span> <span class="n">keras</span> <span class="kn">import</span> <span class="n">optimizers</span>
<span class="kn">from</span> <span class="n">keras_tqdm</span> <span class="kn">import</span> <span class="n">TQDMNotebookCallback</span>

<span class="kn">from</span> <span class="n">scipy.spatial.distance</span> <span class="kn">import</span> <span class="n">cdist</span>
<span class="kn">import</span> <span class="n">imageio</span>
<span class="kn">from</span> <span class="n">skimage</span> <span class="kn">import</span> <span class="n">color</span>
<span class="kn">from</span> <span class="n">skimage.morphology</span> <span class="kn">import</span> <span class="n">closing</span><span class="p">,</span> <span class="n">disk</span><span class="p">,</span> <span class="n">opening</span>
<span class="kn">import</span> <span class="n">cv2</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tnrange</span><span class="p">,</span> <span class="n">tqdm_notebook</span>
<span class="kn">import</span> <span class="n">tqdm</span>
<span class="kn">from</span> <span class="n">time</span> <span class="kn">import</span> <span class="n">sleep</span>

<span class="kn">from</span> <span class="n">os</span> <span class="kn">import</span> <span class="n">listdir</span>
<span class="kn">from</span> <span class="n">zipfile</span> <span class="kn">import</span> <span class="n">ZipFile</span>

<span class="kn">import</span> <span class="n">lime</span>
<span class="kn">from</span> <span class="n">lime</span> <span class="kn">import</span> <span class="n">lime_image</span>

<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">TAD_tools_v01</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Using TensorFlow backend.
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ZIPFILE = './NonsegmentedV2.zip'
</span><span class="n">ZIPEXTRACT</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../Data/</span><span class="sh">'</span>
</code></pre></div></div>

<h2 id="data-inspection">Data Inspection</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">species</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">counts</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">folder</span> <span class="ow">in</span> <span class="nf">listdir</span><span class="p">(</span><span class="n">ZIPEXTRACT</span><span class="p">):</span>
    <span class="n">species</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">folder</span><span class="p">)</span>
    <span class="n">counts</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="nf">listdir</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">folder</span><span class="p">)))</span>

<span class="n">counts</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">counts</span><span class="p">)</span>
<span class="n">species</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">species</span><span class="p">)</span>

<span class="n">sort_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argsort</span><span class="p">(</span><span class="n">counts</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">species</span><span class="p">[</span><span class="n">sort_idx</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="n">counts</span><span class="p">[</span><span class="n">sort_idx</span><span class="p">],</span> <span class="n">palette</span><span class="o">=</span><span class="sh">'</span><span class="s">Greens</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Image distribution amongst species</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">);</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_9_0.png" />
</figure>

<h3 id="observations---data-distribution">Observations - Data distribution</h3>

<ul>
  <li>The above figure depicts an unbalanced dataset. Indeed, there is a three-time factor between the most common class (Loose Silky-bent) and the least common class (Common wheat).</li>
  <li>The agricultural plants (wheat, maize, beet) are less present in the dataset compared to wild weeds.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">45</span><span class="p">))</span>
<span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">folder</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">listdir</span><span class="p">(</span><span class="n">ZIPEXTRACT</span><span class="p">)):</span>
    <span class="c1"># select random images from class
</span>    <span class="n">image_names</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span>
        <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="nf">listdir</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">folder</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span><span class="p">)),</span> <span class="mi">5</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">m</span><span class="p">,</span> <span class="n">image_name</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">image_names</span><span class="p">):</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">folder</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">image_name</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">folder</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">image_name</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="o">-</span><span class="mi">4</span><span class="p">])</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_11_0.png" />
</figure>

<h3 id="observations---data-content">Observations - Data content</h3>

<p>A few observations from each class are depicted in the above figure. The following observations can be made:</p>

<ol>
  <li>All images are top-down photographs.</li>
  <li>The images have <strong>different sizes</strong>. This will have to be investigated.</li>
  <li>If we assume that the soil gravels have the same size in all picture, it appears that the images are taken at various distances from the plants. This can create several issues with the model:
 a. The size of the gravels can be interpreted to classify a plant if certain species are consistently being photographed from the same distance.
 b. If the distance from the camera varies within a class, it can create confusion in the model as the definition of the plants will be different.</li>
  <li>Some pictures are <strong>out of focus</strong>. This is an issue as shape detection becomes harder with blurry edges.</li>
  <li>Several other components can be identified on the pictures. If these only appear with certain species, the model might learn to identify certain species based on the presence of unrelated components such as:
 a. Gravels
 b. Tags
 c. Rulers or dividers</li>
  <li>The images have been taken at <strong>various step of the growth cycle</strong> of the plants. For instance, for the same species, some pictures show a single leaf while other shows more mature specimen with multiple large leaves.</li>
</ol>

<h2 id="data-investigation">Data Investigation</h2>

<h3 id="file-number-vs-image-size">File Number vs Image Size</h3>

<p>Prior to investigating the relationships between file number, image shape, and image resolution, we import the data into a pandas DataFrame to facilitate our analysis.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># instantiate main DataFrame
</span><span class="n">resolution_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span>
    <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">file_name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># extract image information
</span><span class="k">for</span> <span class="n">folder</span> <span class="ow">in</span> <span class="nf">listdir</span><span class="p">(</span><span class="n">ZIPEXTRACT</span><span class="p">):</span>
    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="nf">listdir</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">folder</span><span class="p">):</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">folder</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="nb">file</span><span class="p">)</span>
        <span class="n">resolution_df</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span>
            <span class="p">{</span>
                <span class="sh">'</span><span class="s">file_name</span><span class="sh">'</span><span class="p">:</span> <span class="nb">file</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">:</span> <span class="n">folder</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">:</span> <span class="nf">float</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span>
                <span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">:</span> <span class="nf">float</span><span class="p">(</span><span class="n">image</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
            <span class="p">},</span>
            <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># compute image ratio
</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">ratio</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># isolate file number
</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">file_name</span><span class="sh">'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="nf">extract</span><span class="p">(</span>
    <span class="sa">r</span><span class="sh">'</span><span class="s">(\d+)</span><span class="sh">'</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>

<span class="c1"># print head to confirm extraction
</span><span class="n">resolution_df</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
  <style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>file_name</th>
      <th>species</th>
      <th>width</th>
      <th>height</th>
      <th>ratio</th>
      <th>file_num</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>348.png</td>
      <td>Cleavers</td>
      <td>450.0</td>
      <td>450.0</td>
      <td>1.0</td>
      <td>348</td>
    </tr>
    <tr>
      <td>1</td>
      <td>176.png</td>
      <td>Cleavers</td>
      <td>295.0</td>
      <td>295.0</td>
      <td>1.0</td>
      <td>176</td>
    </tr>
    <tr>
      <td>2</td>
      <td>88.png</td>
      <td>Cleavers</td>
      <td>299.0</td>
      <td>299.0</td>
      <td>1.0</td>
      <td>88</td>
    </tr>
    <tr>
      <td>3</td>
      <td>162.png</td>
      <td>Cleavers</td>
      <td>194.0</td>
      <td>194.0</td>
      <td>1.0</td>
      <td>162</td>
    </tr>
    <tr>
      <td>4</td>
      <td>189.png</td>
      <td>Cleavers</td>
      <td>438.0</td>
      <td>438.0</td>
      <td>1.0</td>
      <td>189</td>
    </tr>
  </tbody>
</table>
</div>

<p>The data has been imported into a dataframe. We have created two new features:</p>

<ol>
  <li>Image ratio - Ratio between image width and image height</li>
  <li>File number - Number associated to the image</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">resolution_df</span><span class="p">.</span><span class="nf">describe</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>width</th>
      <th>height</th>
      <th>ratio</th>
      <th>file_num</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>count</td>
      <td>5539.000000</td>
      <td>5539.000000</td>
      <td>5539.000000</td>
      <td>5539.000000</td>
    </tr>
    <tr>
      <td>mean</td>
      <td>355.202022</td>
      <td>354.783535</td>
      <td>1.000231</td>
      <td>267.794187</td>
    </tr>
    <tr>
      <td>std</td>
      <td>295.108600</td>
      <td>292.700461</td>
      <td>0.007453</td>
      <td>183.276616</td>
    </tr>
    <tr>
      <td>min</td>
      <td>49.000000</td>
      <td>49.000000</td>
      <td>0.943368</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <td>25%</td>
      <td>152.000000</td>
      <td>152.000000</td>
      <td>1.000000</td>
      <td>118.000000</td>
    </tr>
    <tr>
      <td>50%</td>
      <td>267.000000</td>
      <td>267.000000</td>
      <td>1.000000</td>
      <td>236.000000</td>
    </tr>
    <tr>
      <td>75%</td>
      <td>469.000000</td>
      <td>469.000000</td>
      <td>1.000000</td>
      <td>394.000000</td>
    </tr>
    <tr>
      <td>max</td>
      <td>3652.000000</td>
      <td>3457.000000</td>
      <td>1.332083</td>
      <td>805.000000</td>
    </tr>
  </tbody>
</table>
</div>

<p>We can now create several investigation to establish whether of not the file numbers have been assigned randomly.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">plant</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()):</span>
    <span class="n">row</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">%</span> <span class="mi">4</span>
    <span class="n">col</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">//</span> <span class="mi">4</span>

    <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">],</span>
        <span class="n">y</span><span class="o">=</span><span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">],</span>
        <span class="n">c</span><span class="o">=</span><span class="p">[</span><span class="n">sns</span><span class="p">.</span><span class="nf">color_palette</span><span class="p">(</span><span class="sh">"</span><span class="s">hls</span><span class="sh">"</span><span class="p">,</span> <span class="mi">12</span><span class="p">)[</span><span class="n">idx</span><span class="p">]],</span>
        <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
    <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">plant</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_20_0.png" />
</figure>

<p><strong>Observations</strong></p>

<p>The first important observation is related to the number of files and the maximum resolution per plant. As shown in the above plot, the maximum resolution greatly varies between classes (~3000 pixel width for “Black-grass” vs. ~1000 pixel width for “Cleavers”).</p>

<p>A pattern appears when plotting the image width against the file number. As the file number increases, the width of the image increases up to a certain point, then the image size abruptly decreases. <strong>The pattern repeats approximately four times per species.</strong> Note that the pattern is not as well defined for the Back-grass and the Loose Silky bent species.</p>

<p>From this observation, we can make the following assumptions:</p>

<ul>
  <li>Four different plant specimens have been photographed at various stage of their growth cycles.</li>
  <li>Four batches of specimens have been photographed simultaneously during their growth. Once the specimen are matured enough, they stopped being photographed.</li>
</ul>

<p>We now need to create additional visualizations to validate our hypotheses.</p>

<p>There is one aspect of the data distribution to account for. Indeed, the trends are not perfect and some noise is clearly visible. In order to identify the file number corresponding to the beginning of a new resolution cycle, <strong>we are applying a rolling average</strong>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># define a drop ratio between batches
</span><span class="n">max_ratio</span> <span class="o">=</span> <span class="mf">0.5</span>

<span class="c1"># store the file number corresponding to drop in resolution
</span><span class="n">cutoff_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">drop</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># prepare plot
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># iterate over each plant
</span><span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">plant</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()):</span>

    <span class="c1"># sort per file num
</span>    <span class="n">plant_df</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span>
                                 <span class="n">plant</span><span class="p">].</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># rolling max
</span>    <span class="n">window</span> <span class="o">=</span> <span class="mi">20</span>
    <span class="n">plant_df</span><span class="p">[</span><span class="sh">'</span><span class="s">roll_max_width</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">plant_df</span><span class="p">[</span><span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">].</span><span class="nf">rolling</span><span class="p">(</span>
        <span class="n">window</span><span class="p">,</span> <span class="n">min_periods</span><span class="o">=</span><span class="n">window</span><span class="p">).</span><span class="nf">max</span><span class="p">()</span>

    <span class="c1"># find drop
</span>    <span class="n">drops</span> <span class="o">=</span> <span class="n">plant_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span>
        <span class="p">(</span><span class="n">plant_df</span><span class="p">[</span><span class="sh">'</span><span class="s">roll_max_width</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span>
         <span class="n">plant_df</span><span class="p">[</span><span class="sh">'</span><span class="s">roll_max_width</span><span class="sh">'</span><span class="p">].</span><span class="nf">shift</span><span class="p">(</span><span class="o">-</span><span class="n">window</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">&amp;</span>
        <span class="p">(</span><span class="n">plant_df</span><span class="p">[</span><span class="sh">'</span><span class="s">roll_max_width</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">plant_df</span><span class="p">[</span><span class="sh">'</span><span class="s">roll_max_width</span><span class="sh">'</span><span class="p">].</span><span class="nf">shift</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span> <span class="o">&amp;</span>
        <span class="p">(</span><span class="n">plant_df</span><span class="p">[</span><span class="sh">'</span><span class="s">roll_max_width</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">plant_df</span><span class="p">[</span><span class="sh">'</span><span class="s">roll_max_width</span><span class="sh">'</span><span class="p">].</span><span class="nf">max</span><span class="p">()</span> <span class="o">*</span>
         <span class="n">max_ratio</span><span class="p">),</span> <span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">]</span>

    <span class="n">cutoff_df</span> <span class="o">=</span> <span class="n">cutoff_df</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span>
        <span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">:</span> <span class="n">plant</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">drop</span><span class="sh">'</span><span class="p">:</span> <span class="n">drops</span><span class="p">.</span><span class="nf">to_list</span><span class="p">()</span>
    <span class="p">},</span>
                                 <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

    <span class="n">row</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">%</span> <span class="mi">4</span>
    <span class="n">col</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">//</span> <span class="mi">4</span>

    <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">plant_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">],</span>
                        <span class="n">plant_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="sh">'</span><span class="s">roll_max_width</span><span class="sh">'</span><span class="p">],</span>
                        <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">,</span>
                        <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="p">,</span>
                        <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
    <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">plant</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">drop_val</span> <span class="ow">in</span> <span class="n">cutoff_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">cutoff_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">drop</span><span class="sh">'</span><span class="p">].</span><span class="nf">all</span><span class="p">():</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">axvline</span><span class="p">(</span><span class="n">drop_val</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">plant_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">],</span>
                           <span class="n">y</span><span class="o">=</span><span class="n">plant_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">],</span>
                           <span class="n">c</span><span class="o">=</span><span class="p">[</span><span class="n">sns</span><span class="p">.</span><span class="nf">color_palette</span><span class="p">(</span><span class="sh">"</span><span class="s">hls</span><span class="sh">"</span><span class="p">,</span> <span class="mi">12</span><span class="p">)[</span><span class="n">idx</span><span class="p">]],</span>
                           <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
    <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">plant</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_22_0.png" />
</figure>

<p>We can now plot various photographs per cycle and determine if there is any correlation (same seedling, same growth stage).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create plot
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">45</span><span class="p">))</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">plant</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()):</span>

    <span class="c1"># isolate first cycle cutoff
</span>    <span class="n">cutoff_num</span> <span class="o">=</span> <span class="n">cutoff_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">cutoff_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span>
                               <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">drop</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

    <span class="c1"># isolate file numbers less that cutoff_num
</span>    <span class="n">all_file_nums</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span>
        <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">cutoff_num</span><span class="p">)].</span><span class="nf">sort_values</span><span class="p">(</span>
            <span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">]</span>

    <span class="c1"># select images at 0%, 25%, 50%, 75%, and 100% of cycle
</span>    <span class="n">selected_file_nums</span> <span class="o">=</span> <span class="n">all_file_nums</span><span class="p">.</span><span class="nf">quantile</span><span class="p">([</span><span class="mf">0.</span><span class="p">,</span> <span class="mf">0.25</span><span class="p">,</span> <span class="mf">0.50</span><span class="p">,</span> <span class="mf">0.75</span><span class="p">,</span>
                                                 <span class="mf">1.00</span><span class="p">]).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">).</span><span class="n">values</span>

    <span class="c1"># plot images
</span>    <span class="k">for</span> <span class="n">m</span><span class="p">,</span> <span class="n">file_num</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">selected_file_nums</span><span class="p">):</span>
        <span class="c1"># some images contain an underscore in the file name
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">image</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">plant</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span> <span class="o">+</span>
                                   <span class="sh">'</span><span class="s">.png</span><span class="sh">'</span><span class="p">)</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">image</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">plant</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span> <span class="o">+</span>
                                   <span class="sh">'</span><span class="s">-1.png</span><span class="sh">'</span><span class="p">)</span>

        <span class="c1"># plot image, hide grid, set title
</span>        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="n">m</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="n">m</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="n">m</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">plant</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">))</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_24_0.png" />
</figure>

<p><strong>Observations</strong></p>

<p>For the above plots and displayed photographs, a <strong>clear relationship can be identified between file number and plant size</strong> (photo size). We can later leverage this information to extract a new feature corresponding to the seedling size.<br />
We can hypothesize that the original photographs were taken at full resolution and that seedlings were manually cropped to create the individual images.</p>

<h3 id="image-shape-and-resolution">Image Shape and Resolution</h3>

<h3 id="investigation">Investigation</h3>

<p>As previously established, the image sizes range from 49 pixels to 3652 pixels. This is an extreme difference that will impact the model. We are now going to dig deeper and investigate if the image size is correlated to the classes and if the set contains outliers.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="nf">jointplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">resolution_df</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">#4CB391</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.3</span><span class="p">);</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_29_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">Pearson correlation between image height and image width: {:.5f}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span>
        <span class="n">resolution_df</span><span class="p">[[</span><span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">]].</span><span class="nf">corr</span><span class="p">().</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Pearson correlation between image height and image width: 0.99922
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{:.2f}% of the images are square (ratio=1.)</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">((</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">ratio</span><span class="sh">'</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>98.77% of the images are square (ratio=1.)
</code></pre></div></div>

<p><strong>Observations</strong></p>

<p>From the above distribution plot, it appear that most of the images present a 1:1 shape ratio. We can now filter the square images and search for additional information using the non-square images.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">species</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">width</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">resolution_df</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Distribution of image width between species</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 1.0, 'Distribution of image width between species')
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_33_1.png" />
</figure>

<p><strong>Observations</strong></p>

<p>The above boxplot shows the followings:</p>

<ol>
  <li>Each class contains outliers with large width.</li>
  <li>The width distribution is not consistent between classes.</li>
  <li>The minimum width seems to be roughly identical between classes (~60 pixels) except for the “Charlock” class.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Minimum image height and width across species:</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])[[</span><span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">]].</span><span class="nf">min</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Minimum image height and width across species:
                           width  height
species                                 
Black-grass                 73.0    73.0
Charlock                   121.0   121.0
Cleavers                    66.0    66.0
Common Chickweed            54.0    54.0
Common wheat                51.0    51.0
Fat Hen                     55.0    55.0
Loose Silky-bent            71.0    71.0
Maize                       54.0    54.0
Scentless Mayweed           49.0    49.0
Shepherd Purse              63.0    63.0
Small-flowered Cranesbill   62.0    62.0
Sugar beet                  49.0    49.0
</code></pre></div></div>

<p>We previously saw that most of the images are square. We can focus on the rectangular image to see if there is a pattern in their distribution (species, size).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filtered_df</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">[</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">ratio</span><span class="sh">'</span><span class="p">]</span> <span class="o">!=</span> <span class="mf">1.00</span><span class="p">]</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">jointplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">filtered_df</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">#4CB391</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.3</span><span class="p">);</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_37_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">Pearson correlation between image height and image width for rectangular images: {:.5f}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span>
        <span class="n">filtered_df</span><span class="p">[[</span><span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">]].</span><span class="nf">corr</span><span class="p">().</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Pearson correlation between image height and image width for rectangular images: 0.99013
</code></pre></div></div>

<p><strong>Observations</strong></p>

<p>The height/width of rectangular images are distributed is a manner similar as the rest of the data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">scatterplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">,</span>
                <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">,</span>
                <span class="n">data</span><span class="o">=</span><span class="n">filtered_df</span><span class="p">,</span>
                <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">#4CB391</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">alpha</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
                <span class="n">hue</span><span class="o">=</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">,</span>
                <span class="n">s</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span>
                <span class="n">palette</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">color_palette</span><span class="p">(</span><span class="sh">"</span><span class="s">bright</span><span class="sh">"</span><span class="p">,</span> <span class="mi">6</span><span class="p">));</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_40_0.png" />
</figure>

<p><strong>Observations</strong></p>

<p>From the above plots, we can draw the following observations:</p>

<ol>
  <li>Most of the rectangular images from the “Loose Silky-bent” are small images &lt;700pixels)</li>
  <li>Eventhough these images are not perfectly square, they are fairly square (correlation of 0.99).</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
<span class="k">for</span> <span class="n">single</span> <span class="ow">in</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">species</span><span class="p">.</span><span class="nf">unique</span><span class="p">():</span>
    <span class="n">sns</span><span class="p">.</span><span class="nf">kdeplot</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">single</span><span class="p">].</span><span class="n">width</span><span class="p">,</span>
                <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                <span class="n">label</span><span class="o">=</span><span class="n">single</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">KDE-Plot of image width given species</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Image width</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Density</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">#4CB391</span><span class="sh">"</span><span class="p">,</span> <span class="n">hist_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">alpha</span><span class="sh">'</span><span class="p">:</span><span class="mf">0.8</span><span class="p">},</span> <span class="n">kde_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">color</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">})</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Image width</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Density</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Overall image width distribution</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_42_0.png" />
</figure>

<p>The above plots show distribution that are typical for log distribution. We can apply a log transformation to normalize them.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
<span class="k">for</span> <span class="n">single</span> <span class="ow">in</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">species</span><span class="p">.</span><span class="nf">unique</span><span class="p">():</span>
    <span class="n">sns</span><span class="p">.</span><span class="nf">kdeplot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span>
        <span class="n">resolution_df</span><span class="p">[</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">single</span><span class="p">].</span><span class="n">width</span><span class="p">),</span>
                <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                <span class="n">label</span><span class="o">=</span><span class="n">single</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">KDE-Plot of image width given species</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Image width</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Density</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">.</span><span class="n">width</span><span class="p">),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">#4CB391</span><span class="sh">"</span><span class="p">,</span> <span class="n">hist_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">alpha</span><span class="sh">'</span><span class="p">:</span><span class="mf">0.8</span><span class="p">},</span> <span class="n">kde_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">color</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">})</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Image width</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Density</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Overall image width distribution</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_44_0.png" />
</figure>

<p><strong>Observations</strong></p>

<ol>
  <li>Three groups can be identified from the above plots.</li>
  <li>These groups are highly tied to a subset of species. This could be a valuable add-on to our model.</li>
</ol>

<h2 id="feature-engineering">Feature Engineering</h2>

<p>During our investigation, we have reached the following conclusions:</p>

<ol>
  <li>The image size can be a good indicator of the plant species.</li>
  <li>For each species, we have identified image cycles through the file names. We have extracted approximate cut-off for each cycle and each species.</li>
  <li>Each image contains a certain number of external components that can contaminate the model.</li>
</ol>

<p>One of the first focus of our feature engineering is going to <strong>try to estimate the growth state</strong>. To do so, we will cluster the width of the images.</p>

<p><em>Note: since we have established that most of the images are square, we are only going to use the width as our main feature from now on.</em></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># normalize and scale the data
</span><span class="n">scaler</span> <span class="o">=</span> <span class="nc">StandardScaler</span><span class="p">()</span>

<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>

<span class="n">K</span> <span class="o">=</span> <span class="nf">range</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">20</span><span class="p">)</span>
<span class="n">inertias</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">tqdm_notebook</span><span class="p">(</span><span class="n">K</span><span class="p">):</span>
    <span class="n">km</span> <span class="o">=</span> <span class="nc">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="n">k</span><span class="p">)</span>
    <span class="n">km</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
    
    <span class="c1"># compute inertias
</span>    <span class="n">inertias</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">km</span><span class="p">.</span><span class="n">inertia_</span><span class="p">)</span> 
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HBox(children=(IntProgress(value=0, max=17), HTML(value='')))
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">K</span><span class="p">,</span> <span class="n">inertias</span><span class="p">,</span> <span class="sh">'</span><span class="s">X-</span><span class="sh">'</span><span class="p">,</span> <span class="n">markersize</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">#4CB391</span><span class="sh">"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Values of K</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Inertia</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">The Elbow Method using Inertia</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_48_0.png" />
</figure>

<p><strong>Observations</strong></p>

<p>Using the elbow method on the inertia, we can consider <strong>5</strong> to be an appropriate number of clusters for our growth cycle.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># re-train KMeans using optimal number of clusters
</span><span class="n">km</span> <span class="o">=</span> <span class="nc">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>

<span class="c1"># assign cluster to records
</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">km</span><span class="p">.</span><span class="nf">fit_predict</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>

<span class="n">colors</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span>
    <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">sns</span><span class="p">.</span><span class="nf">color_palette</span><span class="p">(</span><span class="sh">"</span><span class="s">hls</span><span class="sh">"</span><span class="p">,</span> <span class="mi">5</span><span class="p">)[</span><span class="n">x</span><span class="p">]).</span><span class="n">values</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">,</span>
           <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">height</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">,</span>
           <span class="n">s</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span>
           <span class="n">c</span><span class="o">=</span><span class="n">colors</span><span class="p">,</span>
           <span class="n">alpha</span><span class="o">=</span><span class="mf">0.4</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Image width</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Image height</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Width Clustering</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>

<span class="k">for</span> <span class="n">cluster_center</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="n">scaler</span><span class="p">.</span><span class="nf">inverse_transform</span><span class="p">((</span><span class="n">km</span><span class="p">.</span><span class="n">cluster_centers_</span><span class="p">))):</span>
    <span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">cluster_center</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">cluster_center</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">'</span><span class="s">*</span><span class="sh">'</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">160</span><span class="p">)</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_51_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">plant</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()):</span>
    <span class="n">row</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">%</span> <span class="mi">4</span>
    <span class="n">col</span> <span class="o">=</span> <span class="n">idx</span> <span class="o">//</span> <span class="mi">4</span>

    <span class="n">colors</span> <span class="o">=</span> <span class="p">[</span>
        <span class="n">sns</span><span class="p">.</span><span class="nf">color_palette</span><span class="p">(</span><span class="sh">"</span><span class="s">hls</span><span class="sh">"</span><span class="p">,</span> <span class="mi">5</span><span class="p">)[</span><span class="n">x</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span>
        <span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">]</span>
    <span class="p">]</span>

    <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span>
        <span class="n">x</span><span class="o">=</span><span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">],</span>
        <span class="n">y</span><span class="o">=</span><span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">width</span><span class="sh">'</span><span class="p">],</span>
        <span class="n">c</span><span class="o">=</span><span class="n">colors</span><span class="p">,</span>
        <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

    <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">plant</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">row</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">col</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">legend_elements</span> <span class="o">=</span> <span class="p">[</span>
            <span class="nc">Line2D</span><span class="p">([</span><span class="mi">0</span><span class="p">],</span> <span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                   <span class="n">marker</span><span class="o">=</span><span class="sh">'</span><span class="s">o</span><span class="sh">'</span><span class="p">,</span>
                   <span class="n">linewidth</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
                   <span class="n">markeredgecolor</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">color_palette</span><span class="p">(</span><span class="sh">'</span><span class="s">hls</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)[</span><span class="n">x</span><span class="p">],</span>
                   <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Cluster </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">x</span><span class="p">),</span>
                   <span class="n">markerfacecolor</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">color_palette</span><span class="p">(</span><span class="sh">'</span><span class="s">hls</span><span class="sh">'</span><span class="p">,</span> <span class="mi">5</span><span class="p">)[</span><span class="n">x</span><span class="p">],</span>
                   <span class="n">markersize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span> <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>
        <span class="p">]</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">legend</span><span class="p">(</span><span class="n">handles</span><span class="o">=</span><span class="n">legend_elements</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">upper right</span><span class="sh">'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_52_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="n">scaler</span><span class="p">.</span><span class="nf">inverse_transform</span><span class="p">((</span><span class="n">km</span><span class="p">.</span><span class="n">cluster_centers_</span><span class="p">))).</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Cluster {}: width = {:.1f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">idx</span><span class="p">,</span> <span class="n">k</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cluster 0: width = 93.7
Cluster 1: width = 517.8
Cluster 2: width = 294.4
Cluster 3: width = 166.0
Cluster 4: width = 1008.7
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CLUSTER_ORDER</span> <span class="o">=</span> <span class="n">km</span><span class="p">.</span><span class="n">cluster_centers_</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nf">argsort</span><span class="p">().</span><span class="nf">tolist</span><span class="p">()[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">CLUSTER_ORDER</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[0, 3, 2, 1, 4]
</code></pre></div></div>

<p><strong>Observations</strong></p>

<p>The above plots show the results of our clustering. We can make the following observations:</p>

<ul>
  <li>most plant present photographs in the 5 clusters.</li>
  <li>for each plant, the repetition of growth cycle through each period (file numbers) are identical.</li>
</ul>

<p>We can now plot individual of each cycle and validate our assumptions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create plot
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">35</span><span class="p">))</span>

<span class="c1"># iterate over species
</span><span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">plant</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()):</span>

    <span class="c1"># iterate over clusters
</span>    <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">cycle</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">CLUSTER_ORDER</span><span class="p">):</span>

        <span class="c1"># select subset
</span>        <span class="n">filtered_df</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">)</span> <span class="o">&amp;</span>
                                        <span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">cycle</span><span class="p">)]</span>

        <span class="c1"># select random image
</span>        <span class="k">if</span> <span class="n">filtered_df</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">file_name</span> <span class="o">=</span> <span class="n">filtered_df</span><span class="p">.</span><span class="nf">sample</span><span class="p">(</span><span class="mi">1</span><span class="p">)[</span><span class="sh">'</span><span class="s">file_name</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

            <span class="n">image</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">plant</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">file_name</span><span class="p">)</span>

            <span class="c1"># plot image, hide grid, set title
</span>            <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="n">n</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="n">n</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="n">n</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">plant</span> <span class="o">+</span> <span class="sh">'</span><span class="se">\n</span><span class="sh">'</span> <span class="o">+</span> <span class="sh">'</span><span class="s">Cluster </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">cycle</span><span class="p">))</span>
        
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_56_0.png" />
</figure>

<p>We also would like to obtain the count of photographs per species and per cluster.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">CLUSTER_ORDER_str</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">CLUSTER_ORDER</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># aggregate by species and growth_lvl
</span><span class="n">agg_df</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]).</span><span class="nf">size</span><span class="p">().</span><span class="nf">unstack</span><span class="p">().</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">agg_df</span><span class="p">.</span><span class="n">index</span> <span class="o">=</span> <span class="n">agg_df</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>

<span class="c1"># compute percentable per species
</span><span class="n">agg_df</span> <span class="o">=</span> <span class="n">agg_df</span> <span class="o">/</span> <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">()</span>

<span class="n">agg_df</span> <span class="o">=</span> <span class="n">agg_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">CLUSTER_ORDER</span><span class="p">,</span> <span class="p">:]</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">agg_df</span><span class="p">.</span><span class="nf">reindex</span><span class="p">(</span><span class="n">CLUSTER_ORDER_str</span><span class="p">),</span>
            <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">fmt</span><span class="o">=</span><span class="sh">"</span><span class="s">.0%</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">xticklabels</span><span class="o">=</span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">BuGn</span><span class="sh">'</span><span class="p">,</span>
            <span class="n">annot_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">:</span> <span class="mi">15</span><span class="p">},</span>
            <span class="n">cbar</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">yticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Cluster distribution per species</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">);</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_59_0.png" />
</figure>

<p><strong>Observations</strong></p>

<ul>
  <li>The new growth cycle cluster appears to be a good feature for certain species. For instance 43% of the “Scentless Mayweed” can be found in cluster 0. In addition, some cluster barely contain any individual for certain species.</li>
  <li>This finding can be considered as data leakage and our model may be tempted to predict a class based on the size of the image. Something will have to be done to prevent such a flaw.</li>
  <li>Finally, we observed early on, a class imbalance. The imbalance combined with the leakage can become really problematic and will both need to be addressed.</li>
</ul>

<h2 id="convolutional-neural-network">Convolutional Neural Network</h2>

<p>In this section, we will train a CNN to predict the <code class="language-plaintext highlighter-rouge">species</code> feature. The approach is divided between the following steps:</p>

<ol>
  <li>Encode the target feature</li>
  <li>Download the data</li>
  <li>Split the data between a training and test set</li>
  <li>Perform data augmentation</li>
  <li>Determine the cost function to be optimized</li>
</ol>

<h3 id="data-loader-validation-and-data--augmentation">Data Loader, Validation and Data  Augmentation</h3>

<p>In order for our model to generalize well on unseen data, a good practice consists of using image transformation to create new unseen examples.<br />
We need to ensure that our model does not over fit the training data. To do so, we are using a training set and a test set both taken from the original dataset.</p>

<p>Keras contains useful tools to help process image files and feed them in batches to the model. We will be using a generator for both the train and test phases.</p>

<ul>
  <li>First, we must create a new feature to our dataset which contains the full path to each image.</li>
  <li>Then, we can create two generators, the training generator will contains several data augmentation transformation (horizontal and vertical flips, zoom).</li>
  <li>Both the train and test generator will normalize the pixel values.</li>
  <li>Finally, the images will be sent to the model using batches of 32 RGB images reshaped at 70x70.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create full path to data
</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">full_path</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../Data/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">resolution_df</span><span class="p">[</span>
    <span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">file_name</span><span class="sh">'</span><span class="p">]</span>
<span class="n">resolution_df</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>file_name</th>
      <th>species</th>
      <th>width</th>
      <th>height</th>
      <th>ratio</th>
      <th>file_num</th>
      <th>growth_lvl</th>
      <th>full_path</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>348.png</td>
      <td>Cleavers</td>
      <td>450.0</td>
      <td>450.0</td>
      <td>1.0</td>
      <td>348</td>
      <td>1</td>
      <td>../Data/Cleavers/348.png</td>
    </tr>
    <tr>
      <td>1</td>
      <td>176.png</td>
      <td>Cleavers</td>
      <td>295.0</td>
      <td>295.0</td>
      <td>1.0</td>
      <td>176</td>
      <td>2</td>
      <td>../Data/Cleavers/176.png</td>
    </tr>
    <tr>
      <td>2</td>
      <td>88.png</td>
      <td>Cleavers</td>
      <td>299.0</td>
      <td>299.0</td>
      <td>1.0</td>
      <td>88</td>
      <td>2</td>
      <td>../Data/Cleavers/88.png</td>
    </tr>
    <tr>
      <td>3</td>
      <td>162.png</td>
      <td>Cleavers</td>
      <td>194.0</td>
      <td>194.0</td>
      <td>1.0</td>
      <td>162</td>
      <td>3</td>
      <td>../Data/Cleavers/162.png</td>
    </tr>
    <tr>
      <td>4</td>
      <td>189.png</td>
      <td>Cleavers</td>
      <td>438.0</td>
      <td>438.0</td>
      <td>1.0</td>
      <td>189</td>
      <td>1</td>
      <td>../Data/Cleavers/189.png</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># image size
</span><span class="n">scale</span> <span class="o">=</span> <span class="mi">224</span>

<span class="c1"># batch size
</span><span class="n">batch_size</span> <span class="o">=</span> <span class="mi">32</span>

<span class="c1"># random seed
</span><span class="n">seed</span> <span class="o">=</span> <span class="mi">10</span>
</code></pre></div></div>

<p>At this point of the analysis, the images have not been loaded into a numpy array. Using the data stored in the pandas DataFrame, we load the images into a single array of size (N, scale, scale).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load images into a numpy array
</span><span class="n">full_set</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">tqdm_notebook</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">full_path</span><span class="sh">'</span><span class="p">]):</span>
    <span class="n">full_set</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">cv2</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="n">cv2</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">i</span><span class="p">)[:,:,::</span><span class="o">-</span><span class="mi">1</span><span class="p">],(</span><span class="n">scale</span><span class="p">,</span><span class="n">scale</span><span class="p">)))</span>
<span class="n">full_set</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">asarray</span><span class="p">(</span><span class="n">full_set</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{} images in full set.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">full_set</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HBox(children=(IntProgress(value=0, max=5539), HTML(value='')))



5539 images in full set.
</code></pre></div></div>

<p>Now that the images have been loaded and resized, we have to work on the target labels. The current feature used to encode the species contains various strings. We need to convert the list of labels into a one-hot encoded array of size (N, n) where n is the number of species in the dataset.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># encode target
# create encoder and fit on training set
</span><span class="n">labels</span> <span class="o">=</span> <span class="nc">LabelEncoder</span><span class="p">()</span>
<span class="n">labels</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># display target classes
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Classes</span><span class="sh">'</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">))</span>

<span class="c1"># encode labels
</span><span class="n">encodedlabels</span> <span class="o">=</span> <span class="n">labels</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])</span>
<span class="n">clearalllabels</span> <span class="o">=</span> <span class="n">np_utils</span><span class="p">.</span><span class="nf">to_categorical</span><span class="p">(</span><span class="n">encodedlabels</span><span class="p">)</span>

<span class="c1"># store number of classes for future use
</span><span class="n">n_classes</span> <span class="o">=</span> <span class="n">clearalllabels</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Classes['Black-grass' 'Charlock' 'Cleavers' 'Common Chickweed' 'Common wheat'
 'Fat Hen' 'Loose Silky-bent' 'Maize' 'Scentless Mayweed' 'Shepherd Purse'
 'Small-flowered Cranesbill' 'Sugar beet']
</code></pre></div></div>

<p>Before we can feed our data into a model, an essential step consists of scaling the pixel values down to range from 0 to 1. This will stabilize the training of the model. Since RGB encoding ranges from 0 to 255, we will divide the pixel values by 255.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scale data
</span><span class="n">full_set</span> <span class="o">=</span> <span class="n">full_set</span> <span class="o">/</span> <span class="mf">255.</span>
</code></pre></div></div>

<p>Finally, we need to establish our validation strategy. We divide the entire set of images into a training set (90%) and a test set (10%). Since the classes are unbalanced, we are forcing the train-test-split to be as consistent as possible by stratifying the selection process.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># isolate train and test indexes
</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">full_set</span><span class="p">,</span>
                                                    <span class="n">clearalllabels</span><span class="p">,</span>
                                                    <span class="n">test_size</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                                                    <span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">,</span>
                                                    <span class="n">stratify</span><span class="o">=</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot proportions
</span><span class="n">train_split</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)).</span><span class="nf">value_counts</span><span class="p">()</span><span class="o">/</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span>
<span class="n">test_split</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">y_test</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)).</span><span class="nf">value_counts</span><span class="p">()</span><span class="o">/</span><span class="n">y_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">train_split</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">train_split</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">#4CB391</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">test_split</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">train_split</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">#4CB391</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Class distribution - Training Set</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Class distribution - Test Set</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Proportion (%)</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Proportion (%)</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Class ID</span><span class="sh">"</span><span class="p">);</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_74_0.png" />
</figure>

<p>Finally, we will use data augmentation to help the model generalize on unseen data. The following actions can be taken:</p>

<ol>
  <li>Rotation from -180 to 180 deg</li>
  <li>Width and height shifts of 10%</li>
  <li>Shear range of 10%</li>
  <li>Zoom range of 10%</li>
  <li>Horizontal and vertical flips</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># data augmentation
</span><span class="n">generator</span> <span class="o">=</span> <span class="nc">ImageDataGenerator</span><span class="p">(</span><span class="n">rotation_range</span><span class="o">=</span><span class="mi">180</span><span class="p">,</span>
                               <span class="n">width_shift_range</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                               <span class="n">height_shift_range</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                               <span class="n">brightness_range</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                               <span class="n">shear_range</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
                               <span class="n">zoom_range</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                               <span class="n">channel_shift_range</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
                               <span class="n">fill_mode</span><span class="o">=</span><span class="sh">'</span><span class="s">nearest</span><span class="sh">'</span><span class="p">,</span>
                               <span class="n">horizontal_flip</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                               <span class="n">vertical_flip</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                               <span class="n">dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">float32</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="build-model">Build Model</h3>

<p>It is now time to build our model. We will use a Convolutional Neural Network (CNN). The three CNN blocks are defined as follows:</p>

<ol>
  <li>Conv2D + relu</li>
  <li>BatchNorm</li>
  <li>Conv2D + relu</li>
  <li>Maxpooling</li>
  <li>BatchNorm</li>
  <li>Dropout</li>
</ol>

<p>The CNN is followed by two dense layers equipped with BatchNorm and Dropout.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>

<span class="n">model</span> <span class="o">=</span> <span class="nc">Sequential</span><span class="p">()</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="n">scale</span><span class="p">,</span> <span class="n">scale</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Flatten</span><span class="p">())</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">())</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">())</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dense</span><span class="p">(</span><span class="n">n_classes</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">softmax</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="metric-definition-and-optimizer">Metric Definition and Optimizer</h3>

<p>Before we can train our model, we have to define the followings:</p>

<ol>
  <li><strong>Optimizing metrics</strong>: in our case, we will be optimizing the cross-entropy. This is typical for a multi-class problem.</li>
  <li><strong>Optimizer technique</strong>: an Adam optimizer is used.</li>
  <li><strong>Optimization strategy</strong>: that is how to adjust the learning rate, when to stop the training.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># optimizer
</span><span class="n">optimizer</span> <span class="o">=</span> <span class="n">optimizers</span><span class="p">.</span><span class="nc">Adam</span><span class="p">(</span><span class="n">lr</span><span class="o">=</span><span class="mf">1e-3</span><span class="p">,</span> <span class="n">beta_1</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">beta_2</span><span class="o">=</span><span class="mf">0.999</span><span class="p">)</span>

<span class="c1"># define loss function
</span><span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="n">optimizer</span><span class="p">,</span>
              <span class="n">loss</span><span class="o">=</span><span class="n">losses</span><span class="p">.</span><span class="n">categorical_crossentropy</span><span class="p">,</span>
              <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># define optimization schedule with callbacks
</span><span class="n">lrate</span> <span class="o">=</span> <span class="nc">ReduceLROnPlateau</span><span class="p">(</span><span class="n">monitor</span><span class="o">=</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">,</span>
                          <span class="n">factor</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span>
                          <span class="n">patience</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
                          <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
                          <span class="n">min_lr</span><span class="o">=</span><span class="mf">0.0001</span><span class="p">)</span>

<span class="n">filepath</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./Model_0/weights.best_{epoch:02d}-{val_acc:.2f}.hdf5</span><span class="sh">"</span>
<span class="n">checkpoints</span> <span class="o">=</span> <span class="nc">ModelCheckpoint</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span>
                              <span class="n">monitor</span><span class="o">=</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">,</span>
                              <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
                              <span class="n">save_best_only</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                              <span class="n">period</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">callbacks_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">lrate</span><span class="p">,</span> <span class="n">checkpoints</span><span class="p">,</span> <span class="nc">TQDMNotebookCallback</span><span class="p">(</span><span class="n">leave_inner</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">leave_outer</span><span class="o">=</span><span class="bp">True</span><span class="p">)]</span>

<span class="n">model</span><span class="p">.</span><span class="nf">summary</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Model: "sequential_1"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_1 (Conv2D)            (None, 220, 220, 32)      2432      
_________________________________________________________________
batch_normalization_1 (Batch (None, 220, 220, 32)      128       
_________________________________________________________________
conv2d_2 (Conv2D)            (None, 216, 216, 64)      51264     
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 108, 108, 64)      0         
_________________________________________________________________
batch_normalization_2 (Batch (None, 108, 108, 64)      256       
_________________________________________________________________
dropout_1 (Dropout)          (None, 108, 108, 64)      0         
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 104, 104, 64)      102464    
_________________________________________________________________
batch_normalization_3 (Batch (None, 104, 104, 64)      256       
_________________________________________________________________
conv2d_4 (Conv2D)            (None, 100, 100, 64)      102464    
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 50, 50, 64)        0         
_________________________________________________________________
batch_normalization_4 (Batch (None, 50, 50, 64)        256       
_________________________________________________________________
dropout_2 (Dropout)          (None, 50, 50, 64)        0         
_________________________________________________________________
conv2d_5 (Conv2D)            (None, 46, 46, 128)       204928    
_________________________________________________________________
batch_normalization_5 (Batch (None, 46, 46, 128)       512       
_________________________________________________________________
conv2d_6 (Conv2D)            (None, 42, 42, 128)       409728    
_________________________________________________________________
max_pooling2d_3 (MaxPooling2 (None, 21, 21, 128)       0         
_________________________________________________________________
batch_normalization_6 (Batch (None, 21, 21, 128)       512       
_________________________________________________________________
dropout_3 (Dropout)          (None, 21, 21, 128)       0         
_________________________________________________________________
conv2d_7 (Conv2D)            (None, 17, 17, 256)       819456    
_________________________________________________________________
batch_normalization_7 (Batch (None, 17, 17, 256)       1024      
_________________________________________________________________
conv2d_8 (Conv2D)            (None, 13, 13, 256)       1638656   
_________________________________________________________________
max_pooling2d_4 (MaxPooling2 (None, 6, 6, 256)         0         
_________________________________________________________________
batch_normalization_8 (Batch (None, 6, 6, 256)         1024      
_________________________________________________________________
dropout_4 (Dropout)          (None, 6, 6, 256)         0         
_________________________________________________________________
flatten_1 (Flatten)          (None, 9216)              0         
_________________________________________________________________
dense_1 (Dense)              (None, 256)               2359552   
_________________________________________________________________
batch_normalization_9 (Batch (None, 256)               1024      
_________________________________________________________________
dropout_5 (Dropout)          (None, 256)               0         
_________________________________________________________________
dense_2 (Dense)              (None, 256)               65792     
_________________________________________________________________
batch_normalization_10 (Batc (None, 256)               1024      
_________________________________________________________________
dropout_6 (Dropout)          (None, 256)               0         
_________________________________________________________________
dense_3 (Dense)              (None, 12)                3084      
=================================================================
Total params: 5,765,836
Trainable params: 5,762,828
Non-trainable params: 3,008
_________________________________________________________________
</code></pre></div></div>

<pre><code class="language-pythonpython"># Fit the model
history = model.fit_generator(generator.flow(X_train, y_train, batch_size=batch_size),
                    epochs=50,
                    steps_per_epoch=np.ceil(X_train.shape[0] / batch_size),
                    validation_data=(X_test, y_test),
                    callbacks=callbacks_list,
                    verbose=2)
</code></pre>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Epoch</span> <span class="mi">1</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">2586</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">2.1630</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.3713</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">9.3464</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.2022</span>  
<span class="n">Epoch</span> <span class="mi">2</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">2562</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">1.4018</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.5561</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">1.7693</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.5235</span>  
<span class="n">Epoch</span> <span class="mi">3</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">2554</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">1.1133</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.6468</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">1.6343</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.5505</span>  
<span class="p">.</span>  
<span class="p">.</span>  
<span class="p">.</span>  
<span class="n">Epoch</span> <span class="mi">49</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">2746</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">0.2220</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.9234</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">0.3810</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.8736</span>  
<span class="n">Epoch</span> <span class="mi">50</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">2747</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">0.2100</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.9202</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">0.2375</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.9152</span>  
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lr</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">lr_0.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">history</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">history_0.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">training</span><span class="sh">'</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">dodgerblue</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">validation</span><span class="sh">'</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">crimson</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Loss function</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">epochs</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">loss</span><span class="sh">"</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">training</span><span class="sh">'</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">dodgerblue</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">validation</span><span class="sh">'</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">crimson</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Accuracy</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">epochs</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">accuracy</span><span class="sh">"</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">lr</span><span class="p">[</span><span class="sh">'</span><span class="s">lr</span><span class="sh">'</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">dodgerblue</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Learning Rate</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">epochs</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">learning rate</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.0011</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">);</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_85_0.png" />
</figure>

<p><strong>Results</strong></p>

<p>The value of the loss functions is almost identical between the two sets. We can see that the model has reached a stable configuration as the loss function of the training set and test set both plateau after 15 epochs.</p>

<p>In addition, the accuracy of both models reach around 90%.</p>

<p><strong>In conclusion, the training of the model is considered to be successful</strong>. Overfitting has been prevented by using data augmentation techniques and the model performs well on both sets.</p>

<p>The next step is to investigate the performances of the model by looking at predictions.</p>

<h3 id="predictions-and-results">Predictions and Results</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Maximum accuray on validation step:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s"> Epoch: {}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">])))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">        {:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">.</span><span class="nf">max</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Maximum accuray on validation step:
 Epoch: 43
        92.42%
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load best model
</span><span class="n">model</span><span class="p">.</span><span class="nf">load_weights</span><span class="p">(</span><span class="sh">"</span><span class="s">./Model_0/weights.best_43-0.92.hdf5</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>Make predictions on both the train and test sets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y_train_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y_test_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Training Data</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">TAD_tools_v01</span><span class="p">.</span><span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
                                    <span class="n">y_train_pred</span><span class="p">,</span>
                                    <span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">,</span>
                                    <span class="n">normalize</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                                    <span class="n">title</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                                    <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">Oranges</span><span class="p">,</span>
                                    <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mf">11.5</span><span class="p">,</span><span class="o">-</span><span class="mf">0.5</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training Data
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_93_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Test Data</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">TAD_tools_v01</span><span class="p">.</span><span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">y_test</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
                                    <span class="n">y_test_pred</span><span class="p">,</span>
                                    <span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">,</span>
                                    <span class="n">normalize</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                                    <span class="n">title</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                                    <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">Greens</span><span class="p">,</span>
                                    <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mf">11.5</span><span class="p">,</span><span class="o">-</span><span class="mf">0.5</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Test Data
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_94_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Accurancy:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">   Train: {:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">accuracy_score</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_train_pred</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">   Test:  {:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_test_pred</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">F1-score</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">   Train: {:.3f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">f1_score</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_train_pred</span><span class="p">,</span> <span class="n">average</span><span class="o">=</span><span class="sh">'</span><span class="s">weighted</span><span class="sh">'</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">   Test:  {:.3f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">f1_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_test_pred</span><span class="p">,</span> <span class="n">average</span><span class="o">=</span><span class="sh">'</span><span class="s">weighted</span><span class="sh">'</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Classification Report</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">classification_report</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_train_pred</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">classification_report</span><span class="p">(</span><span class="n">y_test</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_test_pred</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Accurancy:
   Train: 93.68%
   Test:  92.78%

F1-score
   Train: 93.670%
   Test:  92.916%

Classification Report
              precision    recall  f1-score   support

           0       0.70      0.66      0.68       278
           1       0.97      0.98      0.98       407
           2       0.89      0.96      0.92       301
           3       0.99      0.94      0.97       642
           4       0.81      0.99      0.89       228
           5       0.99      0.98      0.98       484
           6       0.91      0.86      0.89       686
           7       0.99      0.97      0.98       231
           8       0.91      0.98      0.95       546
           9       0.98      0.91      0.95       247
          10       0.99      0.98      0.99       518
          11       0.99      0.97      0.98       417

    accuracy                           0.94      4985
   macro avg       0.93      0.93      0.93      4985
weighted avg       0.94      0.94      0.94      4985

              precision    recall  f1-score   support

           0       0.61      0.74      0.67        31
           1       0.93      0.93      0.93        45
           2       0.82      0.97      0.89        34
           3       0.99      0.94      0.96        71
           4       0.89      1.00      0.94        25
           5       1.00      0.98      0.99        54
           6       0.92      0.80      0.86        76
           7       1.00      1.00      1.00        26
           8       0.94      0.95      0.94        61
           9       1.00      0.89      0.94        27
          10       0.98      0.98      0.98        58
          11       0.98      0.98      0.98        46

    accuracy                           0.93       554
   macro avg       0.92      0.93      0.92       554
weighted avg       0.93      0.93      0.93       554
</code></pre></div></div>

<p>In addition to the confusion matrix per species, we can show how well our basic model performs per species and per growth stage.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># isolate train and test indexes as dataframe
</span><span class="n">df_X_train</span><span class="p">,</span> <span class="n">df_X_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">,</span>
                                                    <span class="n">test_size</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                                                    <span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">,</span>
                                                    <span class="n">stratify</span><span class="o">=</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># add predictions to dataframe
</span><span class="n">df_X_train</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span><span class="sh">'</span><span class="s">prediction</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">[</span><span class="n">y_train_pred</span><span class="p">]</span>
<span class="n">df_X_test</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span><span class="sh">'</span><span class="s">prediction</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">[</span><span class="n">y_test_pred</span><span class="p">]</span>

<span class="c1"># define if prediction is correct
</span><span class="n">df_X_train</span><span class="p">[</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_X_train</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">df_X_train</span><span class="p">[</span><span class="sh">'</span><span class="s">prediction</span><span class="sh">'</span><span class="p">]</span>
<span class="n">df_X_test</span><span class="p">[</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_X_test</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">df_X_test</span><span class="p">[</span><span class="sh">'</span><span class="s">prediction</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># group predictions by growth-phase and species
</span><span class="n">df_X_train</span> <span class="o">=</span> <span class="n">df_X_train</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])[</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">df_X_train</span> <span class="o">=</span> <span class="n">df_X_train</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">pivot</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="sh">"</span><span class="s">species</span><span class="sh">"</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">)</span>

<span class="n">df_X_test</span> <span class="o">=</span> <span class="n">df_X_test</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])[</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">df_X_test</span> <span class="o">=</span> <span class="n">df_X_test</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">pivot</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="sh">"</span><span class="s">species</span><span class="sh">"</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Training set:</span><span class="sh">"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">df_X_train</span><span class="p">.</span><span class="nf">reindex</span><span class="p">(</span><span class="n">CLUSTER_ORDER</span><span class="p">),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdYlGn</span><span class="sh">'</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">annot_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">fontsize</span><span class="sh">"</span><span class="p">:</span><span class="mi">12</span><span class="p">})</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">setp</span><span class="p">(</span><span class="n">ax</span><span class="p">.</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">,</span><span class="n">rotation_mode</span><span class="o">=</span><span class="sh">"</span><span class="s">anchor</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training set:
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_98_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Test set:</span><span class="sh">"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">df_X_test</span><span class="p">.</span><span class="nf">reindex</span><span class="p">(</span><span class="n">CLUSTER_ORDER</span><span class="p">),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdYlGn</span><span class="sh">'</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">annot_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">fontsize</span><span class="sh">"</span><span class="p">:</span><span class="mi">12</span><span class="p">})</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">setp</span><span class="p">(</span><span class="n">ax</span><span class="p">.</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">,</span><span class="n">rotation_mode</span><span class="o">=</span><span class="sh">"</span><span class="s">anchor</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Test set:
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_99_1.png" />
</figure>

<p><strong>Observations</strong><br />
From the above confusion matrices and classification reports, we notice that our model performs well across all classes but two (Black-grass and Loose Silky-bent).</p>

<p>Indeed, the accuracy on these two classes are only <strong>0.74</strong> for the Black-grass and <strong>0.80</strong> for the Loose Silky-bent) on the validation set. We can also notice that these accuracies for the two class because the model mostly misclassifies Black-grass for Loose Silky-bent and vice-versa.</p>

<p>In addition, our model tends to do better on fully grown plants. Indeed, the high-resolution images (cluster 4) are almost all perfectly classified (except for the Loose Silky-Bent and the Shepeherd Purse).</p>

<p>Let’s plot some of these errors against true specimens and assess if there is an apparent reason for the misclassifications.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create a mapping between labels and classes
</span><span class="n">id_class_mapping</span> <span class="o">=</span> <span class="p">{</span><span class="n">idx</span><span class="p">:</span> <span class="n">label</span> <span class="k">for</span>  <span class="n">idx</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">)}</span>
<span class="n">class_id_mapping</span> <span class="o">=</span> <span class="p">{</span><span class="n">label</span><span class="p">:</span> <span class="n">idx</span> <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">id_class_mapping</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># true Black-grass predicted as Loose Silky-bent
</span><span class="n">false_loose_silky</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span>
    <span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">class_id_mapping</span><span class="p">[</span><span class="sh">'</span><span class="s">Black-grass</span><span class="sh">'</span><span class="p">])</span> <span class="o">&amp;</span>
    <span class="p">(</span><span class="n">y_train_pred</span> <span class="o">==</span> <span class="n">class_id_mapping</span><span class="p">[</span><span class="sh">'</span><span class="s">Loose Silky-bent</span><span class="sh">'</span><span class="p">])]</span>

<span class="c1"># true Loose Silky-bent predicted as Black-grass
</span><span class="n">false_black_grass</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span>
    <span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">class_id_mapping</span><span class="p">[</span><span class="sh">'</span><span class="s">Loose Silky-bent</span><span class="sh">'</span><span class="p">])</span> <span class="o">&amp;</span>
    <span class="p">(</span><span class="n">y_train_pred</span> <span class="o">==</span> <span class="n">class_id_mapping</span><span class="p">[</span><span class="sh">'</span><span class="s">Black-grass</span><span class="sh">'</span><span class="p">])]</span>

<span class="c1"># true Loose Silky-bent correctly predicted
</span><span class="n">true_loose_silky</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">y_train_pred</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span>
    <span class="n">y_train_pred</span> <span class="o">==</span> <span class="n">class_id_mapping</span><span class="p">[</span><span class="sh">'</span><span class="s">Loose Silky-bent</span><span class="sh">'</span><span class="p">])]</span>

<span class="c1"># true Black-grass correctly predicted
</span><span class="n">true_black_grass</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">y_train_pred</span><span class="p">)</span>
                           <span class="o">&amp;</span> <span class="p">(</span><span class="n">y_train_pred</span> <span class="o">==</span> <span class="n">class_id_mapping</span><span class="p">[</span><span class="sh">'</span><span class="s">Black-grass</span><span class="sh">'</span><span class="p">])]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create plot
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span> <span class="n">gridspec_kw</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">wspace</span><span class="sh">'</span><span class="p">:</span><span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">hspace</span><span class="sh">'</span><span class="p">:</span><span class="mi">0</span><span class="p">})</span>
<span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">grey</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">white</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">R</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">C</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">):</span>

        <span class="c1"># select set
</span>        <span class="k">if</span> <span class="n">R</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">C</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">preds</span> <span class="o">=</span> <span class="n">true_black_grass</span>
        <span class="k">elif</span> <span class="n">R</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">C</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
            <span class="n">preds</span> <span class="o">=</span> <span class="n">false_loose_silky</span>
        <span class="k">elif</span> <span class="n">R</span> <span class="o">==</span> <span class="mi">1</span> <span class="ow">and</span> <span class="n">C</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
            <span class="n">preds</span> <span class="o">=</span> <span class="n">false_black_grass</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">preds</span> <span class="o">=</span> <span class="n">true_loose_silky</span>

        <span class="c1"># randomly select images
</span>        <span class="n">idxs</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">preds</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">5</span> <span class="o">*</span> <span class="mi">5</span><span class="p">)</span>

        <span class="c1"># true Black grass
</span>        <span class="n">images</span> <span class="o">=</span> <span class="p">(</span><span class="n">preds</span><span class="p">[</span><span class="n">idxs</span><span class="p">,</span> <span class="p">...]</span> <span class="o">*</span> <span class="mf">255.</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span> <span class="o">+</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">R</span><span class="p">,</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">R</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span> <span class="o">+</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">C</span><span class="p">,</span> <span class="mi">5</span> <span class="o">+</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">C</span><span class="p">):</span>
                <span class="n">image</span> <span class="o">=</span> <span class="n">images</span><span class="p">[(</span><span class="n">row</span> <span class="o">-</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">R</span><span class="p">)</span> <span class="o">*</span> <span class="mi">5</span> <span class="o">+</span> <span class="p">(</span><span class="n">col</span> <span class="o">-</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">C</span><span class="p">)]</span>
                <span class="c1">#image = np.array(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
</span>
                <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">)</span>
                <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
                <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">set_xticklabels</span><span class="p">([])</span>
                <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">set_yticklabels</span><span class="p">([])</span>
                <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">set_aspect</span><span class="p">(</span><span class="sh">'</span><span class="s">equal</span><span class="sh">'</span><span class="p">)</span>
                
                <span class="k">if</span> <span class="n">row</span> <span class="o">&lt;</span> <span class="mi">5</span> <span class="ow">and</span> <span class="n">col</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">:</span>
                    <span class="n">title</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Pred. BG</span><span class="sh">"</span>
                    <span class="n">ct</span> <span class="o">=</span> <span class="sh">'</span><span class="s">g</span><span class="sh">'</span>
                    <span class="n">label</span> <span class="o">=</span> <span class="sh">"</span><span class="s">True BG</span><span class="sh">"</span>
                    <span class="n">cl</span> <span class="o">=</span> <span class="sh">'</span><span class="s">g</span><span class="sh">'</span>
                <span class="k">elif</span> <span class="n">row</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="n">col</span> <span class="o">&gt;=</span> <span class="mi">5</span><span class="p">:</span>
                    <span class="n">title</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Pred. LSB</span><span class="sh">"</span>
                    <span class="n">ct</span> <span class="o">=</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span>
                    <span class="n">label</span> <span class="o">=</span> <span class="sh">""</span>
                    <span class="n">cl</span> <span class="o">=</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span>
                <span class="k">elif</span> <span class="n">row</span> <span class="o">&gt;=</span><span class="mi">5</span> <span class="ow">and</span> <span class="n">col</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">title</span> <span class="o">=</span> <span class="sh">""</span>
                    <span class="n">label</span> <span class="o">=</span> <span class="sh">"</span><span class="s">True LSB</span><span class="sh">"</span>
                    <span class="n">ct</span> <span class="o">=</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span>
                    <span class="n">cl</span> <span class="o">=</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span>
                <span class="k">else</span><span class="p">:</span>
                    <span class="n">title</span> <span class="o">=</span> <span class="sh">""</span>
                    <span class="n">label</span> <span class="o">=</span> <span class="sh">""</span>
                    <span class="n">ct</span><span class="p">,</span> <span class="n">cl</span> <span class="o">=</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span>

                <span class="k">if</span> <span class="n">row</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">ct</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">15</span><span class="p">)</span>
                <span class="k">if</span> <span class="n">col</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
                    <span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">,</span> <span class="n">col</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="n">label</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="n">cl</span><span class="p">,</span> <span class="n">fontsize</span> <span class="o">=</span> <span class="mi">15</span><span class="p">)</span>

<span class="n">fig</span><span class="p">.</span><span class="nf">subplots_adjust</span><span class="p">(</span><span class="n">hspace</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_103_0.png" />
</figure>

<p><strong>Observations</strong><br />
The above plot shows several examples of Black-grass and Loose silky-bent specimens both correctly and incorrectly classified. The main conclusion to draw from these observations is the that the model struggles to classify these two species because they are almost identical. Both of them can be described as thin and long green leaves similar to ordinary grass.</p>

<p>Before trying to adjust our model, we need to better understand our model and open the “black-box”. There are several model interpreters currently available. One of the popular one is LIME (Local Interpretable Model-Agnostic Explanations)</p>

<h3 id="model-inspection">Model Inspection</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>

<span class="n">m</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>

        <span class="c1"># isolate species
</span>        <span class="n">spec</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">n_classes</span><span class="p">)[</span><span class="n">m</span><span class="o">//</span><span class="mi">2</span><span class="p">]</span>
        
        <span class="c1"># find examples of the species
</span>        <span class="n">idxes</span> <span class="o">=</span> <span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">spec</span>
        
        <span class="c1"># isolate image
</span>        <span class="n">filtered_images</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">idxes</span><span class="p">,...]</span>
        
        <span class="c1"># random image
</span>        <span class="n">image</span> <span class="o">=</span> <span class="n">filtered_images</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="n">filtered_images</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">],...]</span>

        <span class="c1"># make prediction
</span>        <span class="n">test_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">,...],</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">).</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        
        <span class="c1"># generate explanations
</span>        <span class="n">explainer</span> <span class="o">=</span> <span class="n">lime_image</span><span class="p">.</span><span class="nc">LimeImageExplainer</span><span class="p">(</span><span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">explanation</span> <span class="o">=</span> <span class="n">explainer</span><span class="p">.</span><span class="nf">explain_instance</span><span class="p">(</span>
            <span class="n">image</span><span class="p">,</span>
            <span class="n">model</span><span class="p">.</span><span class="n">predict_proba</span><span class="p">,</span>  <span class="c1"># classification function
</span>            <span class="n">top_labels</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
            <span class="n">hide_color</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
            <span class="n">num_samples</span><span class="o">=</span><span class="mi">286</span><span class="p">)</span>
        <span class="n">temp</span><span class="p">,</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">explanation</span><span class="p">.</span><span class="nf">get_image_and_mask</span><span class="p">(</span><span class="n">explanation</span><span class="p">.</span><span class="n">top_labels</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                                                    <span class="n">positive_only</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                                                    <span class="n">num_features</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
                                                    <span class="n">hide_rest</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">img_boundry1</span> <span class="o">=</span> <span class="nf">mark_boundaries</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="n">mask</span><span class="p">)</span>
                
        <span class="c1"># convert label to species name
</span>        <span class="n">predicted_species</span> <span class="o">=</span> <span class="n">id_class_mapping</span><span class="p">[</span><span class="n">test_pred</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
        
        <span class="c1"># plot results
</span>        <span class="n">axes</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">img_boundry1</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">true </span><span class="sh">"</span> <span class="o">+</span> <span class="n">id_class_mapping</span><span class="p">[</span><span class="n">spec</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s"> predicted: </span><span class="sh">"</span> <span class="o">+</span>
                           <span class="n">predicted_species</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>

        <span class="n">m</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_106_1.png" />
</figure>

<p><strong>Observations</strong></p>

<p>Although our model performs relatively well, we can see that in several cases shown above, the model uses the surrounding elements (pebbles, measuring label, and tags). The above plot shows areas leading to a positive predictions while red ones stands for negative impact on the predictions. We can see that the plant is often only partially used.</p>

<p>In conclusion, our model could be improved by removing extra components from the images.</p>

<h2 id="model-improvement">Model Improvement</h2>

<p>We have identified flaws in the predictions of our first model:</p>

<ol>
  <li>Uses external components to make predictions.</li>
  <li>Struggles to make the difference between <code class="language-plaintext highlighter-rouge">Black-grass</code> and <code class="language-plaintext highlighter-rouge">Loose Silky-bent</code></li>
</ol>

<p>One of the main observations we can make is related to the photographs we have and the type of predictions. We could try to eliminate the surrounding components by focusing on the green channel of the image. Indeed, no element besides the seedling is green.</p>

<p>There are many different ways to represent images. The most common ones are <strong>RGB</strong>, <strong>HSV</strong>, and <strong>CIELAB</strong>. They are defined as follows.</p>

<h3 id="image-decomposition">Image Decomposition</h3>

<p><strong>RGB</strong></p>

<p>Each image is encoded using three channels, this encoding is typically called RGB (Red, Blue, Green) corresponding to the magnitude of the color in each channel (from 0 to 255 as an 8 bit number). We can see if extracting specific channel can helps the seedling to stand out.</p>
<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/rgb.jpg" style="height:250px;" />
</figure>

<p><strong>HSV (hue, saturation, value)</strong></p>

<p>HSV is an alternative representation. The colors are encoded using 3 parameters:</p>

<ol>
  <li>Hue as an angle value 0° for red, 120° for green and 240° for blue.</li>
  <li>Saturation is the intensity of the color as a number from 0 to 1 where 0 corresponds to the grayscale.</li>
  <li>Value corresponds to the base grayscale value from 0 to 1 where 0 is black and 1 is white.</li>
</ol>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/hsv.jpg" style="height:250px;" />
</figure>

<p><strong>CIELAB</strong></p>

<p>It expresses color as three values:</p>

<ol>
  <li>L* for the lightness from black (0) to white (100)</li>
  <li>a* from green (−) to red (+)</li>
  <li>b* from blue (−) to yellow (+)</li>
</ol>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/cielab.jpg" style="height:250px;" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create plot
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>

<span class="n">titles</span> <span class="o">=</span> <span class="p">[</span> 
    <span class="sh">'</span><span class="s">Red</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Green</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Blue</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">Hue</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Saturation</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Value</span><span class="sh">'</span><span class="p">,</span>
    <span class="sh">'</span><span class="s">Lightness</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">A: green-red</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">B: blue-yellow</span><span class="sh">'</span>
<span class="p">]</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">plant</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()):</span>

    <span class="c1"># isolate first cycle cutoff
</span>    <span class="n">cutoff_num</span> <span class="o">=</span> <span class="n">cutoff_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">cutoff_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span>
                               <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">drop</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

    <span class="c1"># isolate file numbers less that cutoff_num
</span>    <span class="n">all_file_nums</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span>
        <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">cutoff_num</span><span class="p">)].</span><span class="nf">sort_values</span><span class="p">(</span>
            <span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">]</span>

    <span class="c1"># select images at 50% of cycle
</span>    <span class="n">selected_file_num</span> <span class="o">=</span> <span class="n">all_file_nums</span><span class="p">.</span><span class="nf">quantile</span><span class="p">([</span><span class="mf">0.5</span><span class="p">]).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">).</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">image_rgb</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">plant</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="s">.png</span><span class="sh">'</span><span class="p">,</span> <span class="n">as_gray</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">pilmode</span><span class="o">=</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">image_hsv</span> <span class="o">=</span> <span class="n">matplotlib</span><span class="p">.</span><span class="n">colors</span><span class="p">.</span><span class="nf">rgb_to_hsv</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">)</span>
    <span class="n">image_lab</span> <span class="o">=</span> <span class="n">color</span><span class="p">.</span><span class="nf">rgb2lab</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">)</span>
    
    <span class="n">images</span> <span class="o">=</span> <span class="p">[</span><span class="n">image_rgb</span><span class="p">,</span> <span class="n">image_hsv</span><span class="p">,</span> <span class="n">image_lab</span><span class="p">]</span>
    
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">k</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
                <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">k</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">)</span>
                <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">k</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>

        <span class="k">else</span><span class="p">:</span>
            <span class="n">image</span> <span class="o">=</span> <span class="n">images</span><span class="p">[(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">//</span><span class="mi">3</span><span class="p">]</span>
            <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">k</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">image</span><span class="p">[:,:,(</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">3</span><span class="p">],</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">"</span><span class="s">RdBu</span><span class="sh">"</span><span class="p">)</span>
            <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">k</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
            <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="n">k</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">titles</span><span class="p">[</span><span class="n">k</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_111_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">selected_image</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">4535</span><span class="p">][</span><span class="sh">'</span><span class="s">full_path</span><span class="sh">'</span><span class="p">]</span>
<span class="n">name</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">4535</span><span class="p">][</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">4535</span><span class="p">][</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
<span class="n">name</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'Small-flowered Cranesbill/135'
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rgb</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">selected_image</span><span class="p">,</span> <span class="n">as_gray</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">pilmode</span><span class="o">=</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>
<span class="n">hsv</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">rgb</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_RGB2HSV</span><span class="p">)</span>
<span class="n">lab</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">rgb</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_RGB2LAB</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r</span><span class="p">,</span> <span class="n">g</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">rgb</span><span class="p">)</span>
<span class="n">h</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">hsv</span><span class="p">)</span>
<span class="n">l</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">lab</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">13</span><span class="p">))</span>

<span class="n">pixel_colors</span> <span class="o">=</span> <span class="n">rgb</span><span class="p">.</span><span class="nf">reshape</span><span class="p">((</span><span class="n">np</span><span class="p">.</span><span class="nf">shape</span><span class="p">(</span><span class="n">rgb</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nf">shape</span><span class="p">(</span><span class="n">rgb</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">3</span><span class="p">))</span>
<span class="n">norm</span> <span class="o">=</span> <span class="n">colors</span><span class="p">.</span><span class="nc">Normalize</span><span class="p">(</span><span class="n">vmin</span><span class="o">=-</span><span class="mf">1.</span><span class="p">,</span><span class="n">vmax</span><span class="o">=</span><span class="mf">1.</span><span class="p">)</span>
<span class="n">norm</span><span class="p">.</span><span class="nf">autoscale</span><span class="p">(</span><span class="n">pixel_colors</span><span class="p">)</span>
<span class="n">pixel_colors</span> <span class="o">=</span> <span class="nf">norm</span><span class="p">(</span><span class="n">pixel_colors</span><span class="p">).</span><span class="nf">tolist</span><span class="p">()</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">rgb</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">g</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">facecolors</span><span class="o">=</span><span class="n">pixel_colors</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Red</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Green</span><span class="sh">"</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">b</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">facecolors</span><span class="o">=</span><span class="n">pixel_colors</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Red</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Blue</span><span class="sh">"</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">g</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">b</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">facecolors</span><span class="o">=</span><span class="n">pixel_colors</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Green</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Blue</span><span class="sh">"</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_115_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">13</span><span class="p">))</span>

<span class="n">pixel_colors</span> <span class="o">=</span> <span class="n">rgb</span><span class="p">.</span><span class="nf">reshape</span><span class="p">((</span><span class="n">np</span><span class="p">.</span><span class="nf">shape</span><span class="p">(</span><span class="n">rgb</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nf">shape</span><span class="p">(</span><span class="n">rgb</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">3</span><span class="p">))</span>
<span class="n">norm</span> <span class="o">=</span> <span class="n">colors</span><span class="p">.</span><span class="nc">Normalize</span><span class="p">(</span><span class="n">vmin</span><span class="o">=-</span><span class="mf">1.</span><span class="p">,</span><span class="n">vmax</span><span class="o">=</span><span class="mf">1.</span><span class="p">)</span>
<span class="n">norm</span><span class="p">.</span><span class="nf">autoscale</span><span class="p">(</span><span class="n">pixel_colors</span><span class="p">)</span>
<span class="n">pixel_colors</span> <span class="o">=</span> <span class="nf">norm</span><span class="p">(</span><span class="n">pixel_colors</span><span class="p">).</span><span class="nf">tolist</span><span class="p">()</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">rgb</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">s</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">facecolors</span><span class="o">=</span><span class="n">pixel_colors</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Hue</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Saturation</span><span class="sh">"</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">h</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">facecolors</span><span class="o">=</span><span class="n">pixel_colors</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Hue</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Value</span><span class="sh">"</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">s</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">v</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">facecolors</span><span class="o">=</span><span class="n">pixel_colors</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Saturation</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Value</span><span class="sh">"</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_116_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">13</span><span class="p">,</span><span class="mi">13</span><span class="p">))</span>

<span class="n">pixel_colors</span> <span class="o">=</span> <span class="n">rgb</span><span class="p">.</span><span class="nf">reshape</span><span class="p">((</span><span class="n">np</span><span class="p">.</span><span class="nf">shape</span><span class="p">(</span><span class="n">rgb</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">np</span><span class="p">.</span><span class="nf">shape</span><span class="p">(</span><span class="n">rgb</span><span class="p">)[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">3</span><span class="p">))</span>
<span class="n">norm</span> <span class="o">=</span> <span class="n">colors</span><span class="p">.</span><span class="nc">Normalize</span><span class="p">(</span><span class="n">vmin</span><span class="o">=-</span><span class="mf">1.</span><span class="p">,</span><span class="n">vmax</span><span class="o">=</span><span class="mf">1.</span><span class="p">)</span>
<span class="n">norm</span><span class="p">.</span><span class="nf">autoscale</span><span class="p">(</span><span class="n">pixel_colors</span><span class="p">)</span>
<span class="n">pixel_colors</span> <span class="o">=</span> <span class="nf">norm</span><span class="p">(</span><span class="n">pixel_colors</span><span class="p">).</span><span class="nf">tolist</span><span class="p">()</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">rgb</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">l</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">a</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">facecolors</span><span class="o">=</span><span class="n">pixel_colors</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Lightness</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">A: Green -&gt; Red</span><span class="sh">"</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">l</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">b</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">facecolors</span><span class="o">=</span><span class="n">pixel_colors</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Lightness</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">B: Yellow -&gt; Blue</span><span class="sh">"</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">b</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">facecolors</span><span class="o">=</span><span class="n">pixel_colors</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">A: Green -&gt; Red</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">B: Yellow -&gt; Blue</span><span class="sh">"</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_117_0.png" />
</figure>

<p><strong>Observations</strong></p>

<p>From the above image decomposition plots, the <code class="language-plaintext highlighter-rouge">Hue</code> value of the HSV decomposition seems to be a good index to help decompose the seedling from the background. We can now implement a process to automatically remove background from images.</p>

<p>In order to properly remove the background, we can start by plotting the histogram of the Hue-level for sampled images. The plot below shows 5 samples of each species at different steps of the growth cycle with the histogram of the pixel hue.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create plot
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">45</span><span class="p">))</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">plant</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()):</span>

    <span class="c1"># isolate first cycle cutoff
</span>    <span class="n">cutoff_num</span> <span class="o">=</span> <span class="n">cutoff_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">cutoff_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span>
                               <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">drop</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

    <span class="c1"># isolate file numbers less that cutoff_num
</span>    <span class="n">all_file_nums</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span>
        <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">cutoff_num</span><span class="p">)].</span><span class="nf">sort_values</span><span class="p">(</span>
            <span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">full_path</span><span class="sh">'</span><span class="p">]</span>

    <span class="c1"># select images at specific quantiles of cycle
</span>    <span class="n">indexes</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">quantile</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">all_file_nums</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span> <span class="n">interpolation</span><span class="o">=</span><span class="sh">"</span><span class="s">lower</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">selected_file_paths</span> <span class="o">=</span> <span class="n">all_file_nums</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">indexes</span><span class="p">]</span>

    <span class="c1"># plot images
</span>    <span class="k">for</span> <span class="n">m</span><span class="p">,</span> <span class="n">file_path</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">selected_file_paths</span><span class="p">):</span>
        <span class="n">image_rgb</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span><span class="n">as_gray</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">pilmode</span><span class="o">=</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># plot image, hide grid, set title
</span>        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="n">m</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="n">m</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="n">m</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">plant</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">))</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span> <span class="n">m</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="c1"># convert image to hue
</span>        <span class="n">image_hsv</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_RGB2HSV</span><span class="p">)</span>
        <span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">image_hsv</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">0</span><span class="p">].</span><span class="nf">flatten</span><span class="p">(),</span>
                 <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">m</span><span class="p">],</span>
                 <span class="n">kde</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">#4CB391</span><span class="sh">"</span><span class="p">,</span> <span class="n">hist_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">alpha</span><span class="sh">'</span><span class="p">:</span><span class="mi">1</span><span class="p">},</span> <span class="n">norm_hist</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_120_1.png" />
</figure>

<p><strong>Observations</strong></p>

<p>From the above plots, it appears that the hue values of the pixels cluster into two groups. From there, we could consider two approaches:</p>

<ol>
  <li>Simple: define a threshold value of around 70 to manually divide the pixels into two cluster and eliminate the potion of the image where the hue of the pixels is larger than the threshold.</li>
  <li>Complex but more suited to the various pixel distributions: <strong>for each image, cluster the hue of the pixels using a clustering algorithm and define the threshold as the boundary between the two clusters</strong>.</li>
</ol>

<p>Since we want to reach the best accuracy possible, we will implement the <strong>clustering option</strong>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">cluster_pixels_lab</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">,</span> <span class="n">return_labels</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">n_clusters</span><span class="o">=</span><span class="mi">3</span><span class="p">):</span>
    
    <span class="c1"># convert image to hsv
</span>    <span class="n">image_hsv</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_RGB2HSV</span><span class="p">)</span>
    
    <span class="c1"># extract pixcels of Hue
</span>    <span class="n">pixels</span> <span class="o">=</span> <span class="n">image_hsv</span><span class="p">[:,:,</span><span class="mi">0</span><span class="p">].</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
    
    <span class="c1"># create and fit KMeans
</span>    <span class="n">kmeans</span> <span class="o">=</span> <span class="nc">KMeans</span><span class="p">(</span><span class="n">n_clusters</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">n_init</span><span class="o">=</span><span class="mi">10</span><span class="p">).</span><span class="nf">fit</span><span class="p">(</span><span class="n">pixels</span><span class="p">)</span>
    
    <span class="c1"># compute centers
</span>    <span class="n">sorted_centers</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sort</span><span class="p">(</span><span class="n">kmeans</span><span class="p">.</span><span class="n">cluster_centers_</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="c1"># corresponding clusters
</span>    <span class="n">sorted_clusters</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argsort</span><span class="p">(</span><span class="n">kmeans</span><span class="p">.</span><span class="n">cluster_centers_</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">image_hsv</span><span class="p">,</span> <span class="n">sorted_centers</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">sorted_clusters</span><span class="p">.</span><span class="nf">flatten</span><span class="p">(),</span> <span class="n">kmeans</span><span class="p">.</span><span class="n">labels_</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">45</span><span class="p">))</span>
<span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">royalblue</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">gold</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">silver</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">lightgreen</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">mediumpurple</span><span class="sh">"</span><span class="p">]</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">plant</span> <span class="ow">in</span> <span class="nf">tqdm_notebook</span><span class="p">(</span><span class="nf">enumerate</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">())):</span>

    <span class="c1"># isolate first cycle cutoff
</span>    <span class="n">cutoff_num</span> <span class="o">=</span> <span class="n">cutoff_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">cutoff_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span>
                               <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">drop</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

    <span class="c1"># isolate file numbers less that cutoff_num
</span>    <span class="n">all_file_nums</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span>
        <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">cutoff_num</span><span class="p">)].</span><span class="nf">sort_values</span><span class="p">(</span>
            <span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">full_path</span><span class="sh">'</span><span class="p">]</span>

    <span class="c1"># select images at specific quantiles of cycle
</span>    <span class="n">indexes</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">quantile</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">all_file_nums</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
                          <span class="mf">1.0</span><span class="p">,</span>
                          <span class="n">interpolation</span><span class="o">=</span><span class="sh">"</span><span class="s">lower</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">file_path</span> <span class="o">=</span> <span class="n">all_file_nums</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">indexes</span><span class="p">]</span>

    <span class="c1"># read image
</span>    <span class="n">image_rgb</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span> <span class="n">as_gray</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">pilmode</span><span class="o">=</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="c1"># plot image, hide grid, set title
</span>    <span class="n">image_hsv</span><span class="p">,</span> <span class="n">sorted_centers</span><span class="p">,</span> <span class="n">sorted_clusters</span><span class="p">,</span> <span class="n">labels</span> <span class="o">=</span> <span class="nf">cluster_pixels_lab</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">)</span>
    
    <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">)</span>
    <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">plant</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">file_num</span><span class="p">))</span>
    <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">n</span><span class="p">,</span> <span class="n">bins</span><span class="p">,</span> <span class="n">patches</span> <span class="o">=</span> <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="nf">hist</span><span class="p">(</span><span class="n">image_hsv</span><span class="p">[:,</span> <span class="p">:,</span> <span class="mi">0</span><span class="p">].</span><span class="nf">flatten</span><span class="p">(),</span>
                                         <span class="n">bins</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
                                         <span class="n">alpha</span><span class="o">=</span><span class="mf">0.0</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">sorted_clusters</span><span class="p">):</span>
        <span class="n">color</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">uint8</span><span class="p">([[[</span><span class="n">sorted_centers</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="mi">255</span><span class="p">,</span><span class="mi">175</span><span class="p">]]])</span> <span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_HSV2RGB</span><span class="p">)</span><span class="o">/</span><span class="mf">255.</span>
        <span class="n">color</span> <span class="o">=</span> <span class="nf">tuple</span><span class="p">(</span><span class="n">color</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">].</span><span class="nf">tolist</span><span class="p">())</span>
        
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="nf">hist</span><span class="p">(</span><span class="n">image_hsv</span><span class="p">[:,:,</span><span class="mi">0</span><span class="p">].</span><span class="nf">flatten</span><span class="p">()[</span><span class="n">labels</span><span class="o">==</span><span class="n">k</span><span class="p">],</span>
                          <span class="n">bins</span><span class="o">=</span><span class="n">bins</span><span class="p">,</span>
                          <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">,</span>
                          <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Cluster </span><span class="sh">"</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">k</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="s">, </span><span class="sh">'</span> <span class="o">+</span> <span class="sh">"</span><span class="s">{:.2f}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">sorted_centers</span><span class="p">[</span><span class="n">i</span><span class="p">]),</span>
                          <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
    
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="nf">axvline</span><span class="p">(</span><span class="n">sorted_centers</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="n">color</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">"</span><span class="s">--</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">upper right</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">();</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HBox(children=(IntProgress(value=1, bar_style='info', max=1), HTML(value='')))
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_123_2.png" />
</figure>

<p><strong>Observations</strong></p>

<p>From above results depicting the pixel clustering, our approach is very promising.</p>

<p>In most cases, the green color is assigned a cluster. However, for cases where the seedling consists of grass-type leaves, a cluster cannot be assigned. However, we can use the information from the clustering of the other species to come up with a threshold.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># threshold to apply on A value
</span><span class="n">sensitivity</span> <span class="o">=</span> <span class="mi">25</span>
<span class="n">colormin</span><span class="o">=</span><span class="p">(</span><span class="mi">50</span><span class="o">-</span><span class="n">sensitivity</span><span class="p">,</span><span class="mi">40</span><span class="p">,</span><span class="mi">50</span><span class="p">)</span>
<span class="n">colormax</span><span class="o">=</span><span class="p">(</span><span class="mi">50</span><span class="o">+</span><span class="n">sensitivity</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">200</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">segment_plant</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">):</span>

    <span class="c1"># apply blur
</span>    <span class="n">blurr</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nc">GaussianBlur</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>

    <span class="c1"># convert to HSV
</span>    <span class="n">image_hsv</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">blurr</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">COLOR_RGB2HSV</span><span class="p">)</span>

    <span class="c1"># apply filters
</span>    <span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">inRange</span><span class="p">(</span><span class="n">image_hsv</span><span class="p">,</span> <span class="n">colormin</span><span class="p">,</span> <span class="n">colormax</span><span class="p">)</span>

    <span class="n">struc</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">getStructuringElement</span><span class="p">(</span><span class="n">cv2</span><span class="p">.</span><span class="n">MORPH_ELLIPSE</span><span class="p">,</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span> <span class="mi">11</span><span class="p">))</span>
    <span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">morphologyEx</span><span class="p">(</span><span class="n">mask</span><span class="p">,</span> <span class="n">cv2</span><span class="p">.</span><span class="n">MORPH_CLOSE</span><span class="p">,</span> <span class="n">struc</span><span class="p">)</span>

    <span class="c1"># returned filtered image
</span>    <span class="n">result</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">bitwise_and</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">,</span> <span class="n">image_rgb</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">,</span> <span class="n">mask</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scale_1</span> <span class="o">=</span> <span class="mi">224</span>
<span class="n">scale_2</span> <span class="o">=</span> <span class="mi">70</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">24</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">50</span><span class="p">))</span>
<span class="n">growth_cycles</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Start</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Full</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">plant</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()):</span>

    <span class="c1"># isolate first cycle cutoff
</span>    <span class="n">cutoff_num</span> <span class="o">=</span> <span class="n">cutoff_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">cutoff_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span>
                               <span class="n">plant</span><span class="p">,</span> <span class="sh">'</span><span class="s">drop</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>

    <span class="c1"># isolate file numbers less that cutoff_num
</span>    <span class="n">all_file_nums</span> <span class="o">=</span> <span class="n">resolution_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">plant</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span>
        <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="n">cutoff_num</span><span class="p">)].</span><span class="nf">sort_values</span><span class="p">(</span>
            <span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">file_num</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">full_path</span><span class="sh">'</span><span class="p">]</span>

    <span class="c1"># select images at specific quantiles of cycle
</span>    <span class="n">indexes</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">quantile</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">all_file_nums</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span>
                          <span class="p">[</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">],</span>
                          <span class="n">interpolation</span><span class="o">=</span><span class="sh">"</span><span class="s">lower</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">file_paths</span> <span class="o">=</span> <span class="n">all_file_nums</span><span class="p">.</span><span class="n">values</span><span class="p">[</span><span class="n">indexes</span><span class="p">]</span>

    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">file_path</span> <span class="ow">in</span> <span class="n">file_paths</span><span class="p">:</span>
    
        <span class="n">image_rgb</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">file_path</span><span class="p">,</span>
                                       <span class="n">as_gray</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                                       <span class="n">pilmode</span><span class="o">=</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>

        <span class="n">result</span><span class="p">,</span> <span class="n">mask</span> <span class="o">=</span> <span class="nf">segment_plant</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">)</span>
    
        <span class="n">reshape_1</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="n">result</span><span class="p">,(</span><span class="n">scale_1</span><span class="p">,</span><span class="n">scale_1</span><span class="p">))</span>
        <span class="n">reshape_2</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="n">result</span><span class="p">,(</span><span class="n">scale_2</span><span class="p">,</span><span class="n">scale_2</span><span class="p">))</span>
        
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">mask</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">reshape_1</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">reshape_2</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">plant</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/Growth: </span><span class="sh">'</span> <span class="o">+</span> <span class="n">growth_cycles</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Mask</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">2</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Final, ({0},{1})</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="o">*</span><span class="n">image_rgb</span><span class="p">.</span><span class="n">shape</span><span class="p">),</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">3</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Final, ({0},{1})</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="o">*</span><span class="n">reshape_1</span><span class="p">.</span><span class="n">shape</span><span class="p">),</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="n">idx</span><span class="o">+</span><span class="n">i</span><span class="p">,</span> <span class="mi">4</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Final, ({0},{1})</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="o">*</span><span class="n">reshape_2</span><span class="p">.</span><span class="n">shape</span><span class="p">),</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>

        <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">();</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_128_0.png" />
</figure>

<p><strong>Observations</strong></p>

<p>Our image segmentation is now ready, the results look good with every species.</p>

<h3 id="generate-new-images">Generate New Images</h3>

<p>We are going to segment each image and save it locally by using the same folder structure as the original dataset. Once the images have been segmented, we can feed them back into the model and train the CNN again.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SAVELOCATION</span> <span class="o">=</span> <span class="sh">'</span><span class="s">./DataAugmented_HSV_224/</span><span class="sh">'</span>

<span class="c1"># create folder
</span><span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">SAVELOCATION</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">SAVELOCATION</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">SCALE</span> <span class="o">=</span> <span class="mi">224</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># extract image information
</span><span class="k">for</span> <span class="n">folder</span> <span class="ow">in</span> <span class="nf">tqdm_notebook</span><span class="p">(</span><span class="nf">listdir</span><span class="p">(</span><span class="n">ZIPEXTRACT</span><span class="p">),</span> <span class="n">desc</span><span class="o">=</span><span class="sh">'</span><span class="s">1st loop</span><span class="sh">'</span><span class="p">):</span>

    <span class="c1"># create folder
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">SAVELOCATION</span> <span class="o">+</span> <span class="n">folder</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="n">SAVELOCATION</span> <span class="o">+</span> <span class="n">folder</span><span class="p">)</span>

    <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="nf">tqdm_notebook</span><span class="p">(</span><span class="nf">listdir</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">folder</span><span class="p">),</span> <span class="n">desc</span><span class="o">=</span><span class="sh">'</span><span class="s">2nd loop</span><span class="sh">'</span><span class="p">):</span>

        <span class="c1"># read image
</span>        <span class="n">image_rgb</span> <span class="o">=</span> <span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">ZIPEXTRACT</span> <span class="o">+</span> <span class="n">folder</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="nb">file</span><span class="p">,</span>
                               <span class="n">as_gray</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                               <span class="n">pilmode</span><span class="o">=</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># segment image
</span>        <span class="n">masked_image</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">segment_plant</span><span class="p">(</span><span class="n">image_rgb</span><span class="p">)</span>

        <span class="c1"># resize image
</span>        <span class="n">resized_image</span> <span class="o">=</span> <span class="n">cv2</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="n">masked_image</span><span class="p">,</span> <span class="p">(</span><span class="n">SCALE</span><span class="p">,</span> <span class="n">SCALE</span><span class="p">))</span> 
        
        <span class="c1"># save image
</span>        <span class="n">imageio</span><span class="p">.</span><span class="nf">imwrite</span><span class="p">(</span><span class="n">SAVELOCATION</span> <span class="o">+</span> <span class="n">folder</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="nb">file</span><span class="p">,</span> <span class="n">resized_image</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create full path to data
</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">full_path_seg</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">SAVELOCATION</span> <span class="o">+</span> <span class="n">resolution_df</span><span class="p">[</span>
    <span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">file_name</span><span class="sh">'</span><span class="p">]</span>
<span class="n">resolution_df</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>file_name</th>
      <th>species</th>
      <th>width</th>
      <th>height</th>
      <th>ratio</th>
      <th>file_num</th>
      <th>growth_lvl</th>
      <th>full_path</th>
      <th>full_path_seg</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>348.png</td>
      <td>Cleavers</td>
      <td>450.0</td>
      <td>450.0</td>
      <td>1.0</td>
      <td>348</td>
      <td>1</td>
      <td>../Data/Cleavers/348.png</td>
      <td>./DataAugmented_HSV_224/Cleavers/348.png</td>
    </tr>
    <tr>
      <td>1</td>
      <td>176.png</td>
      <td>Cleavers</td>
      <td>295.0</td>
      <td>295.0</td>
      <td>1.0</td>
      <td>176</td>
      <td>2</td>
      <td>../Data/Cleavers/176.png</td>
      <td>./DataAugmented_HSV_224/Cleavers/176.png</td>
    </tr>
    <tr>
      <td>2</td>
      <td>88.png</td>
      <td>Cleavers</td>
      <td>299.0</td>
      <td>299.0</td>
      <td>1.0</td>
      <td>88</td>
      <td>2</td>
      <td>../Data/Cleavers/88.png</td>
      <td>./DataAugmented_HSV_224/Cleavers/88.png</td>
    </tr>
    <tr>
      <td>3</td>
      <td>162.png</td>
      <td>Cleavers</td>
      <td>194.0</td>
      <td>194.0</td>
      <td>1.0</td>
      <td>162</td>
      <td>3</td>
      <td>../Data/Cleavers/162.png</td>
      <td>./DataAugmented_HSV_224/Cleavers/162.png</td>
    </tr>
    <tr>
      <td>4</td>
      <td>189.png</td>
      <td>Cleavers</td>
      <td>438.0</td>
      <td>438.0</td>
      <td>1.0</td>
      <td>189</td>
      <td>1</td>
      <td>../Data/Cleavers/189.png</td>
      <td>./DataAugmented_HSV_224/Cleavers/189.png</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># batch size
</span><span class="n">batch_size</span> <span class="o">=</span> <span class="mi">32</span>

<span class="c1"># random seed
</span><span class="n">seed</span> <span class="o">=</span> <span class="mi">10</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load images into a numpy array
</span><span class="n">full_set_segm</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">tqdm</span><span class="p">.</span><span class="n">notebook</span><span class="p">.</span><span class="nf">tqdm</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">full_path_seg</span><span class="sh">'</span><span class="p">]):</span>
    <span class="n">full_set_segm</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">imageio</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="n">i</span><span class="p">,</span><span class="n">as_gray</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">pilmode</span><span class="o">=</span><span class="sh">"</span><span class="s">RGB</span><span class="sh">"</span><span class="p">))</span>
<span class="n">full_set_segm</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">asarray</span><span class="p">(</span><span class="n">full_set_segm</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{} images in full set.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">full_set_segm</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HBox(children=(IntProgress(value=0, max=5539), HTML(value='')))



5539 images in full set.
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># encode target
# create encoder and fit on training set
</span><span class="n">labels</span> <span class="o">=</span> <span class="nc">LabelEncoder</span><span class="p">()</span>
<span class="n">labels</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># display target classes
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Classes</span><span class="sh">'</span><span class="o">+</span><span class="nf">str</span><span class="p">(</span><span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">))</span>

<span class="c1"># encode labels
</span><span class="n">encodedlabels</span> <span class="o">=</span> <span class="n">labels</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])</span>
<span class="n">clearalllabels</span> <span class="o">=</span> <span class="n">np_utils</span><span class="p">.</span><span class="nf">to_categorical</span><span class="p">(</span><span class="n">encodedlabels</span><span class="p">)</span>

<span class="c1"># store number of classes for future use
</span><span class="n">n_classes</span> <span class="o">=</span> <span class="n">clearalllabels</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Classes['Black-grass' 'Charlock' 'Cleavers' 'Common Chickweed' 'Common wheat'
 'Fat Hen' 'Loose Silky-bent' 'Maize' 'Scentless Mayweed' 'Shepherd Purse'
 'Small-flowered Cranesbill' 'Sugar beet']
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scale data
</span><span class="n">full_set_segm</span> <span class="o">=</span> <span class="n">full_set_segm</span> <span class="o">/</span> <span class="mf">255.</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># isolate train and test indexes
</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">full_set_segm</span><span class="p">,</span>
                                                    <span class="n">clearalllabels</span><span class="p">,</span>
                                                    <span class="n">test_size</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                                                    <span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">,</span>
                                                    <span class="n">stratify</span><span class="o">=</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># data augmentation
</span><span class="n">generator</span> <span class="o">=</span> <span class="nc">ImageDataGenerator</span><span class="p">(</span><span class="n">rotation_range</span><span class="o">=</span><span class="mi">180</span><span class="p">,</span>
                               <span class="n">width_shift_range</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                               <span class="n">height_shift_range</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                               <span class="n">brightness_range</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                               <span class="n">shear_range</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
                               <span class="n">zoom_range</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                               <span class="n">channel_shift_range</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span>
                               <span class="n">fill_mode</span><span class="o">=</span><span class="sh">'</span><span class="s">nearest</span><span class="sh">'</span><span class="p">,</span>
                               <span class="n">horizontal_flip</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                               <span class="n">vertical_flip</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                               <span class="n">dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">float32</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>

<span class="n">model</span> <span class="o">=</span> <span class="nc">Sequential</span><span class="p">()</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="n">SCALE</span><span class="p">,</span> <span class="n">SCALE</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">64</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">128</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Conv2D</span><span class="p">(</span><span class="n">filters</span><span class="o">=</span><span class="mi">256</span><span class="p">,</span> <span class="n">kernel_size</span><span class="o">=</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">MaxPooling2D</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">3</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.1</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Flatten</span><span class="p">())</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">())</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">BatchNormalization</span><span class="p">())</span>
<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span>

<span class="n">model</span><span class="p">.</span><span class="nf">add</span><span class="p">(</span><span class="nc">Dense</span><span class="p">(</span><span class="n">n_classes</span><span class="p">,</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">softmax</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># optimizer
</span><span class="n">optimizer</span> <span class="o">=</span> <span class="n">optimizers</span><span class="p">.</span><span class="nc">Adam</span><span class="p">(</span><span class="n">lr</span><span class="o">=</span><span class="mf">1e-2</span><span class="p">,</span> <span class="n">beta_1</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">beta_2</span><span class="o">=</span><span class="mf">0.999</span><span class="p">)</span>

<span class="c1"># define loss function
</span><span class="n">model</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="n">optimizer</span><span class="p">,</span>
              <span class="n">loss</span><span class="o">=</span><span class="n">losses</span><span class="p">.</span><span class="n">categorical_crossentropy</span><span class="p">,</span>
              <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># define optimization schedule with callbacks
</span><span class="n">lrate</span> <span class="o">=</span> <span class="nc">ReduceLROnPlateau</span><span class="p">(</span><span class="n">monitor</span><span class="o">=</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">,</span>
                          <span class="n">factor</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span>
                          <span class="n">patience</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span>
                          <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
                          <span class="n">min_lr</span><span class="o">=</span><span class="mf">0.00001</span><span class="p">)</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="sh">"</span><span class="s">./Model_HSV_224</span><span class="sh">"</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">makedirs</span><span class="p">(</span><span class="sh">"</span><span class="s">./Model_HSV_224</span><span class="sh">"</span><span class="p">)</span>

<span class="n">filepath</span> <span class="o">=</span> <span class="sh">"</span><span class="s">./Model_HSV_224/weights.best_{epoch:02d}-{val_acc:.2f}.hdf5</span><span class="sh">"</span>
<span class="n">checkpoints</span> <span class="o">=</span> <span class="nc">ModelCheckpoint</span><span class="p">(</span><span class="n">filepath</span><span class="p">,</span>
                              <span class="n">monitor</span><span class="o">=</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">,</span>
                              <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
                              <span class="n">save_best_only</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                              <span class="n">period</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">callbacks_list</span> <span class="o">=</span> <span class="p">[</span><span class="n">lrate</span><span class="p">,</span> <span class="n">checkpoints</span><span class="p">,</span> <span class="nc">TQDMNotebookCallback</span><span class="p">(</span><span class="n">leave_inner</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">leave_outer</span><span class="o">=</span><span class="bp">True</span><span class="p">)]</span>

<span class="n">model</span><span class="p">.</span><span class="nf">summary</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Model: "sequential_2"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_9 (Conv2D)            (None, 220, 220, 32)      2432      
_________________________________________________________________
batch_normalization_11 (Batc (None, 220, 220, 32)      128       
_________________________________________________________________
conv2d_10 (Conv2D)           (None, 216, 216, 64)      51264     
_________________________________________________________________
max_pooling2d_5 (MaxPooling2 (None, 108, 108, 64)      0         
_________________________________________________________________
batch_normalization_12 (Batc (None, 108, 108, 64)      256       
_________________________________________________________________
dropout_7 (Dropout)          (None, 108, 108, 64)      0         
_________________________________________________________________
conv2d_11 (Conv2D)           (None, 104, 104, 64)      102464    
_________________________________________________________________
batch_normalization_13 (Batc (None, 104, 104, 64)      256       
_________________________________________________________________
conv2d_12 (Conv2D)           (None, 100, 100, 64)      102464    
_________________________________________________________________
max_pooling2d_6 (MaxPooling2 (None, 50, 50, 64)        0         
_________________________________________________________________
batch_normalization_14 (Batc (None, 50, 50, 64)        256       
_________________________________________________________________
dropout_8 (Dropout)          (None, 50, 50, 64)        0         
_________________________________________________________________
conv2d_13 (Conv2D)           (None, 46, 46, 128)       204928    
_________________________________________________________________
batch_normalization_15 (Batc (None, 46, 46, 128)       512       
_________________________________________________________________
conv2d_14 (Conv2D)           (None, 42, 42, 128)       409728    
_________________________________________________________________
max_pooling2d_7 (MaxPooling2 (None, 21, 21, 128)       0         
_________________________________________________________________
batch_normalization_16 (Batc (None, 21, 21, 128)       512       
_________________________________________________________________
dropout_9 (Dropout)          (None, 21, 21, 128)       0         
_________________________________________________________________
conv2d_15 (Conv2D)           (None, 17, 17, 256)       819456    
_________________________________________________________________
batch_normalization_17 (Batc (None, 17, 17, 256)       1024      
_________________________________________________________________
conv2d_16 (Conv2D)           (None, 13, 13, 256)       1638656   
_________________________________________________________________
max_pooling2d_8 (MaxPooling2 (None, 6, 6, 256)         0         
_________________________________________________________________
batch_normalization_18 (Batc (None, 6, 6, 256)         1024      
_________________________________________________________________
dropout_10 (Dropout)         (None, 6, 6, 256)         0         
_________________________________________________________________
flatten_2 (Flatten)          (None, 9216)              0         
_________________________________________________________________
dense_4 (Dense)              (None, 256)               2359552   
_________________________________________________________________
batch_normalization_19 (Batc (None, 256)               1024      
_________________________________________________________________
dropout_11 (Dropout)         (None, 256)               0         
_________________________________________________________________
dense_5 (Dense)              (None, 256)               65792     
_________________________________________________________________
batch_normalization_20 (Batc (None, 256)               1024      
_________________________________________________________________
dropout_12 (Dropout)         (None, 256)               0         
_________________________________________________________________
dense_6 (Dense)              (None, 12)                3084      
=================================================================
Total params: 5,765,836
Trainable params: 5,762,828
Non-trainable params: 3,008
_________________________________________________________________
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Fit the model
</span><span class="n">history</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">fit_generator</span><span class="p">(</span><span class="n">generator</span><span class="p">.</span><span class="nf">flow</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">batch_size</span><span class="p">),</span>
                    <span class="n">epochs</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
                    <span class="n">steps_per_epoch</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">ceil</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">/</span> <span class="n">batch_size</span><span class="p">),</span>
                    <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">),</span>
                    <span class="n">callbacks</span><span class="o">=</span><span class="n">callbacks_list</span><span class="p">,</span>
                    <span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Epoch</span> <span class="mi">1</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">2341</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">2.2011</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.3446</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">7.5625</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.0776</span>  
<span class="n">Epoch</span> <span class="mi">00001</span><span class="p">:</span> <span class="n">saving</span> <span class="n">model</span> <span class="n">to</span> <span class="p">.</span><span class="o">/</span><span class="n">Model_HSV_224</span><span class="o">/</span><span class="n">weights</span><span class="p">.</span><span class="n">best_01</span><span class="o">-</span><span class="mf">0.08</span><span class="p">.</span><span class="n">hdf5</span>  
<span class="n">Epoch</span> <span class="mi">2</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">2088</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">1.4293</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.5153</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">4.6444</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.1498</span>  
<span class="n">Epoch</span> <span class="mi">00002</span><span class="p">:</span> <span class="n">saving</span> <span class="n">model</span> <span class="n">to</span> <span class="p">.</span><span class="o">/</span><span class="n">Model_HSV_224</span><span class="o">/</span><span class="n">weights</span><span class="p">.</span><span class="n">best_02</span><span class="o">-</span><span class="mf">0.15</span><span class="p">.</span><span class="n">hdf5</span>  
<span class="n">Epoch</span> <span class="mi">3</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">2077</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">1.1777</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.5972</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">4.0929</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.3159</span>  
<span class="n">Epoch</span> <span class="mi">00003</span><span class="p">:</span> <span class="n">saving</span> <span class="n">model</span> <span class="n">to</span> <span class="p">.</span><span class="o">/</span><span class="n">Model_HSV_224</span><span class="o">/</span><span class="n">weights</span><span class="p">.</span><span class="n">best_03</span><span class="o">-</span><span class="mf">0.32</span><span class="p">.</span><span class="n">hdf5</span>  
<span class="p">.</span>  
<span class="p">.</span>  
<span class="p">.</span>  
<span class="n">Epoch</span> <span class="mi">47</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">1931</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">0.1805</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.9336</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">0.2560</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.9043</span>  
<span class="n">Epoch</span> <span class="mi">00047</span><span class="p">:</span> <span class="n">saving</span> <span class="n">model</span> <span class="n">to</span> <span class="p">.</span><span class="o">/</span><span class="n">Model_HSV_224</span><span class="o">/</span><span class="n">weights</span><span class="p">.</span><span class="n">best_47</span><span class="o">-</span><span class="mf">0.90</span><span class="p">.</span><span class="n">hdf5</span>  
<span class="n">Epoch</span> <span class="mi">48</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">1947</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">0.1959</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.9316</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">0.2534</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.9043</span>  
<span class="n">Epoch</span> <span class="mi">00048</span><span class="p">:</span> <span class="n">saving</span> <span class="n">model</span> <span class="n">to</span> <span class="p">.</span><span class="o">/</span><span class="n">Model_HSV_224</span><span class="o">/</span><span class="n">weights</span><span class="p">.</span><span class="n">best_48</span><span class="o">-</span><span class="mf">0.90</span><span class="p">.</span><span class="n">hdf5</span>  
<span class="n">Epoch</span> <span class="mi">49</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">1947</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">0.1805</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.9334</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">0.2516</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.9061</span>  
<span class="n">Epoch</span> <span class="mi">00049</span><span class="p">:</span> <span class="n">saving</span> <span class="n">model</span> <span class="n">to</span> <span class="p">.</span><span class="o">/</span><span class="n">Model_HSV_224</span><span class="o">/</span><span class="n">weights</span><span class="p">.</span><span class="n">best_49</span><span class="o">-</span><span class="mf">0.91</span><span class="p">.</span><span class="n">hdf5</span>  
<span class="n">Epoch</span> <span class="mi">50</span><span class="o">/</span><span class="mi">50</span> <span class="o">-</span> <span class="mi">1947</span><span class="n">s</span> <span class="o">-</span> <span class="n">loss</span><span class="p">:</span> <span class="mf">0.1810</span> <span class="o">-</span> <span class="n">acc</span><span class="p">:</span> <span class="mf">0.9374</span> <span class="o">-</span> <span class="n">val_loss</span><span class="p">:</span> <span class="mf">0.2566</span> <span class="o">-</span> <span class="n">val_acc</span><span class="p">:</span> <span class="mf">0.9061</span>  
<span class="n">Epoch</span> <span class="mi">00050</span><span class="p">:</span> <span class="n">saving</span> <span class="n">model</span> <span class="n">to</span> <span class="p">.</span><span class="o">/</span><span class="n">Model_HSV_224</span><span class="o">/</span><span class="n">weights</span><span class="p">.</span><span class="n">best_50</span><span class="o">-</span><span class="mf">0.91</span><span class="p">.</span><span class="n">hdf5</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">lr</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">lr_HSV.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">history</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">history_HSV.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">training</span><span class="sh">'</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">dodgerblue</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">validation</span><span class="sh">'</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">crimson</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Loss function</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">epochs</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">loss</span><span class="sh">"</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">training</span><span class="sh">'</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">dodgerblue</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">validation</span><span class="sh">'</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">crimson</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Accuracy</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">epochs</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">accuracy</span><span class="sh">"</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">lr</span><span class="p">[</span><span class="sh">'</span><span class="s">lr</span><span class="sh">'</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">dodgerblue</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Learning Rate</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">epochs</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">learning rate</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.011</span><span class="p">)</span>

<span class="n">axes</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">);</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_146_0.png" />
</figure>

<p><strong>Results</strong></p>

<p>The value of the loss functions is almost identical between the two sets once the training has stabilized. We can see that the model has reached a stable configuration as the loss function of the training set and test set both plateau after 30 epochs.</p>

<p>In addition, the accuracy of both models reach around 90%. Our initial model reached 92% accuracy on the test set. However, we saw that the model was using leakage by leverage information located in the periphery of the seedling.</p>

<h3 id="predictions-and-results-1">Predictions and Results</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Maximum accuray on validation step:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s"> Epoch: {}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">])))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">        {:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">.</span><span class="nf">max</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Maximum accuray on validation step:
 Epoch: 34
        90.79%
</code></pre></div></div>

<p>We now load the model weights corresponding to the best accuracy on the test set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load best model
</span><span class="n">model</span><span class="p">.</span><span class="nf">load_weights</span><span class="p">(</span><span class="sh">"</span><span class="s">./Model_HSV_224/weights.best_34-0.91.hdf5</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<p>We now make predictions on the train and test sets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y_train_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y_test_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>4985/4985 [==============================] - 779s 156ms/step
554/554 [==============================] - 81s 146ms/step
</code></pre></div></div>

<p>Similar to the first model, we can plot the confusion matrices for both the training and test sets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Training Data</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">TAD_tools_v01</span><span class="p">.</span><span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
                                    <span class="n">y_train_pred</span><span class="p">,</span>
                                    <span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">,</span>
                                    <span class="n">normalize</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                                    <span class="n">title</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                                    <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">Oranges</span><span class="p">,</span>
                                    <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mf">11.5</span><span class="p">,</span><span class="o">-</span><span class="mf">0.5</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training Data
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_155_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Test Data</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">TAD_tools_v01</span><span class="p">.</span><span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">y_test</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span>
                                    <span class="n">y_test_pred</span><span class="p">,</span>
                                    <span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">,</span>
                                    <span class="n">normalize</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                                    <span class="n">title</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                                    <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">Greens</span><span class="p">,</span>
                                    <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mf">11.5</span><span class="p">,</span><span class="o">-</span><span class="mf">0.5</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Test Data
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_156_1.png" />
</figure>

<p><strong>Observations</strong></p>

<p>From the above, we can clearly see that our model has lost some accuracy on the Black-grass class. The class accuracy is not only 0.51 and 0.39 for the training and test sets respectively. However, the model has improved its predictions on the other classes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Accurancy:</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">   Train: {:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">accuracy_score</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_train_pred</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">   Test:  {:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">accuracy_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_test_pred</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">F1-score</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">   Train: {:.3f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">f1_score</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_train_pred</span><span class="p">,</span> <span class="n">average</span><span class="o">=</span><span class="sh">'</span><span class="s">weighted</span><span class="sh">'</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">   Test:  {:.3f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">f1_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_test_pred</span><span class="p">,</span> <span class="n">average</span><span class="o">=</span><span class="sh">'</span><span class="s">weighted</span><span class="sh">'</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Classification Report</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">classification_report</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_train_pred</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">metrics</span><span class="p">.</span><span class="nf">classification_report</span><span class="p">(</span><span class="n">y_test</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">y_test_pred</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Accurancy:
   Train: 91.65%
   Test:  90.79%

F1-score
   Train: 91.536%
   Test:  90.790%

Classification Report
              precision    recall  f1-score   support

           0       0.57      0.51      0.54       278
           1       0.86      0.98      0.91       407
           2       1.00      0.78      0.87       301
           3       0.98      0.99      0.98       642
           4       0.91      0.98      0.94       228
           5       0.98      0.98      0.98       484
           6       0.82      0.85      0.84       686
           7       0.87      0.99      0.93       231
           8       0.99      0.93      0.96       546
           9       0.98      0.91      0.95       247
          10       1.00      0.99      0.99       518
          11       0.94      0.97      0.95       417

    accuracy                           0.92      4985
   macro avg       0.91      0.90      0.90      4985
weighted avg       0.92      0.92      0.92      4985

              precision    recall  f1-score   support

           0       0.40      0.39      0.39        31
           1       0.98      0.98      0.98        45
           2       1.00      0.97      0.99        34
           3       1.00      0.97      0.99        71
           4       0.88      0.92      0.90        25
           5       0.96      0.98      0.97        54
           6       0.80      0.80      0.80        76
           7       0.81      1.00      0.90        26
           8       1.00      0.92      0.96        61
           9       0.93      0.93      0.93        27
          10       1.00      1.00      1.00        58
          11       0.91      0.93      0.92        46

    accuracy                           0.91       554
   macro avg       0.89      0.90      0.89       554
weighted avg       0.91      0.91      0.91       554
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># isolate train and test indexes as dataframe
</span><span class="n">df_X_train</span><span class="p">,</span> <span class="n">df_X_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">resolution_df</span><span class="p">,</span>
                                                    <span class="n">test_size</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                                                    <span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">,</span>
                                                    <span class="n">stratify</span><span class="o">=</span><span class="n">resolution_df</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># add predictions to dataframe
</span><span class="n">df_X_train</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span><span class="sh">'</span><span class="s">prediction_HSV</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">[</span><span class="n">y_train_pred</span><span class="p">]</span>
<span class="n">df_X_test</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span><span class="sh">'</span><span class="s">prediction_HSV</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">labels</span><span class="p">.</span><span class="n">classes_</span><span class="p">[</span><span class="n">y_test_pred</span><span class="p">]</span>

<span class="c1"># define if prediction is correct
</span><span class="n">df_X_train</span><span class="p">[</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_X_train</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">df_X_train</span><span class="p">[</span><span class="sh">'</span><span class="s">prediction_HSV</span><span class="sh">'</span><span class="p">]</span>
<span class="n">df_X_test</span><span class="p">[</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_X_test</span><span class="p">[</span><span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="n">df_X_test</span><span class="p">[</span><span class="sh">'</span><span class="s">prediction_HSV</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># group predictions by growth-phase and species
</span><span class="n">df_X_train</span> <span class="o">=</span> <span class="n">df_X_train</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])[</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">df_X_train</span> <span class="o">=</span> <span class="n">df_X_train</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">pivot</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="sh">"</span><span class="s">species</span><span class="sh">"</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">)</span>

<span class="n">df_X_test</span> <span class="o">=</span> <span class="n">df_X_test</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">species</span><span class="sh">'</span><span class="p">])[</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">df_X_test</span> <span class="o">=</span> <span class="n">df_X_test</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">pivot</span><span class="p">(</span><span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">growth_lvl</span><span class="sh">'</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="sh">"</span><span class="s">species</span><span class="sh">"</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="sh">'</span><span class="s">correct</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Training set:</span><span class="sh">"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">df_X_train</span><span class="p">.</span><span class="nf">reindex</span><span class="p">(</span><span class="n">CLUSTER_ORDER</span><span class="p">),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdYlGn</span><span class="sh">'</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">annot_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">fontsize</span><span class="sh">"</span><span class="p">:</span><span class="mi">12</span><span class="p">},</span> <span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">setp</span><span class="p">(</span><span class="n">ax</span><span class="p">.</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">,</span><span class="n">rotation_mode</span><span class="o">=</span><span class="sh">"</span><span class="s">anchor</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training set:
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_160_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Test set:</span><span class="sh">"</span><span class="p">)</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">df_X_test</span><span class="p">.</span><span class="nf">reindex</span><span class="p">(</span><span class="n">CLUSTER_ORDER</span><span class="p">),</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">RdYlGn</span><span class="sh">'</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">annot_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">fontsize</span><span class="sh">"</span><span class="p">:</span><span class="mi">12</span><span class="p">},</span> <span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">setp</span><span class="p">(</span><span class="n">ax</span><span class="p">.</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">,</span> <span class="n">ha</span><span class="o">=</span><span class="sh">"</span><span class="s">right</span><span class="sh">"</span><span class="p">,</span><span class="n">rotation_mode</span><span class="o">=</span><span class="sh">"</span><span class="s">anchor</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Test set:
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_161_1.png" />
</figure>

<h3 id="final-model-inspection">Final Model Inspection</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">30</span><span class="p">))</span>

<span class="n">m</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">6</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>

        <span class="c1"># isolate species
</span>        <span class="n">spec</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">n_classes</span><span class="p">)[</span><span class="n">m</span><span class="o">//</span><span class="mi">2</span><span class="p">]</span>
        
        <span class="c1"># find examples of the species
</span>        <span class="n">idxes</span> <span class="o">=</span> <span class="n">y_train</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">==</span> <span class="n">spec</span>
        
        <span class="c1"># isolate image
</span>        <span class="n">filtered_images</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">idxes</span><span class="p">,...]</span>
        
        <span class="c1"># random image
</span>        <span class="n">image</span> <span class="o">=</span> <span class="n">filtered_images</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="n">filtered_images</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">size</span><span class="o">=</span><span class="mi">1</span><span class="p">)[</span><span class="mi">0</span><span class="p">],...]</span>

        <span class="c1"># make prediction
</span>        <span class="n">test_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">image</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">,...],</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">).</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        
        <span class="c1"># generate explanations
</span>        <span class="n">explainer</span> <span class="o">=</span> <span class="n">lime_image</span><span class="p">.</span><span class="nc">LimeImageExplainer</span><span class="p">(</span><span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">explanation</span> <span class="o">=</span> <span class="n">explainer</span><span class="p">.</span><span class="nf">explain_instance</span><span class="p">(</span>
            <span class="n">image</span><span class="p">,</span>
            <span class="n">model</span><span class="p">.</span><span class="n">predict_proba</span><span class="p">,</span>  <span class="c1"># classification function
</span>            <span class="n">top_labels</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
            <span class="n">hide_color</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
            <span class="n">num_samples</span><span class="o">=</span><span class="mi">286</span><span class="p">)</span>
        <span class="n">temp</span><span class="p">,</span> <span class="n">mask</span> <span class="o">=</span> <span class="n">explanation</span><span class="p">.</span><span class="nf">get_image_and_mask</span><span class="p">(</span><span class="n">explanation</span><span class="p">.</span><span class="n">top_labels</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
                                                    <span class="n">positive_only</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                                                    <span class="n">num_features</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span>
                                                    <span class="n">hide_rest</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">img_boundry1</span> <span class="o">=</span> <span class="nf">mark_boundaries</span><span class="p">(</span><span class="n">temp</span><span class="p">,</span> <span class="n">mask</span><span class="p">)</span>
                
        <span class="c1"># convert label to species name
</span>        <span class="n">predicted_species</span> <span class="o">=</span> <span class="n">id_class_mapping</span><span class="p">[</span><span class="n">test_pred</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
        
        <span class="c1"># plot results
</span>        <span class="n">axes</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">img_boundry1</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">"</span><span class="s">off</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">true </span><span class="sh">"</span> <span class="o">+</span> <span class="n">id_class_mapping</span><span class="p">[</span><span class="n">spec</span><span class="p">]</span> <span class="o">+</span> <span class="sh">"</span><span class="se">\n</span><span class="s"> predicted: </span><span class="sh">"</span> <span class="o">+</span>
                           <span class="n">predicted_species</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>

        <span class="n">m</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/output_163_1.png" />
</figure>

<h3 id="conclusion">Conclusion</h3>

<p>In conclusion, we were able to produce a model relying only on the shape, size, and colors of the seedlings. This model is capable of making correct predictions more than 90% of the times on 12 different seedling species. If we were to improve this model and its data collection, the following recommendations would be proposed:</p>

<ol>
  <li>Standardize photographs by taking pictures from the same distance, same focus.</li>
  <li>Build a model to classify the Loose-Silky bent and Black-grass together then develop a model specifically to classify these two species.</li>
  <li>Collect information regarding the importance of misclassification of certain species. Weights can then be incorporated in the model.</li>
</ol>]]></content><author><name>Thibault Dody</name></author><category term="Kaggle" /><category term="ML" /><category term="python" /><summary type="html"><![CDATA[Image classification of seedlings.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/tile.png" /><media:content medium="image" url="https://tdody.github.io/assets/img/2020-02-13-Seedlings-Classification/tile.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Kaggle: Titanic Disaster (Top 3%)</title><link href="http://localhost:4000/Titanic/" rel="alternate" type="text/html" title="Kaggle: Titanic Disaster (Top 3%)" /><published>2020-02-02T00:00:00-05:00</published><updated>2020-02-02T00:00:00-05:00</updated><id>http://localhost:4000/Titanic</id><content type="html" xml:base="http://localhost:4000/Titanic/"><![CDATA[<footer id="attribution" style="float:right; color:#999; background:#fff;">
Created by Thibault Dody, 02/02/2020.
</footer>

<h1 id="titanic-disaster-study">Titanic Disaster Study</h1>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/Titanic1.jpg" style="width:642px;height:=288px;" />
</figure>

<h2 id="table-of-content">Table of Content</h2>

<p><a href="#Section_1"><strong>1. Introduction</strong></a> <br />
<a href="#Section_2"><strong>2. Data Import</strong></a><br />
    <a href="#Section_21">2.1 Import Libraries</a><br />
    <a href="#Section_22">2.2 Load specific tools</a><br />
    <a href="#Section_23">2.3 Data Import</a><br />
    <a href="#Section_24">2.4 Data Inspection</a><br />
<a href="#Section_3"><strong>3. Data Exploration and Data Cleaning</strong></a><br />
    <a href="#Section_31">3.1 Pivoting Features</a><br />
    <a href="#Section_32">3.2 Embarked Feature</a><br />
    <a href="#Section_33">3.3 Fare Feature</a><br />
    <a href="#Section_34">3.4 Cabin Feature</a><br />
    <a href="#Section_35">3.5 Age Feature</a><br />
<a href="#Section_4"><strong>4. Data Visualization and Feature Exploration</strong></a><br />
    <a href="#Section_41">4.1 Gender</a><br />
    <a href="#Section_42">4.2 Age</a><br />
    <a href="#Section_43">4.3 Pclass and Fare</a><br />
    <a href="#Section_44">4.4 SibSp &amp; Parch</a><br />
    <a href="#Section_45">4.5 Embarked</a><br />
<a href="#Section_5"><strong>5. Statistical Study</strong></a><br />
    <a href="#Section_51">5.1 Main Features</a><br />
    <a href="#Section_52">5.2 Correlation Study</a><br />
<a href="#Section_6"><strong>6. Feature Preparation</strong></a><br />
    <a href="#Section_61">6.1 Passenger Title</a><br />
    <a href="#Section_62">6.2 Family Size</a><br />
    <a href="#Section_63">6.3 Tickets</a><br />
    <a href="#Section_64">6.4 Family Survival Rate</a><br />
    <a href="#Section_65">6.4 Fare Binning</a><br />
    <a href="#Section_66">6.4 Age Binning</a><br />
    <a href="#Section_67">6.4 Encoding</a> <br />
<a href="#Section_7"><strong>7. Model Preparation</strong></a><br />
<a href="#Section_8"><strong>8. Models</strong></a><br />
<a href="#Section_9"><strong>9. Best Models</strong></a><br />
<a href="#Section_10"><strong>10. Create Submission</strong></a></p>

<hr />
<p><a id="Section_1"></a></p>
<h2 id="1-introduction">1. Introduction</h2>

<p>On April 15, 1912, the Titanic sunk after colliding with an iceberg, 1502 out of 2224 passengers and crew members died. The dataset containing passenger information has been made available. The purpose of this Notebook is to perform a comparison study of different models aimed at predicting survival rate. The data is obtained from <a href="https://www.kaggle.com/">Kaggle</a>.</p>

<hr />
<p><a id="Section_2"></a></p>
<h2 id="2-data-import">2. Data Import</h2>
<p><a id="Section_21"></a></p>
<h3 id="21-import-libraries">2.1 Import Libraries</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Load libraries
</span><span class="kn">import</span> <span class="n">sys</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Python version:</span><span class="se">\t\t</span><span class="s">{}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">sys</span><span class="p">.</span><span class="n">version</span><span class="p">))</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">pandas version:</span><span class="se">\t\t</span><span class="s">{}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">__version__</span><span class="p">))</span>
<span class="kn">import</span> <span class="n">matplotlib</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">matplotlib version:</span><span class="se">\t</span><span class="s">{}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">matplotlib</span><span class="p">.</span><span class="n">__version__</span><span class="p">))</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">numpy version:</span><span class="se">\t\t</span><span class="s">{}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">__version__</span><span class="p">))</span>
<span class="kn">import</span> <span class="n">scipy</span> <span class="k">as</span> <span class="n">sp</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">scipy version:</span><span class="se">\t\t</span><span class="s">{}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">sp</span><span class="p">.</span><span class="n">__version__</span><span class="p">))</span>
<span class="kn">import</span> <span class="n">sklearn</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">sklearn version:</span><span class="se">\t</span><span class="s">{}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">sklearn</span><span class="p">.</span><span class="n">__version__</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Python version:		3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
pandas version:		0.25.3
matplotlib version:	3.1.1
numpy version:		1.18.1
scipy version:		1.3.2
sklearn version:	0.22.1
</code></pre></div></div>

<p><a id="Section_22"></a></p>
<h3 id="22-load-specific-tools">2.2 Load specific tools</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Visualization
</span><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">set</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="sh">'</span><span class="s">whitegrid</span><span class="sh">'</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="sh">'</span><span class="s">notebook</span><span class="sh">'</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="sh">'</span><span class="s">deep</span><span class="sh">'</span><span class="p">)</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="c1"># Models
</span><span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">cross_val_score</span><span class="p">,</span><span class="n">GridSearchCV</span><span class="p">,</span> <span class="n">StratifiedKFold</span><span class="p">,</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">StandardScaler</span><span class="p">,</span> <span class="n">LabelEncoder</span><span class="p">,</span> <span class="n">OneHotEncoder</span>

<span class="kn">from</span> <span class="n">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeClassifier</span><span class="p">,</span> <span class="n">DecisionTreeRegressor</span><span class="p">,</span> <span class="n">ExtraTreeClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.naive_bayes</span> <span class="kn">import</span> <span class="n">GaussianNB</span><span class="p">,</span> <span class="n">BernoulliNB</span>
<span class="kn">from</span> <span class="n">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.svm</span> <span class="kn">import</span> <span class="n">SVC</span><span class="p">,</span> <span class="n">NuSVC</span><span class="p">,</span> <span class="n">LinearSVC</span>
<span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span><span class="p">,</span> <span class="n">PassiveAggressiveClassifier</span><span class="p">,</span> <span class="n">RidgeClassifier</span><span class="p">,</span> <span class="n">SGDClassifier</span><span class="p">,</span> <span class="n">Perceptron</span>
<span class="kn">from</span> <span class="n">sklearn.neighbors</span> <span class="kn">import</span> <span class="n">KNeighborsClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.discriminant_analysis</span> <span class="kn">import</span> <span class="n">LinearDiscriminantAnalysis</span><span class="p">,</span> <span class="n">QuadraticDiscriminantAnalysis</span>
<span class="kn">from</span> <span class="n">sklearn.neural_network</span> <span class="kn">import</span> <span class="n">MLPClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">AdaBoostClassifier</span><span class="p">,</span> <span class="n">VotingClassifier</span><span class="p">,</span> <span class="n">ExtraTreesClassifier</span><span class="p">,</span> <span class="n">RandomForestClassifier</span><span class="p">,</span> <span class="n">GradientBoostingClassifier</span><span class="p">,</span> <span class="n">BaggingClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.gaussian_process</span> <span class="kn">import</span> <span class="n">GaussianProcessClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.decomposition</span> <span class="kn">import</span> <span class="n">PCA</span>

<span class="kn">from</span> <span class="n">xgboost</span> <span class="kn">import</span> <span class="n">XGBClassifier</span>

<span class="c1"># Tools
</span><span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">mean_squared_error</span><span class="p">,</span> <span class="n">roc_auc_score</span><span class="p">,</span> <span class="n">roc_curve</span><span class="p">,</span> <span class="n">auc</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span><span class="p">,</span><span class="n">classification_report</span><span class="p">,</span> <span class="n">precision_recall_curve</span><span class="p">,</span> <span class="n">confusion_matrix</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">cross_val_score</span><span class="p">,</span> <span class="n">GridSearchCV</span><span class="p">,</span> <span class="n">learning_curve</span>

<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">Counter</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>
<span class="kn">import</span> <span class="n">string</span>


<span class="c1"># Do not show warnings (added after Notebook was finalized)
</span><span class="kn">import</span> <span class="n">warnings</span>
<span class="n">warnings</span><span class="p">.</span><span class="nf">filterwarnings</span><span class="p">(</span><span class="sh">'</span><span class="s">ignore</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p><a id="Section_23"></a></p>
<h3 id="23-data-import">2.3 Data Import</h3>

<p>We import both the training and test sets, we then combine them to compute statistics on the entire population of passengers.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Import training and testing csv datasets
</span><span class="n">train</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./Data/train.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./Data/test.csv</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Inspect data
</span><span class="n">train</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>Braund, Mr. Owen Harris</td>
      <td>male</td>
      <td>22.0</td>
      <td>1</td>
      <td>0</td>
      <td>A/5 21171</td>
      <td>7.2500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>1</td>
      <td>1</td>
      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>
      <td>female</td>
      <td>38.0</td>
      <td>1</td>
      <td>0</td>
      <td>PC 17599</td>
      <td>71.2833</td>
      <td>C85</td>
      <td>C</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>1</td>
      <td>3</td>
      <td>Heikkinen, Miss. Laina</td>
      <td>female</td>
      <td>26.0</td>
      <td>0</td>
      <td>0</td>
      <td>STON/O2. 3101282</td>
      <td>7.9250</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>1</td>
      <td>1</td>
      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>
      <td>female</td>
      <td>35.0</td>
      <td>1</td>
      <td>0</td>
      <td>113803</td>
      <td>53.1000</td>
      <td>C123</td>
      <td>S</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>0</td>
      <td>3</td>
      <td>Allen, Mr. William Henry</td>
      <td>male</td>
      <td>35.0</td>
      <td>0</td>
      <td>0</td>
      <td>373450</td>
      <td>8.0500</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Inspect data
</span><span class="n">test</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>PassengerId</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>892</td>
      <td>3</td>
      <td>Kelly, Mr. James</td>
      <td>male</td>
      <td>34.5</td>
      <td>0</td>
      <td>0</td>
      <td>330911</td>
      <td>7.8292</td>
      <td>NaN</td>
      <td>Q</td>
    </tr>
    <tr>
      <th>1</th>
      <td>893</td>
      <td>3</td>
      <td>Wilkes, Mrs. James (Ellen Needs)</td>
      <td>female</td>
      <td>47.0</td>
      <td>1</td>
      <td>0</td>
      <td>363272</td>
      <td>7.0000</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>2</th>
      <td>894</td>
      <td>2</td>
      <td>Myles, Mr. Thomas Francis</td>
      <td>male</td>
      <td>62.0</td>
      <td>0</td>
      <td>0</td>
      <td>240276</td>
      <td>9.6875</td>
      <td>NaN</td>
      <td>Q</td>
    </tr>
    <tr>
      <th>3</th>
      <td>895</td>
      <td>3</td>
      <td>Wirz, Mr. Albert</td>
      <td>male</td>
      <td>27.0</td>
      <td>0</td>
      <td>0</td>
      <td>315154</td>
      <td>8.6625</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
    <tr>
      <th>4</th>
      <td>896</td>
      <td>3</td>
      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>
      <td>female</td>
      <td>22.0</td>
      <td>1</td>
      <td>1</td>
      <td>3101298</td>
      <td>12.2875</td>
      <td>NaN</td>
      <td>S</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># tools functions: concat and divide
</span><span class="k">def</span> <span class="nf">concat_df</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">([</span><span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">],</span> <span class="n">sort</span><span class="o">=</span><span class="bp">True</span><span class="p">).</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>


<span class="k">def</span> <span class="nf">divide_df</span><span class="p">(</span><span class="n">full_df</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">full_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:</span><span class="mi">890</span><span class="p">],</span> <span class="n">full_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">891</span><span class="p">:].</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>


<span class="n">df_all</span> <span class="o">=</span> <span class="nf">concat_df</span><span class="p">(</span><span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">)</span>
<span class="c1"># create a clone to test different transformations
</span><span class="n">df_exp</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
</code></pre></div></div>

<p><a id="Section_24"></a></p>
<h3 id="24-data-inspection">2.4 Data Inspection</h3>

<p>The data is divided into two separate datasets:</p>
<ul>
  <li>a training set containing a set of features and out target variable (whether or not a passenger survived)</li>
  <li>a test set containing only the set of features</li>
</ul>

<p><strong>Data  Features</strong><br />
<strong>. Pclass</strong>: Categorical feature used to describe the passenger class (1=Upper, 2=Middle, 3=Lower). <br />
<strong>. Name</strong>: String Containing a passenger name and title. <br />
<strong>. Sex</strong>: Categorical variable describing the passenger’s gender. <br />
<strong>. Age</strong>: Numerical feature standing for the passenger’s age. <br />
<strong>. SibSp</strong>: Number of siblings/spouses aboard. <br />
<strong>. Parch</strong>: Number of parents/children aboard. <br />
<strong>. Ticket</strong>: Ticket number. <br />
<strong>. Fare</strong>: Price of the ticket. <br />
<strong>. Cabin</strong>: Cabin id. <br />
<strong>. Embarked</strong>: Categorical feature, port of embarkation.</p>

<p>Target:<br />
<strong>. Survived</strong>: Target feature (1=Survived, 0=Died)</p>

<hr />
<p><a id="Section_3"></a></p>
<h2 id="3-data-exploration-and-data-cleaning">3. Data Exploration and Data Cleaning</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Remove the Passengerid from the set as it does not need to be included in the models
</span><span class="n">passengerId</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="n">PassengerId</span>

<span class="n">train</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">PassengerId</span><span class="sh">'</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">PassengerId</span><span class="sh">'</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># list information for each feature (type, number of nun-null records)
</span><span class="n">train</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 891 entries, 0 to 890
Data columns (total 11 columns):
Survived    891 non-null int64
Pclass      891 non-null int64
Name        891 non-null object
Sex         891 non-null object
Age         714 non-null float64
SibSp       891 non-null int64
Parch       891 non-null int64
Ticket      891 non-null object
Fare        891 non-null float64
Cabin       204 non-null object
Embarked    889 non-null object
dtypes: float64(2), int64(4), object(5)
memory usage: 76.7+ KB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># list information for each feature (type, number of nun-null records)
</span><span class="n">test</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 418 entries, 0 to 417
Data columns (total 10 columns):
Pclass      418 non-null int64
Name        418 non-null object
Sex         418 non-null object
Age         332 non-null float64
SibSp       418 non-null int64
Parch       418 non-null int64
Ticket      418 non-null object
Fare        417 non-null float64
Cabin       91 non-null object
Embarked    418 non-null object
dtypes: float64(2), int64(3), object(5)
memory usage: 32.8+ KB
</code></pre></div></div>

<p><strong>Comment</strong>: <br />
Several of the features in the <strong>training</strong> set appear to be incomplete (Age, Cabin, and Embarked). <br />
Several of the features in the <strong>test</strong> set appear to be incomplete (Age, Cabin, and Fare).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># compute percentage of missing values
</span>
<span class="c1"># compute number of missing records
</span><span class="n">missing_total</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">().</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># convert to percentages
</span><span class="n">missing_percentage</span> <span class="o">=</span> <span class="n">missing_total</span><span class="o">/</span><span class="n">train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span>

<span class="c1"># display missing record %
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Missing values in training set:</span><span class="sh">'</span><span class="p">)</span>
<span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">([</span><span class="n">missing_total</span><span class="p">,</span><span class="n">missing_percentage</span><span class="p">],</span><span class="n">keys</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Count</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Percentage</span><span class="sh">'</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Missing values in training set:
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Count</th>
      <th>Percentage</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cabin</th>
      <td>687</td>
      <td>77.104377</td>
    </tr>
    <tr>
      <th>Age</th>
      <td>177</td>
      <td>19.865320</td>
    </tr>
    <tr>
      <th>Embarked</th>
      <td>2</td>
      <td>0.224467</td>
    </tr>
    <tr>
      <th>Fare</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Ticket</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Parch</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>SibSp</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Sex</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Name</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Pclass</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Survived</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
  </tbody>
</table>
</div>

<p><strong>Comment</strong>:<br />
Based on the above table, the following observations can be made:</p>
<ol>
  <li>The cabin feature is mostly empty, this will be hard to use.</li>
  <li>The age feature contains a large number of missing values. This will require a smarter approach rather than just filling the null with a median.</li>
  <li>The embarked feature only has 2 missing values. We can come up with estimates for these two by taking a quick look at the data and using the most probable values as replacements.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># compute percentage of missing values
</span>
<span class="c1"># compute number of missing records
</span><span class="n">missing_total</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">().</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># convert to percentages
</span><span class="n">missing_percentage</span> <span class="o">=</span> <span class="n">missing_total</span><span class="o">/</span><span class="n">train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="mi">100</span>

<span class="c1"># display missing record %
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Missing values in test set:</span><span class="sh">'</span><span class="p">)</span>
<span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">([</span><span class="n">missing_total</span><span class="p">,</span><span class="n">missing_percentage</span><span class="p">],</span><span class="n">keys</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Count</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Percentage</span><span class="sh">'</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Missing values in test set:
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Count</th>
      <th>Percentage</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>Cabin</th>
      <td>327</td>
      <td>36.700337</td>
    </tr>
    <tr>
      <th>Age</th>
      <td>86</td>
      <td>9.652076</td>
    </tr>
    <tr>
      <th>Fare</th>
      <td>1</td>
      <td>0.112233</td>
    </tr>
    <tr>
      <th>Embarked</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Ticket</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Parch</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>SibSp</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Sex</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Name</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>Pclass</th>
      <td>0</td>
      <td>0.000000</td>
    </tr>
  </tbody>
</table>
</div>

<p><strong>Comment</strong>:<br />
Based on the above table, the following observations can be made:</p>
<ol>
  <li>The cabin feature is also mostly empty, this will be hard to use.</li>
  <li>The age feature contains a large number of missing values. This will require a smarter approach rather than just filling the null with a median.</li>
  <li>The fare feature only has 1 missing values. We can come up with an estimate for this by taking a quick look at the data and using the most probable values as a replacement.</li>
</ol>

<p><a id="Section_31"></a></p>
<h3 id="31-pivoting-features">3.1 Pivoting features</h3>

<p>Before diving in the data, it is interesting to get a quick overview of what is waiting for us. To do so, we can pivot several of the features with the target data and quickly identify which features seem important.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[[</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]].</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">],</span><span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">agg</span><span class="p">([</span><span class="sh">'</span><span class="s">mean</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }

    .dataframe thead tr:last-of-type th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="2" halign="left">Survived</th>
    </tr>
    <tr>
      <th></th>
      <th>mean</th>
      <th>count</th>
    </tr>
    <tr>
      <th>Sex</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>female</th>
      <td>0.742038</td>
      <td>314</td>
    </tr>
    <tr>
      <th>male</th>
      <td>0.188908</td>
      <td>577</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]].</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">],</span><span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">agg</span><span class="p">([</span><span class="sh">'</span><span class="s">mean</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }

    .dataframe thead tr:last-of-type th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="2" halign="left">Survived</th>
    </tr>
    <tr>
      <th></th>
      <th>mean</th>
      <th>count</th>
    </tr>
    <tr>
      <th>Pclass</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>0.629630</td>
      <td>216</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.472826</td>
      <td>184</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.242363</td>
      <td>491</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[[</span><span class="sh">'</span><span class="s">SibSp</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]].</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">SibSp</span><span class="sh">'</span><span class="p">],</span><span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">agg</span><span class="p">([</span><span class="sh">'</span><span class="s">mean</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }

    .dataframe thead tr:last-of-type th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="2" halign="left">Survived</th>
    </tr>
    <tr>
      <th></th>
      <th>mean</th>
      <th>count</th>
    </tr>
    <tr>
      <th>SibSp</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.345395</td>
      <td>608</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.535885</td>
      <td>209</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.464286</td>
      <td>28</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.250000</td>
      <td>16</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.166667</td>
      <td>18</td>
    </tr>
    <tr>
      <th>5</th>
      <td>0.000000</td>
      <td>5</td>
    </tr>
    <tr>
      <th>8</th>
      <td>0.000000</td>
      <td>7</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[[</span><span class="sh">'</span><span class="s">Parch</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]].</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Parch</span><span class="sh">'</span><span class="p">],</span><span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">agg</span><span class="p">([</span><span class="sh">'</span><span class="s">mean</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead tr th {
        text-align: left;
    }

    .dataframe thead tr:last-of-type th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr>
      <th></th>
      <th colspan="2" halign="left">Survived</th>
    </tr>
    <tr>
      <th></th>
      <th>mean</th>
      <th>count</th>
    </tr>
    <tr>
      <th>Parch</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.343658</td>
      <td>678</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.550847</td>
      <td>118</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.500000</td>
      <td>80</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.600000</td>
      <td>5</td>
    </tr>
    <tr>
      <th>4</th>
      <td>0.000000</td>
      <td>4</td>
    </tr>
    <tr>
      <th>5</th>
      <td>0.200000</td>
      <td>5</td>
    </tr>
    <tr>
      <th>6</th>
      <td>0.000000</td>
      <td>1</td>
    </tr>
  </tbody>
</table>
</div>

<p>In conclusion:</p>

<ul>
  <li>Gender, Females have a higher change of survival over men (74% vs. 19%)</li>
  <li>Pclass, the survival rate is strongly correlated with the passenger class</li>
  <li>SibSp, Parch, smaller family tends to have a higher survival rate</li>
</ul>

<p><a id="Section_32"></a></p>
<h3 id="32-age">3.2 Age</h3>
<p>The age feature is likely important for the predictions, however, it contains a large number of missing values. We need to come up with a strategy to fill the missing values. Let’s start by computing the feature correlations to determine which feature is highly correlated to the age of the passengers.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># compute all correlations
</span><span class="n">df_all_corr</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">.</span><span class="nf">corr</span><span class="p">().</span><span class="nf">abs</span><span class="p">()</span>

<span class="c1"># display correlations with age
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Correlation with Age feature</span><span class="sh">"</span><span class="p">)</span>
<span class="n">df_all_corr</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">].</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="mi">1</span><span class="p">:]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Correlation with Age feature

Pclass         0.408106
SibSp          0.243699
Fare           0.178740
Parch          0.150917
Survived       0.077221
PassengerId    0.028814
Name: Age, dtype: float64
</code></pre></div></div>

<p>As listed above, the Class feature is fairly well correlated to the Age of the passenger. <strong>However</strong>, the listed correlation do not include the effects of binary features such as the gender. We can breakdown the correlations to include sub-divisions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_exp</span><span class="p">[</span><span class="sh">'</span><span class="s">Cat</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_exp</span><span class="p">[</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span> <span class="o">+</span> <span class="n">df_exp</span><span class="p">[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
<span class="n">df_exp</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Cat</span><span class="sh">'</span><span class="p">]).</span><span class="nf">median</span><span class="p">()[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Cat
female1    36.0
female2    28.0
female3    22.0
male1      42.0
male2      29.5
male3      25.0
Name: Age, dtype: float64
</code></pre></div></div>

<p>From the above, we can see that for each class women seem to be younger than men. In addition, we can see that older passengers travels in higher class.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># fill missing age with groups Sex + PClass
</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span>
                               <span class="p">])[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nf">median</span><span class="p">()))</span>

<span class="k">assert</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">].</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">()</span><span class="o">==</span><span class="mi">0</span>
</code></pre></div></div>

<p>The age feature is now complete.</p>

<p><a id="Section_33"></a></p>
<h3 id="33-embarked-feature">3.3 Embarked Feature</h3>
<p>The embarked feature has missing values in the training set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Distribution of the data
</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Embarked</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">(</span><span class="n">dropna</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>S      644
C      168
Q       77
NaN      2
Name: Embarked, dtype: int64
</code></pre></div></div>

<p>We now inspect the rest of the records for these two missing values:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Embarked</span><span class="sh">'</span><span class="p">].</span><span class="nf">isnull</span><span class="p">()]</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Survived</th>
      <th>Pclass</th>
      <th>Name</th>
      <th>Sex</th>
      <th>Age</th>
      <th>SibSp</th>
      <th>Parch</th>
      <th>Ticket</th>
      <th>Fare</th>
      <th>Cabin</th>
      <th>Embarked</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>61</th>
      <td>1</td>
      <td>1</td>
      <td>Icard, Miss. Amelie</td>
      <td>female</td>
      <td>38.0</td>
      <td>0</td>
      <td>0</td>
      <td>113572</td>
      <td>80.0</td>
      <td>B28</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>829</th>
      <td>1</td>
      <td>1</td>
      <td>Stone, Mrs. George Nelson (Martha Evelyn)</td>
      <td>female</td>
      <td>62.0</td>
      <td>0</td>
      <td>0</td>
      <td>113572</td>
      <td>80.0</td>
      <td>B28</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>

<p>Let’s group the passenger with similar features:</p>
<ul>
  <li>Female</li>
  <li>1st Class</li>
  <li>Fare between 50 and 100</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span><span class="p">[(</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">female</span><span class="sh">'</span><span class="p">)</span> <span class="o">&amp;</span>
       <span class="p">(</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">50</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">100</span><span class="p">)].</span><span class="nf">groupby</span><span class="p">(</span>
           <span class="p">[</span><span class="sh">'</span><span class="s">Embarked</span><span class="sh">'</span><span class="p">]).</span><span class="nf">count</span><span class="p">()[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Embarked
C    30
Q     2
S    35
Name: Age, dtype: int64
</code></pre></div></div>

<p>From the above, the most common embarked location is “S”. We will replace the missing values with this.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Fill missing values
</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Embarked</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">'</span><span class="s">S</span><span class="sh">'</span><span class="p">,</span><span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p><a id="Section_34"></a></p>
<h3 id="34-fare-feature">3.4 Fare Feature</h3>
<p>The test set has a missing value for the Fare feature.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Display record corresponding to missing value
</span><span class="n">df_all</span><span class="p">[</span><span class="n">df_all</span><span class="p">.</span><span class="n">Fare</span><span class="p">.</span><span class="nf">isnull</span><span class="p">()]</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Age</th>
      <th>Cabin</th>
      <th>Embarked</th>
      <th>Fare</th>
      <th>Name</th>
      <th>Parch</th>
      <th>PassengerId</th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>SibSp</th>
      <th>Survived</th>
      <th>Ticket</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1043</th>
      <td>60.5</td>
      <td>NaN</td>
      <td>S</td>
      <td>NaN</td>
      <td>Storey, Mr. Thomas</td>
      <td>0</td>
      <td>1044</td>
      <td>3</td>
      <td>male</td>
      <td>0</td>
      <td>NaN</td>
      <td>3701</td>
    </tr>
  </tbody>
</table>
</div>

<p>We will use the median Fare of the subset corresponding to Pclass=3, Embarked=’S’, Sex=’male’, Age&gt;=21 (for adult).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Extract median
</span><span class="n">subset_med</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[(</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">SibSp</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span>
                  <span class="p">(</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Parch</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)][</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">].</span><span class="nf">median</span><span class="p">()</span>

<span class="c1"># Replace missing value
</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">subset_med</span><span class="p">)</span>
</code></pre></div></div>

<p><a id="Section_35"></a></p>
<h3 id="35-cabin-feature">3.5 Cabin Feature</h3>

<p>The cabin feature is missing for 77% of the training set and 78% of the test set. With such a high percentage, the feature can either be dropped or feature engineering can be used to understand how the cabin id is defined. We opt for the second option.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Feature inspection
</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Cabin</span><span class="sh">'</span><span class="p">].</span><span class="nf">sort_values</span><span class="p">().</span><span class="nf">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>583     A10
1099    A11
475     A14
556     A16
1222    A18
Name: Cabin, dtype: object
</code></pre></div></div>

<p>By doing some research on the ship, the Cabin value contains the following information:</p>
<ol>
  <li>One letter standing for the boat deck</li>
  <li>One number standing for the cabin number</li>
</ol>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/Titanic_cutaway_diagram.png" style="width: 400px;" />  
</figure>
<p>source: <a href="https://en.wikipedia.org/wiki/First_class_facilities_of_the_RMS_Titanic?oldformat=true">Wikipedia</a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Extract deck name from cabine feature (replace with "M" (missing) if Cabin is null)
</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Cabin</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">if</span> <span class="n">pd</span><span class="p">.</span><span class="nf">notnull</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">else</span> <span class="sh">"</span><span class="s">M</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_plot</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">]).</span><span class="nf">size</span><span class="p">().</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">pivot</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">,</span> <span class="n">values</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">df_plot</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th>Pclass</th>
      <th>1</th>
      <th>2</th>
      <th>3</th>
    </tr>
    <tr>
      <th>Deck</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>A</th>
      <td>22.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>B</th>
      <td>65.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>C</th>
      <td>94.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>D</th>
      <td>40.0</td>
      <td>6.0</td>
      <td>0.0</td>
    </tr>
    <tr>
      <th>E</th>
      <td>34.0</td>
      <td>4.0</td>
      <td>3.0</td>
    </tr>
    <tr>
      <th>F</th>
      <td>0.0</td>
      <td>13.0</td>
      <td>8.0</td>
    </tr>
    <tr>
      <th>G</th>
      <td>0.0</td>
      <td>0.0</td>
      <td>5.0</td>
    </tr>
    <tr>
      <th>M</th>
      <td>67.0</td>
      <td>254.0</td>
      <td>693.0</td>
    </tr>
    <tr>
      <th>T</th>
      <td>1.0</td>
      <td>0.0</td>
      <td>0.0</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_plot</span> <span class="o">=</span> <span class="n">df_plot</span><span class="p">.</span><span class="nf">div</span><span class="p">(</span><span class="n">df_plot</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="c1">#ax = sns.countplot(x='Deck', data=df_all, hue='Pclass')
</span><span class="n">df_plot</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="sh">'</span><span class="s">bar</span><span class="sh">'</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Class Distribution per Decks</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Fraction of deck</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_60_0.png" />
</figure>

<p>The following observations can be made from the above plot:</p>
<ol>
  <li>Decks A, B, C are dedicated to the 1st class</li>
  <li>Decks D and E are mostly assigned to the 1st class</li>
  <li>Deck F is split for class 2 and 3</li>
  <li>Deck G is for the first class only</li>
  <li>Only one passenger is assigned to Deck T, this must be a mistake.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># move T Deck passenger to Deck A
</span><span class="n">idx</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="sh">'</span><span class="s">T</span><span class="sh">'</span><span class="p">].</span><span class="n">index</span>
<span class="n">df_all</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span> <span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">A</span><span class="sh">'</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_plot</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">divide_df</span><span class="p">(</span><span class="n">df_all</span><span class="p">)</span>
<span class="n">df_plot</span> <span class="o">=</span> <span class="n">df_plot</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]).</span><span class="nf">size</span><span class="p">().</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">pivot</span><span class="p">(</span>
    <span class="n">columns</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">).</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_plot</span> <span class="o">=</span> <span class="n">df_plot</span><span class="p">.</span><span class="nf">div</span><span class="p">(</span><span class="n">df_plot</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="c1">#ax = sns.countplot(x='Deck', data=df_all, hue='Pclass')
</span><span class="n">df_plot</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="sh">'</span><span class="s">bar</span><span class="sh">'</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Survival Rate per Decks</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Survival Rate</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_64_0.png" />
</figure>

<p>We can now group decks based on the survival rate and the class distribution.</p>

<p>We group:</p>
<ul>
  <li>A, B, C since they exclusively contain 1st class passengers.</li>
  <li>D and E as they mostly contain 1st class passengers.</li>
  <li>F and G as they contain 2nd and 3rd class while having as similar survival rate.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">].</span><span class="nf">replace</span><span class="p">([</span><span class="sh">'</span><span class="s">A</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">B</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">C</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">ABC</span><span class="sh">'</span><span class="p">)</span>
<span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">].</span><span class="nf">replace</span><span class="p">([</span><span class="sh">'</span><span class="s">D</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">E</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">DE</span><span class="sh">'</span><span class="p">)</span>
<span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">].</span><span class="nf">replace</span><span class="p">([</span><span class="sh">'</span><span class="s">F</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">G</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">FG</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># drop cabin
</span><span class="n">df_all</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">Cabin</span><span class="sh">'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>At this point, we have filled all the missing values.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">,</span> <span class="n">test</span> <span class="o">=</span> <span class="nf">divide_df</span><span class="p">(</span><span class="n">df_all</span><span class="p">)</span>
</code></pre></div></div>

<hr />
<p><a id="Section_4"></a></p>
<h2 id="4-data-visualization-and-feature-exploration">4. Data Visualization and Feature Exploration</h2>

<p>Before we implement the full model, it is important to inspect the data and answers a few basic questions. This will help understanding how the data is distributed but also will provide useful input used in our models.</p>

<p>Based on the famous rule <em>“Women and children first”</em>, we expect the gender and age to be strongly correlated with the survival rate.</p>

<p>Questions:</p>

<ol>
  <li>Gender: Is the survival rate higher for females?</li>
  <li>Age: Is the survival rate higher for young passengers?</li>
  <li>Pclass &amp; Fare: Is the survival rate higher amongst wealthy passengers?</li>
  <li>SibSp &amp; Parch: Is the survival rate for family is higher than the one for single passenger?</li>
</ol>

<h3 id="41-gender">4.1 Gender</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the box plot
</span><span class="n">pal</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">female</span><span class="sh">'</span><span class="p">:</span><span class="sh">"</span><span class="s">salmon</span><span class="sh">"</span><span class="p">,</span><span class="sh">'</span><span class="s">male</span><span class="sh">'</span><span class="p">:</span><span class="sh">"</span><span class="s">skyblue</span><span class="sh">"</span><span class="p">}</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Sex</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Survived</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span> <span class="n">palette</span> <span class="o">=</span> <span class="n">pal</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Impact of gender on the survival rate</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Survival rate</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Sex</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_72_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Male mean survival rate = </span><span class="se">\t</span><span class="s"> {:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span><span class="sh">'</span><span class="s">male</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Female mean survival rate = </span><span class="se">\t</span><span class="s"> {:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">]</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">male</span><span class="sh">'</span><span class="p">][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Male mean survival rate = 	 18.89%
Female mean survival rate = 	 74.20%
</code></pre></div></div>

<p><strong>Comment</strong> <br />
Based on the boxplot, the gender appears to be a critical feature when it comes to determining the faith of a passenger. Indeed, females seem to have on average a much higher survival rate.</p>

<p><a id="Section_42"></a></p>
<h3 id="42-age">4.2 Age</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot kernel density plot
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">kdeplot</span><span class="p">(</span><span class="n">train</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]</span><span class="o">==</span><span class="mi">1</span><span class="p">),</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">],</span><span class="n">shade</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">);</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">kdeplot</span><span class="p">(</span><span class="n">train</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]</span><span class="o">==</span><span class="mi">0</span><span class="p">),</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">],</span><span class="n">shade</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Not Survived</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency</span><span class="sh">'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_76_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Toddler survival rate = </span><span class="se">\t</span><span class="s">{:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">2</span><span class="p">][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Children survival rate = </span><span class="se">\t</span><span class="s">{:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">12</span><span class="p">)][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Teenager survival rate = </span><span class="se">\t</span><span class="s">{:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">12</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">18</span><span class="p">)][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Young Adult survival rate = </span><span class="se">\t</span><span class="s">{:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">34</span><span class="p">)][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Adult survival rate = </span><span class="se">\t\t</span><span class="s">{:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">34</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">50</span><span class="p">)][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">pre-senior survival rate = </span><span class="se">\t</span><span class="s">{:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">50</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">70</span><span class="p">)][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">senior survival rate = </span><span class="se">\t\t</span><span class="s">{:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">70</span><span class="p">][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Toddler survival rate = 	62.50%
Children survival rate = 	55.56%
Teenager survival rate = 	42.86%
Young Adult survival rate = 	33.74%
Adult survival rate = 		42.57%
pre-senior survival rate = 	35.59%
senior survival rate = 		20.00%
</code></pre></div></div>

<p><strong>Comment</strong> <br />
Based on the distribution plot, the age also appears to be a critical feature. Young children have a much higher survival rate on average than the rest of the passenger. The survival rate tends to decrease with the age.</p>

<p><a id="Section_43"></a></p>
<h3 id="43-pclass-and-fare">4.3 Pclass and Fare</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the survival rate per class
</span><span class="n">pal</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="sh">"</span><span class="s">gold</span><span class="sh">"</span><span class="p">,</span><span class="mi">2</span><span class="p">:</span><span class="sh">"</span><span class="s">silver</span><span class="sh">"</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="sh">'</span><span class="s">sandybrown</span><span class="sh">'</span><span class="p">}</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Pclass</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Survived</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span> <span class="n">palette</span> <span class="o">=</span> <span class="n">pal</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Impact of class on the survival rate</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Survival rate</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Class</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_80_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Upper class survival rate =</span><span class="se">\t</span><span class="s">{:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Middle class survival rate =</span><span class="se">\t</span><span class="s">{:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Lower class survival rate =</span><span class="se">\t</span><span class="s">{:.2f}%</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span><span class="p">][</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Upper class survival rate =	62.96%
Middle class survival rate =	47.28%
Lower class survival rate =	24.24%
</code></pre></div></div>

<p><strong>Comment</strong> <br />
The above plot confirms our assumption: upper class passengers had a much higher survival rate.</p>

<p>Before we look at the impact of the fare on the survival rate, we need to verify how the class is correlated to the fare.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the survival rate per class
</span><span class="n">pal</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span><span class="sh">"</span><span class="s">gold</span><span class="sh">"</span><span class="p">,</span><span class="mi">2</span><span class="p">:</span><span class="sh">"</span><span class="s">silver</span><span class="sh">"</span><span class="p">,</span><span class="mi">3</span><span class="p">:</span><span class="sh">'</span><span class="s">sandybrown</span><span class="sh">'</span><span class="p">}</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">6</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Pclass</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Fare</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span> <span class="n">palette</span> <span class="o">=</span> <span class="n">pal</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="s">Impact of the passenger class on the fare</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Fare</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Pclass</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_83_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Median fare:</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">1st class =</span><span class="se">\t</span><span class="s">$${:.2f}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">][</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">].</span><span class="nf">median</span><span class="p">()))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">2nd class =</span><span class="se">\t</span><span class="s">$${:.2f}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">2</span><span class="p">][</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">].</span><span class="nf">median</span><span class="p">()))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">3nd class =</span><span class="se">\t</span><span class="s">$${:.2f}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">3</span><span class="p">][</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">].</span><span class="nf">median</span><span class="p">()))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Median fare:
1st class =	$$60.29
2nd class =	$$14.25
3nd class =	$$8.05
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Box plot
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">,</span> <span class="n">hue</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">train</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Pclass vs Fare Survival Comparison</span><span class="sh">'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">300</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_85_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">),)</span>
<span class="n">ax</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">]</span> <span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">,</span><span class="n">kde</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">bins</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Count</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Fare distribution</span><span class="sh">'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticks</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">600</span><span class="p">,</span><span class="mi">25</span><span class="p">));</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_86_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Kernel Density Plot
</span><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">train</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">),</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">]</span> <span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Not Survived</span><span class="sh">'</span><span class="p">,</span><span class="n">kde</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">bins</span><span class="o">=</span><span class="mi">21</span><span class="p">)</span>
<span class="n">ax</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">train</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">),</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">]</span> <span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span><span class="n">kde</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">bins</span><span class="o">=</span><span class="mi">41</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Not Survived</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Fare</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Frequency of Passenger Survived</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Fare Distribution Survived vs Non Survived</span><span class="sh">'</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_87_0.png" />
</figure>

<p><strong>Comment</strong> <br />
As expected. the survival rate increases with the fare price. Based on the above plot, it appears that the survival rate is larger than 50% for fares higher that $$150.</p>

<p><a id="Section_44"></a></p>
<h3 id="44-sibsp--parch">4.4 SibSp &amp; Parch</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[[</span><span class="sh">'</span><span class="s">SibSp</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]].</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">SibSp</span><span class="sh">'</span><span class="p">],</span><span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">mean</span><span class="p">().</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span><span class="n">ascending</span> <span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>SibSp</th>
      <th>Survived</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0.535885</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>0.464286</td>
    </tr>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0.345395</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>0.250000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>0.166667</td>
    </tr>
    <tr>
      <th>5</th>
      <td>5</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>6</th>
      <td>8</td>
      <td>0.000000</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">SibSp</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">Survived</span><span class="sh">"</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_91_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[[</span><span class="sh">'</span><span class="s">Parch</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]].</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Parch</span><span class="sh">'</span><span class="p">],</span><span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">mean</span><span class="p">().</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span><span class="n">ascending</span> <span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Parch</th>
      <th>Survived</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>0.600000</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>0.550847</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>0.500000</td>
    </tr>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>0.343658</td>
    </tr>
    <tr>
      <th>5</th>
      <td>5</td>
      <td>0.200000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>6</th>
      <td>6</td>
      <td>0.000000</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">Parch</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">Survived</span><span class="sh">"</span><span class="p">,</span><span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_93_0.png" />
</figure>

<p><strong>Comment</strong> <br />
Passenger traveling with large family decreased the survival rate.</p>

<p><a id="Section_45"></a></p>
<h3 id="45-embarked">4.5 Embarked</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[[</span><span class="sh">'</span><span class="s">Embarked</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]].</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Embarked</span><span class="sh">'</span><span class="p">],</span><span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">mean</span><span class="p">().</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span><span class="n">ascending</span> <span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Embarked</th>
      <th>Survived</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>C</td>
      <td>0.553571</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Q</td>
      <td>0.389610</td>
    </tr>
    <tr>
      <th>2</th>
      <td>S</td>
      <td>0.339009</td>
    </tr>
  </tbody>
</table>
</div>

<hr />
<p><a id="Section_5"></a></p>
<h2 id="5-statistical-study">5. Statistical Study</h2>

<p>In this section, we will inspect the data and quantify the observations that result from the data visualization.</p>

<p><a id="Section_51"></a></p>
<h3 id="51-main-features">5.1 Main Features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Turning the Sex feature into a boolean classifier
</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="sh">"</span><span class="s">female</span><span class="sh">"</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">test</span><span class="p">[</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">test</span><span class="p">[</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">0</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="sh">"</span><span class="s">female</span><span class="sh">"</span> <span class="k">else</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">.</span><span class="nf">describe</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Age</th>
      <th>Fare</th>
      <th>Parch</th>
      <th>PassengerId</th>
      <th>Pclass</th>
      <th>Sex</th>
      <th>SibSp</th>
      <th>Survived</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
      <td>891.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>29.188182</td>
      <td>32.204208</td>
      <td>0.381594</td>
      <td>446.000000</td>
      <td>2.308642</td>
      <td>0.647587</td>
      <td>0.523008</td>
      <td>0.383838</td>
    </tr>
    <tr>
      <th>std</th>
      <td>13.337887</td>
      <td>49.693429</td>
      <td>0.806057</td>
      <td>257.353842</td>
      <td>0.836071</td>
      <td>0.477990</td>
      <td>1.102743</td>
      <td>0.486592</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.420000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>22.000000</td>
      <td>7.910400</td>
      <td>0.000000</td>
      <td>223.500000</td>
      <td>2.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>26.000000</td>
      <td>14.454200</td>
      <td>0.000000</td>
      <td>446.000000</td>
      <td>3.000000</td>
      <td>1.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>36.000000</td>
      <td>31.000000</td>
      <td>0.000000</td>
      <td>668.500000</td>
      <td>3.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>80.000000</td>
      <td>512.329200</td>
      <td>6.000000</td>
      <td>891.000000</td>
      <td>3.000000</td>
      <td>1.000000</td>
      <td>8.000000</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
</div>

<p><strong>Comment</strong> <br />
From the statistical data above, it appears that only 38% of the passengers survived.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[[</span><span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]].</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">"</span><span class="s">Sex</span><span class="sh">"</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Survived</th>
    </tr>
    <tr>
      <th>Sex</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0.742038</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0.188908</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]].</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">"</span><span class="s">Pclass</span><span class="sh">"</span><span class="p">).</span><span class="nf">mean</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Survived</th>
    </tr>
    <tr>
      <th>Pclass</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>0.629630</td>
    </tr>
    <tr>
      <th>2</th>
      <td>0.472826</td>
    </tr>
    <tr>
      <th>3</th>
      <td>0.242363</td>
    </tr>
  </tbody>
</table>
</div>

<p><a id="Section_52"></a></p>
<h3 id="52-correlation-study">5.2 Correlation Study</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Feature correlation
</span><span class="n">train</span><span class="p">.</span><span class="nf">corr</span><span class="p">()[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="nf">sort_values</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sex           -0.543351
Pclass        -0.338481
Age           -0.058635
SibSp         -0.035322
PassengerId   -0.005007
Parch          0.081629
Fare           0.257307
Survived       1.000000
Name: Survived, dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compute the correlation matrix
</span><span class="n">corr</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">corr</span><span class="p">()</span>

<span class="c1"># Generate a mask for the upper triangle
</span><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">bool</span><span class="p">)</span>
<span class="n">mask</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">triu_indices_from</span><span class="p">(</span><span class="n">mask</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">True</span>

<span class="c1"># Set up the matplotlib figure
</span><span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>

<span class="c1"># Generate a custom diverging colormap
</span><span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">220</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">as_cmap</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Draw the heatmap with the mask and correct aspect ratio
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span><span class="n">vmin</span><span class="o">=-</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">linewidths</span><span class="o">=</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="n">cbar_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">shrink</span><span class="sh">"</span><span class="p">:</span> <span class="p">.</span><span class="mi">5</span><span class="p">})</span>

<span class="n">ylabels</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="nf">get_text</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="nf">get_yticklabels</span><span class="p">()]</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">yticks</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">ylabels</span><span class="p">))</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="n">ylabels</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="sh">"</span><span class="s">10</span><span class="sh">"</span><span class="p">,</span> <span class="n">va</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_107_0.png" />
</figure>

<p><strong>Comment</strong></p>

<p>Strong positive correlations:</p>
<ul>
  <li>Parch and SibSp (0.41)</li>
  <li>Fare and Survived (0.26)</li>
  <li>Parch and Fare (0.22)</li>
</ul>

<p>Strong negative correlation</p>
<ul>
  <li>Fare and Pclass (-0.42)</li>
  <li>Pclass and Age (-0.42)</li>
  <li>Pclass and Survived (-0.34)</li>
</ul>

<hr />
<p><a id="Section_6"></a></p>
<h2 id="6-feature-preparation">6. Feature Preparation</h2>

<p>Based on the knowledge gathered, we can now create new features that will help improve the model accuracy.</p>

<p><a id="Section_61"></a></p>
<h3 id="61-passenger-title">6.1 Passenger Title</h3>

<p>Upon inspection of the Name feature, it appear that a title is assigned to each passenger. We extract this feature and store it in the dataset.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># extrace new feature using regular expression
</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Name</span><span class="sh">'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="nf">extract</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s"> ([A-Za-z]+)\.</span><span class="sh">'</span><span class="p">,</span><span class="n">expand</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Is_Married</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Is_Married</span><span class="sh">'</span><span class="p">].</span><span class="n">loc</span><span class="p">[</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">]</span><span class="o">==</span><span class="sh">'</span><span class="s">Mrs</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="n">index</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="n">values</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Title Distribution</span><span class="sh">"</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_113_0.png" />
</figure>

<p>There are four principle titles. The rest consists of mostly single values. We can see if the survival rate varies between titles.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_plot</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">divide_df</span><span class="p">(</span><span class="n">df_all</span><span class="p">)</span>
<span class="n">df_plot</span> <span class="o">=</span> <span class="n">df_plot</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]).</span><span class="nf">size</span><span class="p">().</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">pivot</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">).</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_plot</span> <span class="o">=</span> <span class="n">df_plot</span><span class="p">.</span><span class="nf">div</span><span class="p">(</span><span class="n">df_plot</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="c1">#ax = sns.countplot(x='Deck', data=df_all, hue='Pclass')
</span><span class="n">df_plot</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="sh">'</span><span class="s">bar</span><span class="sh">'</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">ax</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Survival Rate per Decks</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Survival Rate</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Not Survived</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="sh">"</span><span class="s">upper right</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_116_0.png" />
</figure>

<p>Based on the results shown above, it appears that different title are used to describe the same status. For instance Miss, Mlle, and Ms are used to describe Miss. We standardize the titles using a custom function.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">].</span><span class="nf">replace</span><span class="p">(</span>
    <span class="p">[</span><span class="sh">'</span><span class="s">Miss</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Mrs</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Ms</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Mlle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Lady</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Mme</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Countess</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Dona</span><span class="sh">'</span><span class="p">],</span><span class="sh">'</span><span class="s">Miss/Mrs/Ms</span><span class="sh">'</span><span class="p">)</span>
<span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">].</span><span class="nf">replace</span><span class="p">(</span>
    <span class="p">[</span><span class="sh">'</span><span class="s">Dr</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Col</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Major</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Jonkheer</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Capt</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Sir</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Don</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Rev</span><span class="sh">'</span><span class="p">],</span> <span class="sh">'</span><span class="s">Rare</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_plot</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="nf">divide_df</span><span class="p">(</span><span class="n">df_all</span><span class="p">)</span>
<span class="n">df_plot</span> <span class="o">=</span> <span class="n">df_plot</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]).</span><span class="nf">size</span><span class="p">().</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">pivot</span><span class="p">(</span>
    <span class="n">columns</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">).</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_plot</span> <span class="o">=</span> <span class="n">df_plot</span><span class="p">.</span><span class="nf">div</span><span class="p">(</span><span class="n">df_plot</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">df_plot</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="sh">'</span><span class="s">bar</span><span class="sh">'</span><span class="p">,</span> <span class="n">stacked</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">])</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Survival Rate per Decks</span><span class="sh">'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Survival Rate</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Not Survived</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="sh">"</span><span class="s">upper right</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="n">index</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="n">values</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Title Distribution</span><span class="sh">"</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_120_0.png" />
</figure>

<p>As displayed above the passenger title influences the survival rate.</p>

<p><a id="Section_62"></a></p>
<h3 id="62-family-size">6.2 Family Size</h3>

<p>We can create a new feature used to calculate the size of the family:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Size</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Parch</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">SibSp</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Size</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="n">index</span><span class="p">,</span>
            <span class="n">y</span><span class="o">=</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Size</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">(),</span>
            <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Family Size Distribution</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Family_Size</span><span class="sh">'</span><span class="p">,</span>
              <span class="n">hue</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span>
              <span class="n">data</span><span class="o">=</span><span class="n">df_all</span><span class="p">,</span>
              <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
              <span class="n">palette</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Not Survived</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">upper right</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Survival Rate based on Family Size</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Text(0.5, 1.0, 'Survival Rate based on Family Size')
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_125_1.png" />
</figure>

<p>As shown above, single individual tend to die more than families of 2, 3, and 4 individuals. However, larger families suffer more casualties.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># group family sizes
</span><span class="n">family_map</span> <span class="o">=</span> <span class="p">{</span>
    <span class="mi">1</span><span class="p">:</span> <span class="sh">'</span><span class="s">Alone</span><span class="sh">'</span><span class="p">,</span>
    <span class="mi">2</span><span class="p">:</span> <span class="sh">'</span><span class="s">Small</span><span class="sh">'</span><span class="p">,</span>
    <span class="mi">3</span><span class="p">:</span> <span class="sh">'</span><span class="s">Small</span><span class="sh">'</span><span class="p">,</span>
    <span class="mi">4</span><span class="p">:</span> <span class="sh">'</span><span class="s">Small</span><span class="sh">'</span><span class="p">,</span>
    <span class="mi">5</span><span class="p">:</span> <span class="sh">'</span><span class="s">Medium</span><span class="sh">'</span><span class="p">,</span>
    <span class="mi">6</span><span class="p">:</span> <span class="sh">'</span><span class="s">Medium</span><span class="sh">'</span><span class="p">,</span>
    <span class="mi">7</span><span class="p">:</span> <span class="sh">'</span><span class="s">Large</span><span class="sh">'</span><span class="p">,</span>
    <span class="mi">8</span><span class="p">:</span> <span class="sh">'</span><span class="s">Large</span><span class="sh">'</span><span class="p">,</span>
    <span class="mi">11</span><span class="p">:</span> <span class="sh">'</span><span class="s">Large</span><span class="sh">'</span>
<span class="p">}</span>

<span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Size_Grp</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Size</span><span class="sh">'</span><span class="p">].</span><span class="nf">map</span><span class="p">(</span><span class="n">family_map</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Size_Grp</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="n">index</span><span class="p">,</span>
            <span class="n">y</span><span class="o">=</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Size_Grp</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">(),</span>
            <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Family Size Distribution</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Family_Size_Grp</span><span class="sh">'</span><span class="p">,</span> <span class="n">hue</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df_all</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">palette</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Not Survived</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">upper right</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Survival Rate based on Family Size</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_128_0.png" />
</figure>

<p>Based on our observations, we have grouped the family sizes into four groups. However, this new feature does not account for people not related but traveling in groups.</p>

<p><a id="Section_63"></a></p>
<h3 id="63-tickets">6.3 Tickets</h3>

<p>We have not used the ticket id yet, If we simply try to group them, maybe we can obtain something interesting.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">).</span><span class="nf">size</span><span class="p">().</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ticket
CA. 2343        11
1601             8
CA 2144          8
S.O.C. 14879     7
PC 17608         7
                ..
349248           1
349247           1
349246           1
349245           1
345769           1
Length: 929, dtype: int64
</code></pre></div></div>

<p>Indeed, the ticket seemed to have been assigned to groups of people rather than being unique. Let’s replace the actual tickets id as they do not see to contain a pattern.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Frequency</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">].</span><span class="nf">transform</span><span class="p">(</span><span class="sh">'</span><span class="s">count</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>

<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Frequency</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="n">index</span><span class="p">,</span>
            <span class="n">y</span><span class="o">=</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Frequency</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">(),</span>
            <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Ticket Frequency Distribution</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Ticket_Frequency</span><span class="sh">'</span><span class="p">,</span> <span class="n">hue</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df_all</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">palette</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Not Survived</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">upper right</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Survival Rate based on  Ticket Frequency</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_135_0.png" />
</figure>

<p>Similar to the family size, single individual tend to die more than families of 2, 3, and 4 individuals. However, larger families suffer more casualties.</p>

<p><a id="Section_64"></a></p>
<h3 id="64-family-survival-rates">6.4 Family Survival Rates</h3>

<p>Based on the passenger last names, we can construct statistics related to individual families.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Last_Name</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Name</span><span class="sh">'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="nf">extract</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">^([a-zA-Z\s\-\']+)\,*</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>If we want to compute the survival rate per family, we need to restrain our dataset to the training set since the test set does not contained the target feature.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">,</span> <span class="n">df_test</span> <span class="o">=</span> <span class="nf">divide_df</span><span class="p">(</span><span class="n">df_all</span><span class="p">)</span>
</code></pre></div></div>

<p>In order to generate our new features, we need to perform the following steps:</p>
<ol>
  <li>Find last names present in both the training and test sets.</li>
  <li>Compute median survival rate for each ticket and family.</li>
  <li>Save survival rates for families present in both test with more that one member. Same for tickets.</li>
  <li>Combine ticket and family survival rates</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 1. families and tickets occuring in both sets
</span><span class="n">non_unique_families</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Last_Name</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">Last_Name</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()),</span> <span class="sh">'</span><span class="s">Last_Name</span><span class="sh">'</span><span class="p">]</span>
<span class="n">non_unique_tickets</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()),</span> <span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 2. compute median survival rate and size for each ticket and family
</span><span class="n">df_family</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">Last_Name</span><span class="sh">'</span><span class="p">).</span><span class="nf">median</span><span class="p">()[[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Family_Size</span><span class="sh">'</span><span class="p">]]</span>
<span class="n">df_ticket</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">).</span><span class="nf">median</span><span class="p">()[[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Ticket_Frequency</span><span class="sh">'</span><span class="p">]]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 3. filter families with more that one member and present in both the train and test sets
</span><span class="n">df_family</span> <span class="o">=</span> <span class="n">df_family</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_family</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">isin</span><span class="p">(</span><span class="n">non_unique_families</span><span class="p">))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_family</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Size</span><span class="sh">'</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)][[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]]</span>
<span class="n">df_ticket</span> <span class="o">=</span> <span class="n">df_ticket</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">df_ticket</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">isin</span><span class="p">(</span><span class="n">non_unique_tickets</span><span class="p">))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df_ticket</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Frequency</span><span class="sh">'</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">1</span><span class="p">)][[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 3. compute mean survival rate
</span><span class="n">mean_survival_rate</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 3.
# assign family survival rate to each passenger, same for tickets
</span><span class="n">df_train</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">right</span><span class="o">=</span><span class="n">df_family</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="sh">'</span><span class="s">Last_Name</span><span class="sh">'</span><span class="p">,</span><span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">suffixes</span><span class="o">=</span><span class="p">(</span><span class="sh">''</span><span class="p">,</span> <span class="sh">'</span><span class="s">_y</span><span class="sh">'</span><span class="p">))</span>
<span class="n">df_train</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">Survived_y</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Family_Survival</span><span class="sh">"</span><span class="p">})</span>
<span class="n">df_train</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">right</span><span class="o">=</span><span class="n">df_ticket</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">,</span><span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">suffixes</span><span class="o">=</span><span class="p">(</span><span class="sh">''</span><span class="p">,</span> <span class="sh">'</span><span class="s">_y</span><span class="sh">'</span><span class="p">))</span>
<span class="n">df_train</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">Survived_y</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Ticket_Survival</span><span class="sh">"</span><span class="p">})</span>

<span class="n">df_test</span> <span class="o">=</span> <span class="n">df_test</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">right</span><span class="o">=</span><span class="n">df_family</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="sh">'</span><span class="s">Last_Name</span><span class="sh">'</span><span class="p">,</span> <span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">suffixes</span><span class="o">=</span><span class="p">(</span><span class="sh">''</span><span class="p">,</span> <span class="sh">'</span><span class="s">_y</span><span class="sh">'</span><span class="p">))</span>
<span class="n">df_test</span> <span class="o">=</span> <span class="n">df_test</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">Survived</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Family_Survival</span><span class="sh">"</span><span class="p">})</span>
<span class="n">df_test</span> <span class="o">=</span> <span class="n">df_test</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">right</span><span class="o">=</span><span class="n">df_ticket</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">,</span> <span class="n">right_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">suffixes</span><span class="o">=</span><span class="p">(</span><span class="sh">''</span><span class="p">,</span> <span class="sh">'</span><span class="s">_y</span><span class="sh">'</span><span class="p">))</span>
<span class="n">df_test</span> <span class="o">=</span> <span class="n">df_test</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">Survived</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">Ticket_Survival</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># new feature to determine if a family has a family-based survival rate, same for tickets
</span><span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Has_Family_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="o">~</span><span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Survival</span><span class="sh">'</span><span class="p">].</span><span class="nf">isnull</span><span class="p">()).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
<span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">Has_Family_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="o">~</span><span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Survival</span><span class="sh">'</span><span class="p">].</span><span class="nf">isnull</span><span class="p">()).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
<span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Has_Ticket_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="o">~</span><span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Survival</span><span class="sh">'</span><span class="p">].</span><span class="nf">isnull</span><span class="p">()).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
<span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">Has_Ticket_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="o">~</span><span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Survival</span><span class="sh">'</span><span class="p">].</span><span class="nf">isnull</span><span class="p">()).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
     
<span class="c1"># fill null with mean survival rate, same for tickets
</span><span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Survival</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">mean_survival_rate</span><span class="p">)</span>
<span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Survival</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">mean_survival_rate</span><span class="p">)</span>
<span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Survival</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">mean_survival_rate</span><span class="p">)</span>
<span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Survival</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">mean_survival_rate</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 4. Combine survival rates (Family and Ticket)
</span><span class="k">for</span> <span class="n">df</span> <span class="ow">in</span> <span class="p">[</span><span class="n">df_train</span><span class="p">,</span> <span class="n">df_test</span><span class="p">]:</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Survival_Rate</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Ticket_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Family_Survival</span><span class="sh">'</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Has_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Has_Ticket_Survival</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Has_Family_Survival</span><span class="sh">'</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span>  
</code></pre></div></div>

<p><a id="Section_65"></a></p>
<h3 id="65-fare-binning">6.5 Fare Binning</h3>

<p>In order to improve our predictions on unseen data, it is common to bin continuous features. Therefore, we bin the fare using quantiles. We select a number of bins with the intent to create bins as pure as possible.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span> <span class="o">=</span> <span class="nf">concat_df</span><span class="p">(</span><span class="n">df_train</span><span class="p">,</span> <span class="n">df_test</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Fare_Bin</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">qcut</span><span class="p">(</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">],</span> <span class="mi">13</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Fare_Bin</span><span class="sh">'</span><span class="p">,</span> <span class="n">hue</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df_all</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Fare Bins</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Passenger Count</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Not Survived</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">upper right</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Count of Survival in {} Feature</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">'</span><span class="s">Fare Bin</span><span class="sh">'</span><span class="p">),</span> <span class="n">size</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_153_0.png" />
</figure>

<p><a id="Section_66"></a></p>
<h3 id="66-age-binning">6.6 Age Binning</h3>

<p>Similar to the Fare feature, we bin the age feature.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Age_Bin</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">qcut</span><span class="p">(</span><span class="n">df_all</span><span class="p">[</span><span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">],</span> <span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">countplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Age_Bin</span><span class="sh">'</span><span class="p">,</span> <span class="n">hue</span><span class="o">=</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">df_all</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="n">n</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Age Bins</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Passenger Count</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Not Survived</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">],</span> <span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">upper right</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Count of Survival in {} Feature</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">'</span><span class="s">Age Bin</span><span class="sh">'</span><span class="p">),</span> <span class="n">size</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_157_0.png" />
</figure>

<p><a id="Section_67"></a></p>
<h3 id="67-encoding">6.7 Encoding</h3>
<p>In order for our model to interpret categorical and non-numerical features, we need to generate new feature for each possible label.</p>

<p>The following features need to be encoded:</p>
<ol>
  <li>Embarked</li>
  <li>Sex</li>
  <li>Deck</li>
  <li>Family_Size_Grp</li>
  <li>Age_Bin</li>
  <li>Fare_Bin</li>
  <li>Title</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span><span class="p">,</span> <span class="n">df_test</span> <span class="o">=</span> <span class="nf">divide_df</span><span class="p">(</span><span class="n">df_all</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># features to be encoded
</span><span class="n">encoding</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Embarked</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Family_Size_Grp</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Age_Bin</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Fare_Bin</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">encoding</span><span class="p">:</span>
    <span class="n">encoder</span> <span class="o">=</span> <span class="nc">LabelEncoder</span><span class="p">()</span>
    <span class="n">df_train</span><span class="p">[</span><span class="n">feature</span><span class="p">]</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">df_train</span><span class="p">[</span><span class="n">feature</span><span class="p">])</span>
    <span class="n">df_test</span><span class="p">[</span><span class="n">feature</span><span class="p">]</span> <span class="o">=</span> <span class="n">encoder</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">df_test</span><span class="p">[</span><span class="n">feature</span><span class="p">])</span>
</code></pre></div></div>

<p>Once the features have been encoded, we can create dummies.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dummies</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Pclass</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Sex</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Deck</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Embarked</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Family_Size_Grp</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_train</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">get_dummies</span><span class="p">(</span><span class="n">df_train</span><span class="p">,</span> <span class="n">prefix_sep</span><span class="o">=</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">dummies</span><span class="p">,</span> <span class="n">drop_first</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">df_test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">get_dummies</span><span class="p">(</span><span class="n">df_test</span><span class="p">,</span> <span class="n">prefix_sep</span><span class="o">=</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="n">dummies</span><span class="p">,</span> <span class="n">drop_first</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<p>Finally, we can drop several columns that we do not need.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span> <span class="o">=</span> <span class="nf">concat_df</span><span class="p">(</span><span class="n">df_train</span><span class="p">,</span> <span class="n">df_test</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">drop_columns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Family_Size</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Parch</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Last_Name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">PassengerId</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">SibSp</span><span class="sh">'</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Ticket_Survival</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Family_Survival</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Has_Family_Survival</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Has_Ticket_Survival</span><span class="sh">'</span><span class="p">,</span>
                <span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">]</span>

<span class="n">drop_columns_test</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Family_Size</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Parch</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Last_Name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">PassengerId</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">SibSp</span><span class="sh">'</span><span class="p">,</span>
                     <span class="sh">'</span><span class="s">Ticket</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Ticket_Survival</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Family_Survival</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Has_Family_Survival</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Has_Ticket_Survival</span><span class="sh">'</span><span class="p">,</span>
                     <span class="sh">'</span><span class="s">Age</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Fare</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span> <span class="o">=</span> <span class="n">df_all</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">drop_columns</span><span class="p">)</span>
<span class="n">df_all</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Age_Bin</th>
      <th>Deck_0</th>
      <th>Deck_1</th>
      <th>Deck_2</th>
      <th>Deck_3</th>
      <th>Embarked_0</th>
      <th>Embarked_1</th>
      <th>Embarked_2</th>
      <th>Family_Size_Grp_0</th>
      <th>Family_Size_Grp_1</th>
      <th>...</th>
      <th>Pclass_2</th>
      <th>Pclass_3</th>
      <th>Sex_0</th>
      <th>Sex_1</th>
      <th>Survival_Rate</th>
      <th>Ticket_Frequency</th>
      <th>Title_0</th>
      <th>Title_1</th>
      <th>Title_2</th>
      <th>Title_3</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>0.383838</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>7</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>1.000000</td>
      <td>2</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>4</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>0.383838</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>7</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0.383838</td>
      <td>2</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>7</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>1</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>0.383838</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 26 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_all</span><span class="p">.</span><span class="n">columns</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Index(['Age_Bin', 'Deck_0', 'Deck_1', 'Deck_2', 'Deck_3', 'Embarked_0',
       'Embarked_1', 'Embarked_2', 'Family_Size_Grp_0', 'Family_Size_Grp_1',
       'Family_Size_Grp_2', 'Family_Size_Grp_3', 'Fare_Bin', 'Has_Survival',
       'Is_Married', 'Pclass_1', 'Pclass_2', 'Pclass_3', 'Sex_0', 'Sex_1',
       'Survival_Rate', 'Ticket_Frequency', 'Title_0', 'Title_1', 'Title_2',
       'Title_3'],
      dtype='object')
</code></pre></div></div>

<hr />
<p><a id="Section_7"></a></p>
<h2 id="7-model-preparation">7. Model Preparation</h2>

<p>We will now prepare the data before creating a model. The preparation is divided into three steps:</p>
<ol>
  <li>Separate the dataframe into our input data and our output feature (X and y).</li>
  <li>Normalize the data</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train</span> <span class="o">=</span> <span class="nc">StandardScaler</span><span class="p">().</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">df_train</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">drop_columns</span><span class="p">))</span>
<span class="n">y_train</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="nc">StandardScaler</span><span class="p">().</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">df_test</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">drop_columns_test</span><span class="p">))</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">X_train shape: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">y_train shape: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">X_test shape: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>X_train shape: (891, 26)
y_train shape: (891,)
X_test shape: (418, 26)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># PCA
</span><span class="n">pca</span> <span class="o">=</span> <span class="nc">PCA</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">X_pca</span> <span class="o">=</span> <span class="n">pca</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">cumsum</span><span class="p">(</span><span class="n">pca</span><span class="p">.</span><span class="n">explained_variance_ratio_</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Component</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Percent of Explained Variance</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Cumulative Variance</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">pca</span><span class="p">.</span><span class="n">n_components_</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_174_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">16</span><span class="p">))</span>
<span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">220</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">as_cmap</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">cset</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span>
    <span class="n">pca</span><span class="p">.</span><span class="n">components_</span><span class="p">.</span><span class="n">T</span><span class="p">,</span>
    <span class="n">cmap</span> <span class="o">=</span> <span class="n">cmap</span><span class="p">,</span>
    <span class="n">vmin</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">ylabels</span> <span class="o">=</span> <span class="n">df_train</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">drop_columns</span><span class="p">).</span><span class="n">columns</span><span class="p">.</span><span class="n">values</span><span class="p">.</span><span class="nf">tolist</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_yticks</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">ylabels</span><span class="p">)))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_yticklabels</span><span class="p">(</span><span class="n">ylabels</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span><span class="nf">len</span><span class="p">(</span><span class="n">ylabels</span><span class="p">)</span><span class="o">-</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticks</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">pca</span><span class="p">.</span><span class="n">n_components_</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Principal Component</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Contribution</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Contribution of Features to Components</span><span class="sh">"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">colorbar</span><span class="p">(</span><span class="n">cset</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">shrink</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">();</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_175_0.png" />
</figure>

<hr />
<p><a id="Section_8"></a></p>
<h2 id="8-models">8. Models</h2>

<p>In this section, we will make predictions using the following models:</p>
<ul>
  <li>RandomForestClassifier</li>
  <li>ExtraTreesClassifier</li>
  <li>LogisticRegression</li>
  <li>GradientBoostingClassifier</li>
  <li>LinearDiscriminantAnalysis</li>
  <li>RidgeClassifier</li>
  <li>XGBClassifier</li>
  <li>MLPClassifier</li>
  <li>BaggingClassifier</li>
  <li>BernoulliNB</li>
  <li>ExtraTreeClassifier</li>
  <li>DecisionTreeClassifier</li>
  <li>LinearSVC</li>
  <li>AdaBoostClassifier</li>
  <li>SVC</li>
  <li>NuSVC</li>
  <li>SGDClassifier</li>
  <li>Perceptron</li>
  <li>GaussianProcessClassifier</li>
  <li>KNeighborsClassifier</li>
  <li>GaussianNB</li>
  <li>PassiveAggressiveClassifier</li>
  <li>QuadraticDiscriminantAnalysis</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Cross validate model with Kfold stratified cross val
</span><span class="n">kfold</span> <span class="o">=</span> <span class="nc">StratifiedKFold</span><span class="p">(</span><span class="n">n_splits</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">random_state</span> <span class="o">=</span> <span class="mi">42</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># classifiers
</span><span class="n">classifiers_list</span> <span class="o">=</span> <span class="p">[</span>
    <span class="c1">#Ensemble Methods
</span>    <span class="nc">AdaBoostClassifier</span><span class="p">(</span><span class="nc">AdaBoostClassifier</span><span class="p">(</span><span class="nc">DecisionTreeClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">)),</span>
    <span class="nc">BaggingClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    <span class="nc">ExtraTreesClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    <span class="nc">GradientBoostingClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    <span class="nc">RandomForestClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>

    <span class="c1">#Gaussian Processes
</span>    <span class="nc">GaussianProcessClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    
    <span class="c1">#GLM
</span>    <span class="nc">LogisticRegression</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    <span class="nc">PassiveAggressiveClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    <span class="nc">RidgeClassifier</span><span class="p">(),</span>
    <span class="nc">SGDClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    <span class="nc">Perceptron</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    <span class="nc">MLPClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    
    <span class="c1">#Navies Bayes
</span>    <span class="nc">BernoulliNB</span><span class="p">(),</span>
    <span class="nc">GaussianNB</span><span class="p">(),</span>
    
    <span class="c1">#Nearest Neighbor
</span>    <span class="nc">KNeighborsClassifier</span><span class="p">(),</span>
    
    <span class="c1">#SVM
</span>    <span class="nc">SVC</span><span class="p">(</span><span class="n">probability</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    <span class="nc">NuSVC</span><span class="p">(</span><span class="n">probability</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    <span class="nc">LinearSVC</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    
    <span class="c1">#Trees    
</span>    <span class="nc">DecisionTreeClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    <span class="nc">ExtraTreeClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">random_state</span><span class="p">),</span>
    
    <span class="c1">#Discriminant Analysis
</span>    <span class="nc">LinearDiscriminantAnalysis</span><span class="p">(),</span>
    <span class="nc">QuadraticDiscriminantAnalysis</span><span class="p">(),</span>

    <span class="c1">#xgboost: http://xgboost.readthedocs.io/en/latest/model.html
</span>    <span class="nc">XGBClassifier</span><span class="p">()</span>    
    <span class="p">]</span>

<span class="c1"># store cv results in list
</span><span class="n">cv_results_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">cv_means_list</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">cv_std_list</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># perform cross-validation
</span><span class="k">for</span> <span class="n">clf</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">classifiers_list</span><span class="p">):</span>
    <span class="n">cv_results_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">cross_val_score</span><span class="p">(</span><span class="n">clf</span><span class="p">,</span>
                                           <span class="n">X_train</span><span class="p">,</span>
                                           <span class="n">y_train</span><span class="p">,</span>
                                           <span class="n">scoring</span> <span class="o">=</span> <span class="sh">"</span><span class="s">accuracy</span><span class="sh">"</span><span class="p">,</span>
                                           <span class="n">cv</span> <span class="o">=</span> <span class="n">kfold</span><span class="p">,</span>
                                           <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">))</span>
    <span class="n">clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
    <span class="n">pred</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>

<span class="c1"># store mean and std accuracy
</span><span class="k">for</span> <span class="n">cv_result</span> <span class="ow">in</span> <span class="n">cv_results_list</span><span class="p">:</span>
    <span class="n">cv_means_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">cv_result</span><span class="p">.</span><span class="nf">mean</span><span class="p">())</span>
    <span class="n">cv_std_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">cv_result</span><span class="p">.</span><span class="nf">std</span><span class="p">())</span>
                      
<span class="n">cv_res_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">({</span><span class="sh">"</span><span class="s">CrossValMeans</span><span class="sh">"</span><span class="p">:</span><span class="n">cv_means_list</span><span class="p">,</span>
                          <span class="sh">"</span><span class="s">CrossValerrors</span><span class="sh">"</span><span class="p">:</span> <span class="n">cv_std_list</span><span class="p">,</span>
                          <span class="sh">"</span><span class="s">Algorithm</span><span class="sh">"</span><span class="p">:[</span><span class="n">clf</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span> <span class="k">for</span> <span class="n">clf</span> <span class="ow">in</span> <span class="n">classifiers_list</span><span class="p">]})</span>                    

<span class="n">cv_res_df</span> <span class="o">=</span> <span class="n">cv_res_df</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="sh">'</span><span class="s">CrossValMeans</span><span class="sh">'</span><span class="p">,</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>             
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>100%|██████████████████████████████████████████████████████████████████████████████████| 23/23 [00:20&lt;00:00,  1.12it/s]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cv_res_df</span><span class="p">.</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">'</span><span class="s">Algorithm</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>CrossValMeans</th>
      <th>CrossValerrors</th>
    </tr>
    <tr>
      <th>Algorithm</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>LogisticRegression</th>
      <td>0.853035</td>
      <td>0.035074</td>
    </tr>
    <tr>
      <th>GradientBoostingClassifier</th>
      <td>0.853010</td>
      <td>0.028286</td>
    </tr>
    <tr>
      <th>LinearDiscriminantAnalysis</th>
      <td>0.851893</td>
      <td>0.026919</td>
    </tr>
    <tr>
      <th>RidgeClassifier</th>
      <td>0.851893</td>
      <td>0.026919</td>
    </tr>
    <tr>
      <th>LinearSVC</th>
      <td>0.850781</td>
      <td>0.030352</td>
    </tr>
    <tr>
      <th>MLPClassifier</th>
      <td>0.850769</td>
      <td>0.026927</td>
    </tr>
    <tr>
      <th>XGBClassifier</th>
      <td>0.850769</td>
      <td>0.027849</td>
    </tr>
    <tr>
      <th>NuSVC</th>
      <td>0.840675</td>
      <td>0.028222</td>
    </tr>
    <tr>
      <th>SVC</th>
      <td>0.840669</td>
      <td>0.028718</td>
    </tr>
    <tr>
      <th>SGDClassifier</th>
      <td>0.837261</td>
      <td>0.028204</td>
    </tr>
    <tr>
      <th>GaussianProcessClassifier</th>
      <td>0.835057</td>
      <td>0.026180</td>
    </tr>
    <tr>
      <th>RandomForestClassifier</th>
      <td>0.831674</td>
      <td>0.023097</td>
    </tr>
    <tr>
      <th>KNeighborsClassifier</th>
      <td>0.829452</td>
      <td>0.027523</td>
    </tr>
    <tr>
      <th>BaggingClassifier</th>
      <td>0.823828</td>
      <td>0.026461</td>
    </tr>
    <tr>
      <th>ExtraTreesClassifier</th>
      <td>0.821581</td>
      <td>0.026906</td>
    </tr>
    <tr>
      <th>AdaBoostClassifier</th>
      <td>0.818204</td>
      <td>0.028622</td>
    </tr>
    <tr>
      <th>DecisionTreeClassifier</th>
      <td>0.810345</td>
      <td>0.019053</td>
    </tr>
    <tr>
      <th>GaussianNB</th>
      <td>0.808123</td>
      <td>0.032538</td>
    </tr>
    <tr>
      <th>ExtraTreeClassifier</th>
      <td>0.805850</td>
      <td>0.016329</td>
    </tr>
    <tr>
      <th>BernoulliNB</th>
      <td>0.795750</td>
      <td>0.011812</td>
    </tr>
    <tr>
      <th>Perceptron</th>
      <td>0.766675</td>
      <td>0.060092</td>
    </tr>
    <tr>
      <th>QuadraticDiscriminantAnalysis</th>
      <td>0.754234</td>
      <td>0.024949</td>
    </tr>
    <tr>
      <th>PassiveAggressiveClassifier</th>
      <td>0.727224</td>
      <td>0.068009</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot results
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>
<span class="n">g</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="sh">"</span><span class="s">CrossValMeans</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">Algorithm</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">cv_res_df</span><span class="p">,</span>
                <span class="n">palette</span><span class="o">=</span><span class="sh">"</span><span class="s">Set3</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">orient</span> <span class="o">=</span> <span class="sh">"</span><span class="s">h</span><span class="sh">"</span><span class="p">,</span>
                <span class="o">**</span><span class="p">{</span><span class="sh">'</span><span class="s">xerr</span><span class="sh">'</span><span class="p">:</span><span class="n">cv_std_list</span><span class="p">})</span>
<span class="n">g</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Mean Accuracy</span><span class="sh">"</span><span class="p">)</span>
<span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Cross validation scores</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_181_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># store best models
</span><span class="n">best_models</span> <span class="o">=</span> <span class="p">[]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">optimize_model</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">paramgrid</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">suffix</span><span class="o">=</span><span class="sh">'</span><span class="s">_best</span><span class="sh">'</span><span class="p">,</span>
                  <span class="n">metric</span> <span class="o">=</span> <span class="sh">'</span><span class="s">accuracy</span><span class="sh">'</span><span class="p">,</span> <span class="n">kfold</span><span class="o">=</span><span class="nc">StratifiedKFold</span><span class="p">(</span><span class="n">n_splits</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">other_args</span><span class="o">=</span><span class="p">{},</span> <span class="n">print_best</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    
    <span class="c1"># adjust base estimator parameters
</span>    <span class="n">estimator</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="o">**</span><span class="n">other_args</span><span class="p">)</span>
    
    <span class="c1"># create k-fold-based grid-search
</span>    <span class="n">gridsearch</span> <span class="o">=</span> <span class="nc">GridSearchCV</span><span class="p">(</span><span class="n">estimator</span><span class="p">,</span> <span class="n">param_grid</span><span class="o">=</span><span class="n">paramgrid</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="n">kfold</span><span class="p">,</span> <span class="n">scoring</span><span class="o">=</span><span class="n">metric</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="n">verbose</span><span class="p">)</span>
    
    <span class="c1"># fit grid search
</span>    <span class="n">gridsearch</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
    
    <span class="c1"># store best model
</span>    <span class="n">name</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">__name__</span> <span class="o">+</span> <span class="n">suffix</span>
    <span class="n">best_models</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">name</span><span class="p">,</span> <span class="n">gridsearch</span><span class="p">.</span><span class="n">best_estimator_</span><span class="p">))</span>
    
    <span class="c1"># print (optional)
</span>    <span class="k">if</span> <span class="n">print_best</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">gridsearch</span><span class="p">)</span>
    
    <span class="c1"># display accuracy
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Best {} model archieves {:.2f}% {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="mi">100</span> <span class="o">*</span> <span class="n">gridsearch</span><span class="p">.</span><span class="n">best_score_</span><span class="p">,</span> <span class="n">metric</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">param_grid</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">max_depth</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">learning_rate</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.025</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.075</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">n_estimators</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">500</span><span class="p">,</span> <span class="mi">1000</span><span class="p">,</span> <span class="mi">1500</span><span class="p">],</span>
<span class="p">}</span>

<span class="nf">optimize_model</span><span class="p">(</span><span class="n">XGBClassifier</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">paramgrid</span><span class="o">=</span><span class="n">param_grid</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 108 candidates, totalling 540 fits


[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.
[Parallel(n_jobs=-1)]: Done  34 tasks      | elapsed:   15.3s
[Parallel(n_jobs=-1)]: Done 184 tasks      | elapsed:  1.3min
[Parallel(n_jobs=-1)]: Done 434 tasks      | elapsed:  2.9min
[Parallel(n_jobs=-1)]: Done 540 out of 540 | elapsed:  3.5min finished


GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=5, shuffle=True),
             error_score=nan,
             estimator=XGBClassifier(base_score=0.5, booster='gbtree',
                                     colsample_bylevel=1, colsample_bynode=1,
                                     colsample_bytree=1, gamma=0,
                                     learning_rate=0.1, max_delta_step=0,
                                     max_depth=3, min_child_weight=1,
                                     missing=None, n_estimators=100, n_jobs=1,
                                     nthread=None, objective='binary:logistic',
                                     random_state=0, reg_alpha=0, reg_lambda=1,
                                     scale_pos_weight=1, seed=None, silent=None,
                                     subsample=1, verbosity=1),
             iid='deprecated', n_jobs=-1,
             param_grid={'learning_rate': [0.01, 0.025, 0.05, 0.075, 0, 1, 0,
                                           15, 0.2],
                         'max_depth': [3, 5, 6, 7],
                         'n_estimators': [500, 1000, 1500]},
             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,
             scoring='accuracy', verbose=1)
Best XGBClassifier model archieves 85.64% accuracy
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">param_grid</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">max_depth</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="bp">None</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">max_features</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">min_samples_split</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">min_samples_leaf</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">bootstrap</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="bp">False</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">n_estimators</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1500</span><span class="p">,</span> <span class="mi">2000</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">criterion</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">gini</span><span class="sh">"</span><span class="p">]</span>
<span class="p">}</span>

<span class="nf">optimize_model</span><span class="p">(</span><span class="n">ExtraTreesClassifier</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">paramgrid</span><span class="o">=</span><span class="n">param_grid</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 54 candidates, totalling 270 fits


[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.
[Parallel(n_jobs=-1)]: Done  34 tasks      | elapsed:   18.5s
[Parallel(n_jobs=-1)]: Done 184 tasks      | elapsed:  1.5min
[Parallel(n_jobs=-1)]: Done 270 out of 270 | elapsed:  2.3min finished


GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=5, shuffle=True),
             error_score=nan,
             estimator=ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0,
                                            class_weight=None, criterion='gini',
                                            max_depth=None, max_features='auto',
                                            max_leaf_nodes=None,
                                            max_samples=None,
                                            min_impurity_decrease=0.0,
                                            min_impurity_split=None,
                                            min_samples_leaf=1,
                                            min_samples_split=2,
                                            min_w...
                                            oob_score=False, random_state=None,
                                            verbose=0, warm_start=False),
             iid='deprecated', n_jobs=-1,
             param_grid={'bootstrap': [False], 'criterion': ['gini'],
                         'max_depth': [None], 'max_features': [5, 7, 'auto'],
                         'min_samples_leaf': [4, 5, 6],
                         'min_samples_split': [4, 5, 6],
                         'n_estimators': [1500, 2000]},
             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,
             scoring='accuracy', verbose=1)
Best ExtraTreesClassifier model archieves 83.96% accuracy
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">param_grid</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">max_depth</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">min_samples_split</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">min_samples_leaf</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">max_features</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">n_estimators</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">1750</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">criterion</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">gini</span><span class="sh">"</span><span class="p">]</span>
<span class="p">}</span>

<span class="nf">optimize_model</span><span class="p">(</span><span class="n">RandomForestClassifier</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">paramgrid</span><span class="o">=</span><span class="n">param_grid</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 81 candidates, totalling 405 fits


[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.
[Parallel(n_jobs=-1)]: Done  34 tasks      | elapsed:   29.4s
[Parallel(n_jobs=-1)]: Done 184 tasks      | elapsed:  2.0min
[Parallel(n_jobs=-1)]: Done 405 out of 405 | elapsed:  4.3min finished


GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=5, shuffle=True),
             error_score=nan,
             estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                              class_weight=None,
                                              criterion='gini', max_depth=None,
                                              max_features='auto',
                                              max_leaf_nodes=None,
                                              max_samples=None,
                                              min_impurity_decrease=0.0,
                                              min_impurity_split=None,
                                              min_samples_leaf=1,
                                              min_samples_split=2,
                                              min_...
                                              n_estimators=100, n_jobs=None,
                                              oob_score=False,
                                              random_state=None, verbose=0,
                                              warm_start=False),
             iid='deprecated', n_jobs=-1,
             param_grid={'criterion': ['gini'], 'max_depth': [5, 6, 7],
                         'max_features': [5, 7, 'auto'],
                         'min_samples_leaf': [4, 5, 6],
                         'min_samples_split': [4, 5, 6],
                         'n_estimators': [1750]},
             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,
             scoring='accuracy', verbose=1)
Best RandomForestClassifier model archieves 84.74% accuracy
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">param_grid</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">kernel</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="sh">'</span><span class="s">rbf</span><span class="sh">'</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">gamma</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.0005</span><span class="p">,</span> <span class="mf">0.0008</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">,</span> <span class="mf">0.005</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">C</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">,</span> <span class="mi">250</span><span class="p">,</span> <span class="mi">500</span><span class="p">]</span>
<span class="p">}</span>

<span class="nf">optimize_model</span><span class="p">(</span><span class="n">SVC</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">paramgrid</span><span class="o">=</span><span class="n">param_grid</span><span class="p">,</span> <span class="n">other_args</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">probability</span><span class="sh">'</span><span class="p">:</span><span class="bp">True</span><span class="p">})</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 63 candidates, totalling 315 fits


[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.
[Parallel(n_jobs=-1)]: Done  52 tasks      | elapsed:    0.8s
[Parallel(n_jobs=-1)]: Done 300 out of 315 | elapsed:    9.5s remaining:    0.4s


GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=5, shuffle=True),
             error_score=nan,
             estimator=SVC(C=1.0, break_ties=False, cache_size=200,
                           class_weight=None, coef0=0.0,
                           decision_function_shape='ovr', degree=3,
                           gamma='scale', kernel='rbf', max_iter=-1,
                           probability=True, random_state=None, shrinking=True,
                           tol=0.001, verbose=False),
             iid='deprecated', n_jobs=-1,
             param_grid={'C': [1, 10, 50, 100, 200, 250, 500],
                         'gamma': [0.0005, 0.0008, 0.001, 0.005, 0.01, 0.05,
                                   0.1, 0.5, 1],
                         'kernel': ['rbf']},
             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,
             scoring='accuracy', verbose=1)
Best SVC model archieves 85.42% accuracy


[Parallel(n_jobs=-1)]: Done 315 out of 315 | elapsed:   10.2s finished
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">param_grid</span> <span class="o">=</span> <span class="p">{</span><span class="sh">"</span><span class="s">C</span><span class="sh">"</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nf">logspace</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">40</span><span class="p">),</span> <span class="sh">"</span><span class="s">penalty</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">l1</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">l2</span><span class="sh">"</span><span class="p">]}</span>

<span class="nf">optimize_model</span><span class="p">(</span><span class="n">LogisticRegression</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">paramgrid</span><span class="o">=</span><span class="n">param_grid</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 80 candidates, totalling 400 fits


[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.
[Parallel(n_jobs=-1)]: Done  56 tasks      | elapsed:    0.0s


GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=5, shuffle=True),
             error_score=nan,
             estimator=LogisticRegression(C=1.0, class_weight=None, dual=False,
                                          fit_intercept=True,
                                          intercept_scaling=1, l1_ratio=None,
                                          max_iter=100, multi_class='auto',
                                          n_jobs=None, penalty='l2',
                                          random_state=None, solver='lbfgs',
                                          tol=0.0001, verbose=0,
                                          warm_start=False),
             iid='deprecated'...
       4.92388263e+00, 7.01703829e+00, 1.00000000e+01, 1.42510267e+01,
       2.03091762e+01, 2.89426612e+01, 4.12462638e+01, 5.87801607e+01,
       8.37677640e+01, 1.19377664e+02, 1.70125428e+02, 2.42446202e+02,
       3.45510729e+02, 4.92388263e+02, 7.01703829e+02, 1.00000000e+03]),
                         'penalty': ['l1', 'l2']},
             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,
             scoring='accuracy', verbose=1)
Best LogisticRegression model archieves 85.64% accuracy


[Parallel(n_jobs=-1)]: Done 400 out of 400 | elapsed:    0.3s finished
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">param_grid</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">learning_rate</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.025</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.075</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.15</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">subsample</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.62</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.85</span><span class="p">,</span> <span class="mf">0.87</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.95</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]</span>
<span class="p">}</span>

<span class="nf">optimize_model</span><span class="p">(</span><span class="n">GradientBoostingClassifier</span><span class="p">,</span>
               <span class="n">X_train</span><span class="p">,</span>
               <span class="n">y_train</span><span class="p">,</span>
               <span class="n">paramgrid</span><span class="o">=</span><span class="n">param_grid</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Parallel(n_jobs=-1)]: Using backend LokyBackend with 8 concurrent workers.


Fitting 5 folds for each of 56 candidates, totalling 280 fits


[Parallel(n_jobs=-1)]: Done  52 tasks      | elapsed:    1.5s


GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=5, shuffle=True),
             error_score=nan,
             estimator=GradientBoostingClassifier(ccp_alpha=0.0,
                                                  criterion='friedman_mse',
                                                  init=None, learning_rate=0.1,
                                                  loss='deviance', max_depth=3,
                                                  max_features=None,
                                                  max_leaf_nodes=None,
                                                  min_impurity_decrease=0.0,
                                                  min_impurity_split=None,
                                                  min_samples_leaf=1,
                                                  min_samples_split=2,
                                                  min...
                                                  n_iter_no_change=None,
                                                  presort='deprecated',
                                                  random_state=None,
                                                  subsample=1.0, tol=0.0001,
                                                  validation_fraction=0.1,
                                                  verbose=0, warm_start=False),
             iid='deprecated', n_jobs=-1,
             param_grid={'learning_rate': [0.01, 0.025, 0.05, 0.075, 0.1, 0.15,
                                           0.2],
                         'subsample': [0.5, 0.62, 0.8, 0.85, 0.87, 0.9, 0.95,
                                       1.0]},
             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,
             scoring='accuracy', verbose=1)
Best GradientBoostingClassifier model archieves 86.20% accuracy


[Parallel(n_jobs=-1)]: Done 280 out of 280 | elapsed:    6.8s finished
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">param_grid</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">n_neighbors</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">15</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">weights</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">'</span><span class="s">uniform</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">distance</span><span class="sh">'</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">metric</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">'</span><span class="s">manhattan</span><span class="sh">'</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">algorithm</span><span class="sh">"</span><span class="p">:[</span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">]</span>
<span class="p">}</span>

<span class="nf">optimize_model</span><span class="p">(</span><span class="n">KNeighborsClassifier</span><span class="p">,</span>
               <span class="n">X_train</span><span class="p">,</span>
               <span class="n">y_train</span><span class="p">,</span>
               <span class="n">paramgrid</span><span class="o">=</span><span class="n">param_grid</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fitting 5 folds for each of 12 candidates, totalling 60 fits


[Parallel(n_jobs=-1)]: Using backend LokyBackend with 4 concurrent workers.


GridSearchCV(cv=StratifiedKFold(n_splits=5, random_state=5, shuffle=True),
             error_score='raise-deprecating',
             estimator=KNeighborsClassifier(algorithm='auto', leaf_size=30,
                                            metric='minkowski',
                                            metric_params=None, n_jobs=None,
                                            n_neighbors=5, p=2,
                                            weights='uniform'),
             iid='warn', n_jobs=-1,
             param_grid={'algorithm': ['auto'], 'metric': ['manhattan'],
                         'n_neighbors': [3, 5, 7, 11, 13, 15],
                         'weights': ['uniform', 'distance']},
             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,
             scoring='accuracy', verbose=1)
Best KNeighborsClassifier model archieves 83.95% accuracy


[Parallel(n_jobs=-1)]: Done  60 out of  60 | elapsed:    4.1s finished
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">LDA</span> <span class="o">=</span> <span class="nc">LinearDiscriminantAnalysis</span><span class="p">()</span>
<span class="n">LDA</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">LDA_best</span> <span class="o">=</span> <span class="n">LDA</span>
<span class="n">best_models</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="sh">"</span><span class="s">LDA_best</span><span class="sh">"</span><span class="p">,</span> <span class="n">LDA_best</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">predictions</span> <span class="o">=</span> <span class="p">{}</span>
<span class="n">N_fold</span> <span class="o">=</span> <span class="mi">5</span>


<span class="k">def</span> <span class="nf">generalize_predictions</span><span class="p">(</span><span class="n">model</span><span class="p">,</span>
                           <span class="n">X_train</span><span class="p">,</span>
                           <span class="n">y_train</span><span class="p">,</span>
                           <span class="n">X_test</span><span class="p">,</span>
                           <span class="n">skf</span><span class="o">=</span><span class="nc">StratifiedKFold</span><span class="p">(</span><span class="n">n_splits</span><span class="o">=</span><span class="n">N_fold</span><span class="p">,</span>
                                               <span class="n">random_state</span><span class="o">=</span><span class="n">N_fold</span><span class="p">,</span>
                                               <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">)):</span>

    <span class="c1"># store predicted probas for each folds
</span>    <span class="n">probas</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">X_test</span><span class="p">),</span> <span class="n">N_fold</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)),</span>
                          <span class="n">columns</span><span class="o">=</span><span class="p">[</span>
                              <span class="sh">'</span><span class="s">Fold_{}_Class_{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span>
                              <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">N_fold</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
                          <span class="p">],</span>
                          <span class="n">index</span><span class="o">=</span><span class="n">passengerId</span><span class="p">)</span>

    <span class="c1"># for each fold, train then predict
</span>    <span class="k">for</span> <span class="n">fold_id</span><span class="p">,</span> <span class="p">(</span><span class="n">train_idx</span><span class="p">,</span>
                  <span class="n">val_idx</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="nf">enumerate</span><span class="p">(</span><span class="n">skf</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">),</span> <span class="mi">1</span><span class="p">)):</span>

        <span class="c1"># Fitting the model
</span>        <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="n">train_idx</span><span class="p">],</span> <span class="n">y_train</span><span class="p">[</span><span class="n">train_idx</span><span class="p">])</span>

        <span class="c1"># X_test probabilities
</span>        <span class="n">probas</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="sh">'</span><span class="s">Fold_{}_Class_0</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">fold_id</span><span class="p">)]</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict_proba</span><span class="p">(</span>
            <span class="n">X_test</span><span class="p">)[:,</span> <span class="mi">0</span><span class="p">]</span>
        <span class="n">probas</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="sh">'</span><span class="s">Fold_{}_Class_1</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">fold_id</span><span class="p">)]</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict_proba</span><span class="p">(</span>
            <span class="n">X_test</span><span class="p">)[:,</span> <span class="mi">1</span><span class="p">]</span>

    <span class="c1"># save results
</span>    <span class="nf">return </span><span class="p">(</span><span class="n">probas</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">predictions</span> <span class="o">=</span> <span class="p">{</span><span class="n">name</span><span class="p">:</span> <span class="nf">generalize_predictions</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">model</span> <span class="ow">in</span> <span class="n">best_models</span><span class="p">}</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5it [00:07,  1.49s/it]
5it [00:13,  2.70s/it]
5it [00:13,  2.78s/it]
5it [00:01,  3.91it/s]
5it [00:00, 40.15it/s]
5it [00:00,  6.12it/s]
5it [00:00, 18.64it/s]
5it [00:00, 116.72it/s]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">make_predictions</span><span class="p">(</span><span class="n">model_df</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">"</span><span class="s">hard</span><span class="sh">"</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mf">0.5</span><span class="p">):</span>
    
    <span class="n">predictions</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">X_test</span><span class="p">),</span> <span class="mi">3</span><span class="p">)),</span>
                     <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">0</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">pred</span><span class="sh">'</span><span class="p">])</span>
    
    <span class="c1"># isolate probabilities of class 1
</span>    <span class="n">class_one</span> <span class="o">=</span> <span class="p">[</span><span class="n">col</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">model_df</span><span class="p">.</span><span class="n">columns</span> <span class="k">if</span> <span class="n">col</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">'</span><span class="s">Class_1</span><span class="sh">'</span><span class="p">)]</span>
    
    <span class="c1"># compute average of class 1 probabilities
</span>    <span class="n">predictions</span><span class="p">[</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">model_df</span><span class="p">[</span><span class="n">class_one</span><span class="p">].</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span> <span class="o">/</span> <span class="n">N_fold</span>
    <span class="n">predictions</span><span class="p">[</span><span class="sh">'</span><span class="s">0</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.</span> <span class="o">-</span> <span class="n">predictions</span><span class="p">[</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">]</span>
    
    <span class="k">if</span> <span class="n">mode</span><span class="o">==</span><span class="sh">"</span><span class="s">hard</span><span class="sh">"</span><span class="p">:</span>
        <span class="n">predictions</span><span class="p">[</span><span class="sh">'</span><span class="s">pred</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">predictions</span><span class="p">[</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="n">threshold</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">predictions</span><span class="p">[</span><span class="sh">'</span><span class="s">pred</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">predictions</span><span class="p">[</span><span class="sh">'</span><span class="s">1</span><span class="sh">'</span><span class="p">]</span>
    
    <span class="n">model_results</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">PassengerId</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">model_results</span><span class="p">[</span><span class="sh">'</span><span class="s">PassengerId</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_test</span><span class="p">[</span><span class="sh">'</span><span class="s">PassengerId</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">model_results</span><span class="p">[</span><span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">predictions</span><span class="p">[</span><span class="sh">'</span><span class="s">pred</span><span class="sh">'</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">model_results</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">results</span> <span class="o">=</span> <span class="p">[(</span><span class="n">key</span><span class="p">,</span> <span class="nf">make_predictions</span><span class="p">(</span><span class="n">model</span><span class="p">))</span> <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">model</span> <span class="ow">in</span> <span class="n">predictions</span><span class="p">.</span><span class="nf">items</span><span class="p">()]</span>
</code></pre></div></div>

<hr />
<p><a id="Section_9"></a></p>
<h2 id="9-best-models">9. Best Models</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">model</span> <span class="ow">in</span> <span class="n">best_models</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>XGBClassifier_best
ExtraTreesClassifier_best
RandomForestClassifier_best
SVC_best
LogisticRegression_best
GradientBoostingClassifier_best
KNeighborsClassifier_best
LDA_best
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">predictions</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">model_name</span><span class="p">,</span> <span class="n">model</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">best_models</span><span class="p">):</span>
    <span class="c1"># make predictions
</span>    <span class="n">y_pred</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
    
    <span class="c1"># store predictions
</span>    <span class="n">predictions</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">y_pred</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">model_name</span><span class="p">))</span>
    
<span class="c1"># concatenate predictions
</span><span class="n">ensemble_results</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">(</span><span class="n">predictions</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>100%|██████████| 8/8 [00:00&lt;00:00, 16.13it/s]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Generate a mask for the upper triangle
</span><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">ensemble_results</span><span class="p">.</span><span class="nf">corr</span><span class="p">(),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">bool</span><span class="p">)</span>
<span class="n">mask</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">triu_indices_from</span><span class="p">(</span><span class="n">mask</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">True</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">10</span><span class="p">))</span>

<span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">220</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">as_cmap</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">g</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">ensemble_results</span><span class="p">.</span><span class="nf">corr</span><span class="p">(),</span>
                <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">,</span>
                <span class="n">annot_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">fontsize</span><span class="sh">"</span><span class="p">:</span> <span class="mi">14</span><span class="p">},</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">)</span>

<span class="n">ylabels</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">.</span><span class="nf">get_text</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">g</span><span class="p">.</span><span class="nf">get_yticklabels</span><span class="p">()]</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">yticks</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">ylabels</span><span class="p">))</span> <span class="o">+</span> <span class="mf">0.5</span><span class="p">,</span>
           <span class="n">ylabels</span><span class="p">,</span>
           <span class="n">rotation</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
           <span class="n">fontsize</span><span class="o">=</span><span class="sh">"</span><span class="s">14</span><span class="sh">"</span><span class="p">,</span>
           <span class="n">va</span><span class="o">=</span><span class="sh">"</span><span class="s">center</span><span class="sh">"</span><span class="p">)</span>
<span class="n">g</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">best_models</span><span class="p">),</span> <span class="mf">0.5</span><span class="p">);</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_200_0.png" />  
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_learning_curve</span><span class="p">(</span><span class="n">models</span><span class="p">,</span>
                        <span class="n">X</span><span class="p">,</span>
                        <span class="n">y</span><span class="p">,</span>
                        <span class="n">ylim</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                        <span class="n">cv</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
                        <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span>
                        <span class="n">train_sizes</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(.</span><span class="mi">1</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mi">5</span><span class="p">)):</span>

    <span class="c1"># extract number of models
</span>    <span class="n">n_models</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">models</span><span class="p">)</span>

    <span class="c1"># create figure
</span>    <span class="n">fix</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">n_models</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">n_models</span><span class="p">))</span>

    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">models</span><span class="p">):</span>
        <span class="c1"># unpack
</span>        <span class="n">name</span><span class="p">,</span> <span class="n">model</span> <span class="o">=</span> <span class="n">val</span>

        <span class="c1"># scale y axis
</span>        <span class="k">if</span> <span class="n">ylim</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span> <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="o">*</span><span class="n">ylim</span><span class="p">)</span>
        <span class="c1"># set title
</span>        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">set_title</span><span class="p">(</span><span class="n">name</span> <span class="o">+</span> <span class="sh">"</span><span class="s">learning curves</span><span class="sh">"</span><span class="p">)</span>
        <span class="c1"># set labels
</span>        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Training size</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Score</span><span class="sh">"</span><span class="p">)</span>
        <span class="c1"># compute learning curves
</span>        <span class="n">train_sizes</span><span class="p">,</span> <span class="n">train_scores</span><span class="p">,</span> <span class="n">test_scores</span> <span class="o">=</span> <span class="nf">learning_curve</span><span class="p">(</span>
            <span class="n">model</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="n">cv</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=</span><span class="n">n_jobs</span><span class="p">,</span> <span class="n">train_sizes</span><span class="o">=</span><span class="n">train_sizes</span><span class="p">)</span>
        <span class="c1"># compute statistics
</span>        <span class="n">train_score_mean</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">train_scores</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">train_score_std</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">std</span><span class="p">(</span><span class="n">train_scores</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">test_score_mean</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">test_scores</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">test_score_std</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">std</span><span class="p">(</span><span class="n">test_scores</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">fill_between</span><span class="p">(</span><span class="n">train_sizes</span><span class="p">,</span>
                               <span class="n">train_score_mean</span> <span class="o">-</span> <span class="n">train_score_std</span><span class="p">,</span>
                               <span class="n">train_score_mean</span> <span class="o">+</span> <span class="n">train_score_std</span><span class="p">,</span>
                               <span class="n">alpha</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                               <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">fill_between</span><span class="p">(</span><span class="n">train_sizes</span><span class="p">,</span>
                               <span class="n">test_score_mean</span> <span class="o">-</span> <span class="n">test_score_std</span><span class="p">,</span>
                               <span class="n">test_score_mean</span> <span class="o">+</span> <span class="n">test_score_std</span><span class="p">,</span>
                               <span class="n">alpha</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span>
                               <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">g</span><span class="sh">'</span><span class="p">)</span>

        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">train_sizes</span><span class="p">,</span>
                       <span class="n">train_score_mean</span><span class="p">,</span>
                       <span class="sh">'</span><span class="s">o-</span><span class="sh">'</span><span class="p">,</span>
                       <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">,</span>
                       <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Training score</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">train_sizes</span><span class="p">,</span>
                       <span class="n">test_score_mean</span><span class="p">,</span>
                       <span class="sh">'</span><span class="s">o-</span><span class="sh">'</span><span class="p">,</span>
                       <span class="n">color</span><span class="o">=</span><span class="sh">"</span><span class="s">g</span><span class="sh">"</span><span class="p">,</span>
                       <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Cross-validation score</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">idx</span><span class="p">].</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">best</span><span class="sh">'</span><span class="p">)</span>
        
    <span class="n">plt</span><span class="p">.</span><span class="nf">subplots_adjust</span><span class="p">(</span><span class="n">hspace</span><span class="o">=</span><span class="mf">0.3</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">fig</span><span class="p">,</span> <span class="n">axes</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">plot_learning_curve</span><span class="p">(</span><span class="n">best_models</span><span class="p">,</span><span class="n">X_train</span><span class="p">,</span><span class="n">y_train</span><span class="p">,</span><span class="n">cv</span><span class="o">=</span><span class="n">kfold</span><span class="p">,</span> <span class="n">ylim</span><span class="o">=</span><span class="p">(</span><span class="mf">0.6</span><span class="p">,</span><span class="mf">1.</span><span class="p">));</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_202_0.png" />  
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nrows</span> <span class="o">=</span> <span class="n">ncols</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">nrows</span> <span class="o">=</span> <span class="n">nrows</span><span class="p">,</span> <span class="n">ncols</span> <span class="o">=</span> <span class="n">ncols</span><span class="p">,</span> <span class="n">sharex</span><span class="o">=</span><span class="sh">"</span><span class="s">all</span><span class="sh">"</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">15</span><span class="p">))</span>

<span class="n">names_classifiers</span> <span class="o">=</span> <span class="p">[(</span><span class="sh">"</span><span class="s">XGBClassifier_best</span><span class="sh">"</span><span class="p">,</span><span class="n">best_models</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]),</span>
                     <span class="p">(</span><span class="sh">"</span><span class="s">ExtraTreesClassifier_best</span><span class="sh">"</span><span class="p">,</span><span class="n">best_models</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]),</span>
                     <span class="p">(</span><span class="sh">"</span><span class="s">RandomForestClassifier_best</span><span class="sh">"</span><span class="p">,</span><span class="n">best_models</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">]),</span>
                     <span class="p">(</span><span class="sh">"</span><span class="s">GradientBoostingClassifier_best</span><span class="sh">"</span><span class="p">,</span><span class="n">best_models</span><span class="p">[</span><span class="mi">5</span><span class="p">][</span><span class="mi">1</span><span class="p">])]</span>

<span class="n">nclassifier</span> <span class="o">=</span> <span class="mi">0</span>
<span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">nrows</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">ncols</span><span class="p">):</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">names_classifiers</span><span class="p">[</span><span class="n">nclassifier</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">classifier</span> <span class="o">=</span> <span class="n">names_classifiers</span><span class="p">[</span><span class="n">nclassifier</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
        <span class="n">indices</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argsort</span><span class="p">(</span><span class="n">classifier</span><span class="p">.</span><span class="n">feature_importances_</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">][:</span><span class="mi">40</span><span class="p">]</span>
        <span class="n">g</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">df_train</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="n">indices</span><span class="p">][:</span><span class="mi">40</span><span class="p">],</span><span class="n">x</span> <span class="o">=</span> <span class="n">classifier</span><span class="p">.</span><span class="n">feature_importances_</span><span class="p">[</span><span class="n">indices</span><span class="p">][:</span><span class="mi">40</span><span class="p">]</span> <span class="p">,</span> <span class="n">orient</span><span class="o">=</span><span class="sh">'</span><span class="s">h</span><span class="sh">'</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">col</span><span class="p">])</span>
        <span class="n">g</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Relative importance</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
        <span class="n">g</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Features</span><span class="sh">"</span><span class="p">,</span><span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>
        <span class="n">g</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">labelsize</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span>
        <span class="n">g</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="n">name</span> <span class="o">+</span> <span class="sh">"</span><span class="s"> feature importance</span><span class="sh">"</span><span class="p">)</span>
        <span class="n">nclassifier</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/output_203_0.png" />  
</figure>

<hr />
<p><a id="Section_10"></a></p>
<h2 id="10-create-submission">10. Create Submission</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># generate submission file 
</span><span class="n">submission_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">({</span><span class="sh">'</span><span class="s">PassengerId</span><span class="sh">'</span><span class="p">:</span> <span class="n">passengerId</span><span class="p">,</span>
                            <span class="sh">'</span><span class="s">Survived</span><span class="sh">'</span><span class="p">:</span> <span class="n">results</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">].</span><span class="n">values</span><span class="p">.</span><span class="n">T</span><span class="p">[</span><span class="mi">0</span><span class="p">]})</span>
<span class="n">submission_df</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">voting_submission_df.csv</span><span class="sh">"</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<p>The submission leads to a <strong>81.339%</strong> accuracy. This is puts the predictions in the top <strong>3%</strong> of the Kaggle leaderboard.</p>

<figure>
<img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/Score.PNG" style="width:800px;" />  
</figure>
<figure>
<img src="https://tdody.github.io/assets/img/2020-02-02-Titanic/Rank.PNG" style="width:250px;" />
</figure>]]></content><author><name>Thibault Dody</name></author><category term="Kaggle" /><category term="ML" /><category term="python" /><summary type="html"><![CDATA[A take on the Kaggle competition of the Titanic disaster.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tdody.github.io/assets/img/2020-02-02-Titanic/tile.png" /><media:content medium="image" url="https://tdody.github.io/assets/img/2020-02-02-Titanic/tile.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Image Captions</title><link href="http://localhost:4000/Image-Caption/" rel="alternate" type="text/html" title="Image Captions" /><published>2019-12-08T00:00:00-05:00</published><updated>2019-12-08T00:00:00-05:00</updated><id>http://localhost:4000/Image-Caption</id><content type="html" xml:base="http://localhost:4000/Image-Caption/"><![CDATA[<footer id="attribution" style="float:right; color:#999; background:#fff;">
Created by Thibault Dody, 12/08/2019.
</footer>

<h1 id="image-captioning">Image Captioning</h1>

<h2 id="objectives">Objectives</h2>

<p>The objective of this project it to create a model to generate English captions for given images. Image captioning can be used to index images, generate automatic caption, and perform search on images using text as an input. This notebook presents the implementation of a model combining a convolutional neural network structure and a recurrent network structure.</p>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/encoder_decoder.png" />
</figure>

<p>Model architecture: CNN encoder and RNN decoder. 
(https://research.googleblog.com/2014/11/a-picture-is-worth-thousand-coherent.html)</p>

<h2 id="metric">Metric</h2>

<p>For this project, we will evaluate the performances of our model based on the <strong>accuracy</strong> of the word predictions. Our model will be optimized using categorical <strong>cross-entropy</strong>.</p>

<h2 id="module-import">Module Import</h2>

<p>Tensorflow is used to generate our model. This library provides enough flexibility to build a complex model combining various deep learning tools (NN, CNN, RNN…)</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>
<span class="n">sys</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">"</span><span class="s">..</span><span class="sh">"</span><span class="p">)</span>
<span class="kn">import</span> <span class="n">grading</span>
<span class="kn">import</span> <span class="n">download_utils</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="kn">from</span> <span class="n">tensorflow.contrib</span> <span class="kn">import</span> <span class="n">keras</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">L</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">layers</span>
<span class="n">K</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">backend</span>
<span class="kn">import</span> <span class="n">utils</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">zipfile</span>
<span class="kn">import</span> <span class="n">json</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">defaultdict</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">random</span>
<span class="kn">from</span> <span class="n">random</span> <span class="kn">import</span> <span class="n">choice</span>
<span class="kn">import</span> <span class="n">grading_utils</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">from</span> <span class="n">keras_utils</span> <span class="kn">import</span> <span class="n">reset_tf_session</span>
<span class="kn">import</span> <span class="n">tqdm_utils</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Using TensorFlow back-end.
</code></pre></div></div>

<h2 id="prepare-the-storage-for-model-checkpoints">Prepare the storage for model checkpoints</h2>

<h2 id="download-data">Download data</h2>

<p>The original data is obtained from the following sources:</p>

<ul>
  <li>train images http://msvocds.blob.core.windows.net/coco2014/train2014.zip</li>
  <li>validation images http://msvocds.blob.core.windows.net/coco2014/val2014.zip</li>
  <li>captions for both train and validation http://msvocds.blob.core.windows.net/annotations-1-0-3/captions_train-val2014.zip
    <h2 id="data-preparation-and-encoding">Data Preparation and Encoding</h2>
  </li>
</ul>

<p>In order to generate caption we use a model made of two blocks:</p>

<ol>
  <li>CNN: used to extract image features (based on the InceptionV3)</li>
  <li>RNN: used to generate the captions
    <h3 id="extract-image-features">Extract image features</h3>
  </li>
</ol>

<p>We will use pre-trained InceptionV3 model for CNN encoder (https://research.googleblog.com/2016/03/train-your-own-image-classifier-with.html). The original InceptionV3 model contains a CNN network terminated by a MLP and a softmax function. Since our goal is to feed the image encoding to our RNN, we will not include the MLP layers.</p>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/inceptionv3.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">IMG_SIZE</span> <span class="o">=</span> <span class="mi">299</span>
</code></pre></div></div>

<p>Here is a simple diagram of our image encoding. The pre-processing of the image is intended to transform the image to meet the format requirements of the InceptionV3.</p>
<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/ImgEncoding.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we take the last hidden layer of IncetionV3 as an image embedding
</span><span class="k">def</span> <span class="nf">get_cnn_encoder</span><span class="p">():</span>

    <span class="c1"># the keras learning phase adjust the behavior of certain functions during train time and test time
</span>    <span class="n">K</span><span class="p">.</span><span class="nf">set_learning_phase</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>

    <span class="c1"># load InceptionV3 and remove dense layers
</span>    <span class="n">model</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">applications</span><span class="p">.</span><span class="nc">InceptionV3</span><span class="p">(</span><span class="n">include_top</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

    <span class="c1"># load preprocess_input (this will be used to apply the necessary pre-processing to our images)
</span>    <span class="n">preprocess_for_model</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">applications</span><span class="p">.</span><span class="n">inception_v3</span><span class="p">.</span><span class="n">preprocess_input</span>

    <span class="c1"># define model:
</span>    <span class="c1">#   input: inputs for InceptionV3
</span>    <span class="c1">#   output: GlobalAveragePooling2D on InceptionV3 output
</span>    <span class="c1">#   full model: input -&gt; preprocess InceptionV3 -&gt; AveragePooling
</span>    <span class="n">model</span> <span class="o">=</span> <span class="n">keras</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nc">Model</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">inputs</span><span class="p">,</span> <span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">GlobalAveragePooling2D</span><span class="p">()(</span><span class="n">model</span><span class="p">.</span><span class="n">output</span><span class="p">))</span>

    <span class="k">return</span> <span class="n">model</span><span class="p">,</span> <span class="n">preprocess_for_model</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load pre-trained model
</span><span class="nf">reset_tf_session</span><span class="p">()</span>
<span class="n">encoder</span><span class="p">,</span> <span class="n">preprocess_for_model</span> <span class="o">=</span> <span class="nf">get_cnn_encoder</span><span class="p">()</span>

<span class="c1"># extract train features
</span><span class="n">train_img_embeds</span><span class="p">,</span> <span class="n">train_img_fns</span> <span class="o">=</span> <span class="n">utils</span><span class="p">.</span><span class="nf">apply_model</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">train2014.zip</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoder</span><span class="p">,</span> <span class="n">preprocess_for_model</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="n">IMG_SIZE</span><span class="p">,</span> <span class="n">IMG_SIZE</span><span class="p">))</span>
<span class="n">utils</span><span class="p">.</span><span class="nf">save_pickle</span><span class="p">(</span><span class="n">train_img_embeds</span><span class="p">,</span> <span class="sh">"</span><span class="s">train_img_embeds.pickle</span><span class="sh">"</span><span class="p">)</span>
<span class="n">utils</span><span class="p">.</span><span class="nf">save_pickle</span><span class="p">(</span><span class="n">train_img_fns</span><span class="p">,</span> <span class="sh">"</span><span class="s">train_img_fns.pickle</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># extract validation features
</span><span class="n">val_img_embeds</span><span class="p">,</span> <span class="n">val_img_fns</span> <span class="o">=</span> <span class="n">utils</span><span class="p">.</span><span class="nf">apply_model</span><span class="p">(</span>
    <span class="sh">"</span><span class="s">val2014.zip</span><span class="sh">"</span><span class="p">,</span> <span class="n">encoder</span><span class="p">,</span> <span class="n">preprocess_for_model</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="n">IMG_SIZE</span><span class="p">,</span> <span class="n">IMG_SIZE</span><span class="p">))</span>
<span class="n">utils</span><span class="p">.</span><span class="nf">save_pickle</span><span class="p">(</span><span class="n">val_img_embeds</span><span class="p">,</span> <span class="sh">"</span><span class="s">val_img_embeds.pickle</span><span class="sh">"</span><span class="p">)</span>
<span class="n">utils</span><span class="p">.</span><span class="nf">save_pickle</span><span class="p">(</span><span class="n">val_img_fns</span><span class="p">,</span> <span class="sh">"</span><span class="s">val_img_fns.pickle</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># sample images for learners
</span><span class="k">def</span> <span class="nf">sample_zip</span><span class="p">(</span><span class="n">fn_in</span><span class="p">,</span> <span class="n">fn_out</span><span class="p">,</span> <span class="n">rate</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">seed</span><span class="o">=</span><span class="mi">42</span><span class="p">):</span>
    <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>
    <span class="k">with</span> <span class="n">zipfile</span><span class="p">.</span><span class="nc">ZipFile</span><span class="p">(</span><span class="n">fn_in</span><span class="p">)</span> <span class="k">as</span> <span class="n">fin</span><span class="p">,</span> <span class="n">zipfile</span><span class="p">.</span><span class="nc">ZipFile</span><span class="p">(</span><span class="n">fn_out</span><span class="p">,</span> <span class="sh">"</span><span class="s">w</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">fout</span><span class="p">:</span>
        <span class="n">sampled</span> <span class="o">=</span> <span class="nf">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">_</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">rand</span><span class="p">()</span> <span class="o">&lt;</span> <span class="n">rate</span><span class="p">,</span> <span class="n">fin</span><span class="p">.</span><span class="n">filelist</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">zInfo</span> <span class="ow">in</span> <span class="n">sampled</span><span class="p">:</span>
            <span class="n">fout</span><span class="p">.</span><span class="nf">writestr</span><span class="p">(</span><span class="n">zInfo</span><span class="p">,</span> <span class="n">fin</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">zInfo</span><span class="p">))</span>
            
<span class="nf">sample_zip</span><span class="p">(</span><span class="sh">"</span><span class="s">train2014.zip</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">train2014_sample.zip</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">sample_zip</span><span class="p">(</span><span class="sh">"</span><span class="s">val2014.zip</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">val2014_sample.zip</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load prepared embeddings
</span><span class="n">train_img_embeds</span> <span class="o">=</span> <span class="n">utils</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">"</span><span class="s">train_img_embeds.pickle</span><span class="sh">"</span><span class="p">)</span>
<span class="n">train_img_fns</span> <span class="o">=</span> <span class="n">utils</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">"</span><span class="s">train_img_fns.pickle</span><span class="sh">"</span><span class="p">)</span>
<span class="n">val_img_embeds</span> <span class="o">=</span> <span class="n">utils</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">"</span><span class="s">val_img_embeds.pickle</span><span class="sh">"</span><span class="p">)</span>
<span class="n">val_img_fns</span> <span class="o">=</span> <span class="n">utils</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">"</span><span class="s">val_img_fns.pickle</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># check shapes
</span><span class="nf">print</span><span class="p">(</span><span class="n">train_img_embeds</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">train_img_fns</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">val_img_embeds</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="nf">len</span><span class="p">(</span><span class="n">val_img_fns</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(82783, 2048) 82783
(40504, 2048) 40504
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># check prepared samples of images
</span><span class="nf">list</span><span class="p">(</span><span class="nf">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="nf">endswith</span><span class="p">(</span><span class="sh">"</span><span class="s">_sample.zip</span><span class="sh">"</span><span class="p">),</span> <span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="sh">"</span><span class="s">.</span><span class="sh">"</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['val2014_sample.zip', 'train2014_sample.zip']
</code></pre></div></div>

<h3 id="extract-captions-for-images">Extract captions for images</h3>

<p>Our file structure is set up as follows:</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">captions_train-val2014.zip</code> - zip file containing on folder <code class="language-plaintext highlighter-rouge">annotations</code>. This folder contains 2 json files.<br />
 a. <code class="language-plaintext highlighter-rouge">captions_train2014.json</code><br />
 b. <code class="language-plaintext highlighter-rouge">captions_val2014.json</code></li>
  <li><code class="language-plaintext highlighter-rouge">train2014_sample.zip</code> - contain a folder <code class="language-plaintext highlighter-rouge">train2014</code> which itself contains <code class="language-plaintext highlighter-rouge">jpg</code> images.</li>
  <li><code class="language-plaintext highlighter-rouge">val2014_sample.zip</code> - contain a folder <code class="language-plaintext highlighter-rouge">val2014</code> which itself contains <code class="language-plaintext highlighter-rouge">jpg</code> images.</li>
  <li><code class="language-plaintext highlighter-rouge">train_img_embeds.pickle</code> - batch outputs of our train set using the image encoder.</li>
  <li><code class="language-plaintext highlighter-rouge">train_img_fns.pickle</code> - list of strings containing file names of training set pictures.</li>
  <li><code class="language-plaintext highlighter-rouge">val_img_embeds.pickle</code> - batch outputs of our validation set using the image encoder.</li>
  <li><code class="language-plaintext highlighter-rouge">val_img_fns.pickle</code> - list of strings containing file names of validation set pictures.</li>
</ol>

<p>Before we can perform any modeling, the datasets need to be prepared to be feed into our model. The first step consists of extracting file names and captions from our json files. The following function is used to create a list of file names and a corresponding list of lists of captions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># extract captions from zip
</span><span class="k">def</span> <span class="nf">get_captions_for_fns</span><span class="p">(</span><span class="n">fns</span><span class="p">,</span> <span class="n">zip_fn</span><span class="p">,</span> <span class="n">zip_json_path</span><span class="p">):</span>
    <span class="c1"># fns = list of image names (COCO_train2014_000000270070.jpg)
</span>    <span class="c1"># zip_fn = zip file
</span>    <span class="c1"># zip_json_path = json file path
</span>
    <span class="c1"># create ZipFile object
</span>    <span class="c1"># contains two json files (train and validation)
</span>    <span class="c1"># json contains an image ID and a caption
</span>    <span class="n">zf</span> <span class="o">=</span> <span class="n">zipfile</span><span class="p">.</span><span class="nc">ZipFile</span><span class="p">(</span><span class="n">zip_fn</span><span class="p">)</span>

    <span class="c1"># load either train or validation json
</span>    <span class="n">j</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">zf</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">zip_json_path</span><span class="p">).</span><span class="nf">decode</span><span class="p">(</span><span class="sh">"</span><span class="s">utf8</span><span class="sh">"</span><span class="p">))</span>

    <span class="c1"># comprehension of images tags:
</span>    <span class="c1"># id for image id                'id': 391895
</span>    <span class="c1"># file_name for file name        'file_name': 'COCO_val2014_000000522418.jpg'
</span>    <span class="c1"># dictionary contains
</span>    <span class="c1">#   key = image_id
</span>    <span class="c1">#   value = file_name
</span>    <span class="n">id_to_fn</span> <span class="o">=</span> <span class="p">{</span><span class="n">img</span><span class="p">[</span><span class="sh">"</span><span class="s">id</span><span class="sh">"</span><span class="p">]:</span> <span class="n">img</span><span class="p">[</span><span class="sh">"</span><span class="s">file_name</span><span class="sh">"</span><span class="p">]</span> <span class="k">for</span> <span class="n">img</span> <span class="ow">in</span> <span class="n">j</span><span class="p">[</span><span class="sh">"</span><span class="s">images</span><span class="sh">"</span><span class="p">]}</span>

    <span class="c1"># use default dict to make it easier to compile several caption into one
</span>    <span class="n">fn_to_caps</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>

    <span class="c1"># annotations contains
</span>    <span class="c1"># image_id, id,  caption
</span>
    <span class="c1"># dictionary contains
</span>    <span class="c1">#   key = image_id
</span>    <span class="c1">#   values = list of captions
</span>    <span class="k">for</span> <span class="n">cap</span> <span class="ow">in</span> <span class="n">j</span><span class="p">[</span><span class="sh">'</span><span class="s">annotations</span><span class="sh">'</span><span class="p">]:</span>
        <span class="n">fn_to_caps</span><span class="p">[</span><span class="n">id_to_fn</span><span class="p">[</span><span class="n">cap</span><span class="p">[</span><span class="sh">'</span><span class="s">image_id</span><span class="sh">'</span><span class="p">]]].</span><span class="nf">append</span><span class="p">(</span><span class="n">cap</span><span class="p">[</span><span class="sh">'</span><span class="s">caption</span><span class="sh">'</span><span class="p">])</span>

    <span class="c1"># convert to normal dictionary
</span>    <span class="n">fn_to_caps</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="n">fn_to_caps</span><span class="p">)</span>

    <span class="c1"># create a list of lists
</span>    <span class="c1"># smart ordering
</span>    <span class="c1"># the captions are retrieved based on the image order from fns
</span>    <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">fn_to_caps</span><span class="p">[</span><span class="n">x</span><span class="p">],</span> <span class="n">fns</span><span class="p">))</span>
    
<span class="n">train_captions</span> <span class="o">=</span> <span class="nf">get_captions_for_fns</span><span class="p">(</span><span class="n">train_img_fns</span><span class="p">,</span> <span class="sh">"</span><span class="s">captions_train-val2014.zip</span><span class="sh">"</span><span class="p">,</span> 
                                      <span class="sh">"</span><span class="s">annotations/captions_train2014.json</span><span class="sh">"</span><span class="p">)</span>

<span class="n">val_captions</span> <span class="o">=</span> <span class="nf">get_captions_for_fns</span><span class="p">(</span><span class="n">val_img_fns</span><span class="p">,</span> <span class="sh">"</span><span class="s">captions_train-val2014.zip</span><span class="sh">"</span><span class="p">,</span> 
                                      <span class="sh">"</span><span class="s">annotations/captions_val2014.json</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># check shape
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Captions in training set: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">train_img_fns</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Captions in validation set: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">val_img_fns</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Captions in training set: 82783
Captions in validation set: 40504
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># look at training example (each has 5 captions)
</span><span class="k">def</span> <span class="nf">show_trainig_example</span><span class="p">(</span><span class="n">train_img_fns</span><span class="p">,</span> <span class="n">train_captions</span><span class="p">,</span> <span class="n">example_idx</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    You can change example_idx and see different images
    </span><span class="sh">"""</span>

    <span class="c1"># file containing all the images (training)
</span>    <span class="n">zf</span> <span class="o">=</span> <span class="n">zipfile</span><span class="p">.</span><span class="nc">ZipFile</span><span class="p">(</span><span class="sh">"</span><span class="s">train2014_sample.zip</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># create dictionary: image name : image captions
</span>    <span class="n">captions_by_file</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">train_img_fns</span><span class="p">,</span> <span class="n">train_captions</span><span class="p">))</span>

    <span class="c1"># set of all the image files
</span>    <span class="n">all_files</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">train_img_fns</span><span class="p">)</span>

    <span class="c1"># isolate selected file
</span>    <span class="n">found_files</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">filename</span><span class="p">.</span><span class="nf">rsplit</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">all_files</span><span class="p">,</span> <span class="n">zf</span><span class="p">.</span><span class="n">filelist</span><span class="p">))</span>
    <span class="n">example</span> <span class="o">=</span> <span class="n">found_files</span><span class="p">[</span><span class="n">example_idx</span><span class="p">]</span>

    <span class="c1"># decode image corresponding to selected file
</span>    <span class="n">img</span> <span class="o">=</span> <span class="n">utils</span><span class="p">.</span><span class="nf">decode_image_from_buf</span><span class="p">(</span><span class="n">zf</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">example</span><span class="p">))</span>
    
    <span class="c1"># plot image and set captions as title
</span>    <span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">utils</span><span class="p">.</span><span class="nf">image_center_crop</span><span class="p">(</span><span class="n">img</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">captions_by_file</span><span class="p">[</span><span class="n">example</span><span class="p">.</span><span class="n">filename</span><span class="p">.</span><span class="nf">rsplit</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
    
<span class="nf">show_trainig_example</span><span class="p">(</span><span class="n">train_img_fns</span><span class="p">,</span> <span class="n">train_captions</span><span class="p">,</span> <span class="n">example_idx</span><span class="o">=</span><span class="mi">15</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_22_0.png" />
</figure>

<h3 id="prepare-captions-for-training">Prepare captions for training</h3>

<p>Now that we have organized our images, we need to focus on the captions. Our captions are currently stored as list of strings. In order to be used in our RNN network, we will go through the following process:</p>
<ol>
  <li>Generate a vocabulary list.</li>
  <li>Add special encoding tokens:<br />
 a. padding<br />
 b. unknown word<br />
 c. start<br />
 d. end</li>
  <li>Use Word2Vec encoding on each caption.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># special tokens
</span><span class="n">PAD</span> <span class="o">=</span> <span class="sh">"</span><span class="s">#PAD#</span><span class="sh">"</span>
<span class="n">UNK</span> <span class="o">=</span> <span class="sh">"</span><span class="s">#UNK#</span><span class="sh">"</span>
<span class="n">START</span> <span class="o">=</span> <span class="sh">"</span><span class="s">#START#</span><span class="sh">"</span>
<span class="n">END</span> <span class="o">=</span> <span class="sh">"</span><span class="s">#END#</span><span class="sh">"</span>

<span class="k">def</span> <span class="nf">split_sentence</span><span class="p">(</span><span class="n">sentence</span><span class="p">):</span>
    <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="nf">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">,</span> <span class="n">re</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">\W+</span><span class="sh">'</span><span class="p">,</span> <span class="n">sentence</span><span class="p">.</span><span class="nf">lower</span><span class="p">())))</span>

<span class="k">def</span> <span class="nf">generate_vocabulary</span><span class="p">(</span><span class="n">train_captions</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Return {token: index} for all train tokens (words) that occur 5 times or more, 
        `index` should be from 0 to N, where N is a number of unique tokens in the resulting dictionary.
    Use `split_sentence` function to split sentence into tokens.
    Also, add PAD (for batch padding), UNK (unknown, out of vocabulary), 
        START (start of sentence) and END (end of sentence) tokens into the vocabulary.
    </span><span class="sh">"""</span>

    <span class="c1"># vocab contains all the words which appear 5 times or more
</span>    <span class="n">vocab</span> <span class="o">=</span> <span class="nf">defaultdict</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>

    <span class="c1"># create dictionary of "word": occurence_count
</span>    <span class="k">for</span> <span class="n">captions</span> <span class="ow">in</span> <span class="n">train_captions</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">caption</span> <span class="ow">in</span> <span class="n">captions</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="nf">split_sentence</span><span class="p">(</span><span class="n">caption</span><span class="p">):</span>
                <span class="n">vocab</span><span class="p">[</span><span class="n">word</span><span class="p">]</span><span class="o">+=</span><span class="mi">1</span>

    <span class="c1"># filter vocab to only keep word with occurence &gt;=5
</span>    <span class="n">vocab_filter</span> <span class="o">=</span> <span class="p">{</span><span class="n">word</span><span class="p">:</span><span class="n">occur</span> <span class="k">for</span> <span class="n">word</span><span class="p">,</span> <span class="n">occur</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">.</span><span class="nf">items</span><span class="p">()</span> <span class="k">if</span> <span class="n">occur</span><span class="o">&gt;=</span><span class="mi">5</span><span class="p">}</span>

    <span class="c1"># add special tokens
</span>    <span class="n">vocab_filter</span><span class="p">[</span><span class="n">PAD</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">vocab_filter</span><span class="p">[</span><span class="n">UNK</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">vocab_filter</span><span class="p">[</span><span class="n">START</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="n">vocab_filter</span><span class="p">[</span><span class="n">END</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="p">{</span><span class="n">token</span><span class="p">:</span> <span class="n">index</span> <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">token</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="nf">sorted</span><span class="p">(</span><span class="n">vocab_filter</span><span class="p">))}</span>
    
<span class="k">def</span> <span class="nf">caption_tokens_to_indices</span><span class="p">(</span><span class="n">captions</span><span class="p">,</span> <span class="n">vocab</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    `captions` argument is an array of arrays:
    [
        [
            </span><span class="sh">"</span><span class="s">image1 caption1</span><span class="sh">"</span><span class="s">,
            </span><span class="sh">"</span><span class="s">image1 caption2</span><span class="sh">"</span><span class="s">,
</span><span class="gp">            ...</span>
        <span class="p">],</span>
        <span class="p">[</span>
            <span class="sh">"</span><span class="s">image2 caption1</span><span class="sh">"</span><span class="p">,</span>
            <span class="sh">"</span><span class="s">image2 caption2</span><span class="sh">"</span><span class="p">,</span>
            <span class="bp">...</span>
        <span class="p">],</span>
        <span class="bp">...</span>
    <span class="p">]</span>
    <span class="n">Use</span> <span class="sb">`split_sentence`</span> <span class="n">function</span> <span class="n">to</span> <span class="n">split</span> <span class="n">sentence</span> <span class="n">into</span> <span class="n">tokens</span><span class="p">.</span>
    <span class="n">Replace</span> <span class="nb">all</span> <span class="n">tokens</span> <span class="k">with</span> <span class="n">vocabulary</span> <span class="n">indices</span><span class="p">,</span> <span class="n">use</span> <span class="n">UNK</span> <span class="k">for</span> <span class="n">unknown</span> <span class="nf">words </span><span class="p">(</span><span class="n">out</span> <span class="n">of</span> <span class="n">vocabulary</span><span class="p">).</span>
    <span class="n">Add</span> <span class="n">START</span> <span class="ow">and</span> <span class="n">END</span> <span class="n">tokens</span> <span class="n">to</span> <span class="n">start</span> <span class="ow">and</span> <span class="n">end</span> <span class="n">of</span> <span class="n">each</span> <span class="n">sentence</span> <span class="n">respectively</span><span class="p">.</span>
    <span class="n">For</span> <span class="n">the</span> <span class="n">example</span> <span class="n">above</span> <span class="n">you</span> <span class="n">should</span> <span class="n">produce</span> <span class="n">the</span> <span class="n">following</span><span class="p">:</span>
    <span class="p">[</span>
        <span class="p">[</span>
            <span class="p">[</span><span class="n">vocab</span><span class="p">[</span><span class="n">START</span><span class="p">],</span> <span class="n">vocab</span><span class="p">[</span><span class="sh">"</span><span class="s">image1</span><span class="sh">"</span><span class="p">],</span> <span class="n">vocab</span><span class="p">[</span><span class="sh">"</span><span class="s">caption1</span><span class="sh">"</span><span class="p">],</span> <span class="n">vocab</span><span class="p">[</span><span class="n">END</span><span class="p">]],</span>
            <span class="p">[</span><span class="n">vocab</span><span class="p">[</span><span class="n">START</span><span class="p">],</span> <span class="n">vocab</span><span class="p">[</span><span class="sh">"</span><span class="s">image1</span><span class="sh">"</span><span class="p">],</span> <span class="n">vocab</span><span class="p">[</span><span class="sh">"</span><span class="s">caption2</span><span class="sh">"</span><span class="p">],</span> <span class="n">vocab</span><span class="p">[</span><span class="n">END</span><span class="p">]],</span>
            <span class="bp">...</span>
        <span class="p">],</span>
        <span class="bp">...</span>
    <span class="p">]</span>
    <span class="sh">"""</span>
    <span class="c1"># results
</span>    <span class="n">res</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="c1"># loop over captions
</span>    <span class="k">for</span> <span class="n">caption_group</span> <span class="ow">in</span> <span class="n">captions</span><span class="p">:</span>

        <span class="c1"># save results for caption group
</span>        <span class="n">caption_group_res</span> <span class="o">=</span> <span class="p">[]</span>

        <span class="k">for</span> <span class="n">caption</span> <span class="ow">in</span> <span class="n">caption_group</span><span class="p">:</span>
            <span class="n">words</span> <span class="o">=</span> <span class="nf">split_sentence</span><span class="p">(</span><span class="n">caption</span><span class="p">)</span>
            <span class="n">word_index</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="n">vocab</span><span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="n">words</span><span class="p">))</span>
            
            <span class="c1"># insert START and END TOKEN
</span>            <span class="n">word_index</span><span class="p">.</span><span class="nf">insert</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">vocab</span><span class="p">[</span><span class="n">START</span><span class="p">])</span>
            <span class="n">word_index</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">vocab</span><span class="p">[</span><span class="n">END</span><span class="p">])</span>

            <span class="c1"># replace failed matches with UNKNOW
</span>            <span class="n">word_index</span> <span class="o">=</span> <span class="p">[</span><span class="n">vocab</span><span class="p">[</span><span class="n">UNK</span><span class="p">]</span> <span class="k">if</span> <span class="n">idx</span> <span class="o">==</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">idx</span> <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="n">word_index</span><span class="p">]</span>
            
            <span class="c1"># save results
</span>            <span class="n">caption_group_res</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">word_index</span><span class="p">)</span>

        <span class="n">res</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">caption_group_res</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">res</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># prepare vocabulary
</span><span class="n">vocab</span> <span class="o">=</span> <span class="nf">generate_vocabulary</span><span class="p">(</span><span class="n">train_captions</span><span class="p">)</span>
<span class="n">vocab_inverse</span> <span class="o">=</span> <span class="p">{</span><span class="n">idx</span><span class="p">:</span> <span class="n">w</span> <span class="k">for</span> <span class="n">w</span><span class="p">,</span> <span class="n">idx</span> <span class="ow">in</span> <span class="n">vocab</span><span class="p">.</span><span class="nf">items</span><span class="p">()}</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Vocabulary size: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">vocab</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Vocabulary size: 8769
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># replace tokens with indices
</span><span class="n">train_captions_indexed</span> <span class="o">=</span> <span class="nf">caption_tokens_to_indices</span><span class="p">(</span><span class="n">train_captions</span><span class="p">,</span> <span class="n">vocab</span><span class="p">)</span>
<span class="n">val_captions_indexed</span> <span class="o">=</span> <span class="nf">caption_tokens_to_indices</span><span class="p">(</span><span class="n">val_captions</span><span class="p">,</span> <span class="n">vocab</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Word2Vec example:</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">   caption:</span><span class="sh">'</span><span class="p">,</span><span class="n">train_captions</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">   tokenized caption:</span><span class="sh">'</span><span class="p">,</span><span class="n">train_captions_indexed</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
<span class="n">decoded</span> <span class="o">=</span> <span class="p">[</span><span class="n">vocab_inverse</span><span class="p">[</span><span class="n">idx</span><span class="p">]</span> <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="n">train_captions_indexed</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]]</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">   decoded caption:</span><span class="sh">'</span><span class="p">,</span> <span class="n">decoded</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Word2Vec example:
   caption: A long dirt road going through a forest.
   tokenized caption: [2, 54, 4462, 2305, 6328, 3354, 7848, 54, 3107, 0]
   decoded caption: ['#START#', 'a', 'long', 'dirt', 'road', 'going', 'through', 'a', 'forest', '#END#']
</code></pre></div></div>

<p>Captions have different length, but we need to batch them, that’s why we will add PAD tokens so that all sentences have an equal length.</p>

<p>Note: Padding tokens are ignore in the loss calculation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we will use this during training
</span><span class="k">def</span> <span class="nf">batch_captions_to_matrix</span><span class="p">(</span><span class="n">batch_captions</span><span class="p">,</span> <span class="n">pad_idx</span><span class="p">,</span> <span class="n">max_len</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    `batch_captions` is an array of arrays:
    [
        [vocab[START], ..., vocab[END]],
        [vocab[START], ..., vocab[END]],
</span><span class="gp">        ...</span>
    <span class="p">]</span>
    <span class="n">Put</span> <span class="n">vocabulary</span> <span class="n">indexed</span> <span class="n">captions</span> <span class="n">into</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span> <span class="n">of</span> <span class="nf">shape </span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">batch_captions</span><span class="p">),</span> <span class="n">columns</span><span class="p">),</span>
        <span class="n">where</span> <span class="sh">"</span><span class="s">columns</span><span class="sh">"</span> <span class="ow">is</span> <span class="nf">max</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">len</span><span class="p">,</span> <span class="n">batch_captions</span><span class="p">))</span> <span class="n">when</span> <span class="n">max_len</span> <span class="ow">is</span> <span class="bp">None</span>
        <span class="ow">and</span> <span class="sh">"</span><span class="s">columns</span><span class="sh">"</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="nf">max</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">len</span><span class="p">,</span> <span class="n">batch_captions</span><span class="p">)))</span> <span class="n">otherwise</span><span class="p">.</span>

<span class="s">    Add padding with pad_idx where necessary.
    Input example: [[1, 2, 3], [4, 5]]
    Output example: np.array([[1, 2, 3], [4, 5, pad_idx]]) if max_len=None
    Output example: np.array([[1, 2], [4, 5]]) if max_len=2
    Output example: np.array([[1, 2, 3], [4, 5, pad_idx]]) if max_len=100
    Try to use numpy, we need this function to be fast!
    </span><span class="sh">"""</span>
    <span class="c1"># find max len
</span>    <span class="k">if</span> <span class="n">max_len</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">max_len</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">len</span><span class="p">,</span> <span class="n">batch_captions</span><span class="p">))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">max_len</span> <span class="o">=</span> <span class="nf">min</span><span class="p">(</span><span class="n">max_len</span><span class="p">,</span> <span class="nf">max</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">len</span><span class="p">,</span> <span class="n">batch_captions</span><span class="p">)))</span>

    <span class="c1"># create result matrix
</span>    <span class="n">matrix</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">full</span><span class="p">((</span><span class="nf">len</span><span class="p">(</span><span class="n">batch_captions</span><span class="p">),</span> <span class="n">max_len</span><span class="p">),</span> <span class="n">fill_value</span><span class="o">=</span><span class="n">pad_idx</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">)</span>
    
    <span class="c1"># fill matrix
</span>    <span class="k">for</span> <span class="n">caption_idx</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">batch_captions</span><span class="p">)):</span>
        <span class="k">for</span> <span class="n">word_idx</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">batch_captions</span><span class="p">[</span><span class="n">caption_idx</span><span class="p">])):</span>

            <span class="c1"># fill if word_idx &lt;= max_len - 1
</span>            <span class="k">if</span> <span class="n">word_idx</span> <span class="o">&gt;=</span> <span class="n">max_len</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">matrix</span><span class="p">[</span><span class="n">caption_idx</span><span class="p">,</span> <span class="n">word_idx</span><span class="p">]</span> <span class="o">=</span> <span class="n">batch_captions</span><span class="p">[</span><span class="n">caption_idx</span><span class="p">][</span><span class="n">word_idx</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">matrix</span>
</code></pre></div></div>

<h1 id="model">Model</h1>

<h2 id="define-architecture">Define architecture</h2>

<p>The image encoding produced by the CNN is used as an input to our RNN model in addition to the captions. In other words, to predict the k-th word of a caption, we use the image encoding and the (k-1) first words as an input.</p>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/encoder_decoder_explained.png" />
</figure>

<p>In order to start building our architecture, we need to ensure shape compatibility at the junction of our two modules (CNN and RNN).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">output shape of the image encoder:, (?,{})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">train_img_embeds</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>output shape of the image encoder:, (?,2048)
</code></pre></div></div>

<p>As shown above, the image encoder currently outputs a vector of size 2048 for each image. This vector size is too large for typical models, we will therefore insert a bottleneck block between the CNN and the RNN.</p>

<p>In addition, word embedding is also used to convey word meaning into our LSTM model.</p>

<p>Therefore, the following steps must be taken:</p>

<p><strong>Images:</strong></p>
<ol>
  <li>Pass encoded image into bottleneck.</li>
  <li>Pass bottleneck output into a dense layer so output is expanded to match LSTM size.</li>
  <li>Feed bottleneck output into an LSTM cell.</li>
</ol>

<p><strong>Captions:</strong></p>
<ol>
  <li>Pass Word2Vec structure into a word embedding layer.</li>
  <li>Feed embedding into LSTM cell.</li>
  <li>Pass LSTM output into a Dense layer</li>
  <li>Predict next word of caption.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">IMG_EMBED_SIZE</span> <span class="o">=</span> <span class="n">train_img_embeds</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>      <span class="c1"># training image size (2048) stored in [None, IMG_EMBED_SIZE] array (images after passing through network minus last layer)
</span><span class="n">IMG_EMBED_BOTTLENECK</span> <span class="o">=</span> <span class="mi">120</span>                      <span class="c1"># dimension used for the bottleneck reduction from the embedded images 2048 -&gt; 120
</span><span class="n">WORD_EMBED_SIZE</span> <span class="o">=</span> <span class="mi">100</span>                           <span class="c1"># word embedding after LSTM
</span><span class="n">LSTM_UNITS</span> <span class="o">=</span> <span class="mi">300</span>                                <span class="c1"># numer of units for LSTM layer
</span><span class="n">LOGIT_BOTTLENECK</span> <span class="o">=</span> <span class="mi">120</span>                          <span class="c1"># bottleneck output of LSTM
</span><span class="n">pad_idx</span> <span class="o">=</span> <span class="n">vocab</span><span class="p">[</span><span class="n">PAD</span><span class="p">]</span>                            <span class="c1"># index of #PAD# tag
</span>
<span class="c1"># print info
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">IMG_EMBED_SIZE </span><span class="se">\t\t</span><span class="sh">"</span><span class="p">,</span> <span class="n">IMG_EMBED_SIZE</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">IMG_EMBED_BOTTLENECK</span><span class="se">\t</span><span class="sh">"</span><span class="p">,</span> <span class="n">IMG_EMBED_BOTTLENECK</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">WORD_EMBED_SIZE</span><span class="se">\t\t</span><span class="sh">"</span><span class="p">,</span> <span class="n">WORD_EMBED_SIZE</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">LSTM_UNITS</span><span class="se">\t\t</span><span class="sh">"</span><span class="p">,</span> <span class="n">LSTM_UNITS</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">LOGIT_BOTTLENECK</span><span class="se">\t</span><span class="sh">"</span><span class="p">,</span> <span class="n">LOGIT_BOTTLENECK</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>IMG_EMBED_SIZE 		 2048
IMG_EMBED_BOTTLENECK	 120
WORD_EMBED_SIZE		 100
LSTM_UNITS		 300
LOGIT_BOTTLENECK	 120
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># remember to reset your graph if you want to start building it from scratch!
</span><span class="n">s</span> <span class="o">=</span> <span class="nf">reset_tf_session</span><span class="p">()</span>
<span class="n">tf</span><span class="p">.</span><span class="nf">set_random_seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/Model.PNG" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">decoder</span><span class="p">:</span>

    <span class="c1">############
</span>    <span class="c1"># IMAGES
</span>    <span class="c1">############
</span>
    <span class="c1"># encoding -&gt; bottleneck -&gt; reshape for RNN
</span>
    <span class="c1"># start with encoded images
</span>    <span class="c1"># [batch_size, IMG_EMBED_SIZE] of CNN image features
</span>    <span class="n">img_embeds</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">placeholder</span><span class="p">(</span><span class="sh">'</span><span class="s">float32</span><span class="sh">'</span><span class="p">,</span> <span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="n">IMG_EMBED_SIZE</span><span class="p">],</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">img_embeds</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># we use bottleneck here to reduce the number of parameters
</span>    <span class="c1"># image embedding -&gt; bottleneck
</span>    <span class="n">img_embed_to_bottleneck</span> <span class="o">=</span> <span class="n">L</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="n">IMG_EMBED_BOTTLENECK</span><span class="p">,</span> 
                                      <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">IMG_EMBED_SIZE</span><span class="p">),</span> 
                                      <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">elu</span><span class="sh">'</span><span class="p">,</span>
                                      <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">img_embed_to_bottleneck</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># image embedding bottleneck -&gt; lstm initial state
</span>    <span class="n">img_embed_bottleneck_to_h0</span> <span class="o">=</span> <span class="n">L</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="n">LSTM_UNITS</span><span class="p">,</span>
                                         <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">IMG_EMBED_BOTTLENECK</span><span class="p">),</span>
                                         <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">elu</span><span class="sh">'</span><span class="p">,</span>
                                         <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">img_embed_bottleneck_to_h0</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1">############
</span>    <span class="c1"># WORDS
</span>    <span class="c1">############
</span>
    <span class="c1"># [batch_size, time steps] of word ids
</span>    <span class="n">sentences</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">placeholder</span><span class="p">(</span><span class="sh">'</span><span class="s">int32</span><span class="sh">'</span><span class="p">,</span> <span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">sentences</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># word -&gt; embedding
</span>    <span class="c1"># size: len(vocab) x WORD_EMBED_SIZE
</span>    <span class="n">word_embed</span> <span class="o">=</span> <span class="n">L</span><span class="p">.</span><span class="nc">Embedding</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">vocab</span><span class="p">),</span> <span class="n">WORD_EMBED_SIZE</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">word_embed</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># lstm cell (from tensorflow)
</span>    <span class="n">lstm</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">rnn_cell</span><span class="p">.</span><span class="nc">LSTMCell</span><span class="p">(</span><span class="n">LSTM_UNITS</span><span class="p">)</span>
    
    <span class="c1"># we use bottleneck here to reduce model complexity
</span>    <span class="c1"># lstm output -&gt; logits bottleneck
</span>    <span class="n">token_logits_bottleneck</span> <span class="o">=</span> <span class="n">L</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="n">LOGIT_BOTTLENECK</span><span class="p">,</span> 
                                      <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">LSTM_UNITS</span><span class="p">),</span>
                                      <span class="n">activation</span><span class="o">=</span><span class="sh">"</span><span class="s">elu</span><span class="sh">"</span><span class="p">,</span>
                                      <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">token_logits_bottleneck</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># logits bottleneck -&gt; logits for next token prediction
</span>    <span class="n">token_logits</span> <span class="o">=</span> <span class="n">L</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">vocab</span><span class="p">),</span>
                           <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="n">LOGIT_BOTTLENECK</span><span class="p">),</span>
                           <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">token_logits</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># initial lstm cell state of shape (None, LSTM_UNITS),
</span>    <span class="c1"># we need to condition it on `img_embeds` placeholder.
</span>    <span class="n">c0</span> <span class="o">=</span> <span class="n">h0</span> <span class="o">=</span> <span class="nf">img_embed_bottleneck_to_h0</span><span class="p">(</span><span class="nf">img_embed_to_bottleneck</span><span class="p">(</span><span class="n">img_embeds</span><span class="p">))</span>
    <span class="c1"># c0 = hidden state 0
</span>    <span class="c1"># h0 = output 0
</span>
    <span class="c1"># embed all tokens but the last for lstm input,
</span>    <span class="c1"># remember that L.Embedding is callable,
</span>    <span class="c1"># use `sentences` placeholder as input.
</span>    <span class="n">word_embeds</span> <span class="o">=</span> <span class="nf">word_embed</span><span class="p">(</span><span class="n">sentences</span><span class="p">[:,:</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    
    <span class="c1"># during training we use ground truth tokens `word_embeds` as context for next token prediction.
</span>    <span class="c1"># that means that we know all the inputs for our lstm and can get 
</span>    <span class="c1"># all the hidden states with one tensorflow operation (tf.nn.dynamic_rnn).
</span>    <span class="c1"># `hidden_states` has a shape of [batch_size, time steps, LSTM_UNITS].
</span>    <span class="c1"># the final output is not used.
</span>    <span class="n">hidden_states</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="nf">dynamic_rnn</span><span class="p">(</span><span class="n">cell</span><span class="o">=</span><span class="n">lstm</span><span class="p">,</span> <span class="n">inputs</span><span class="o">=</span><span class="n">word_embeds</span><span class="p">,</span>
                                         <span class="n">initial_state</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">rnn_cell</span><span class="p">.</span><span class="nc">LSTMStateTuple</span><span class="p">(</span><span class="n">c0</span><span class="p">,</span> <span class="n">h0</span><span class="p">))</span>
    <span class="c1"># tf.nn.rnn_cell.LSTMStateTuple takes two input:
</span>    <span class="c1"># Tuple used by LSTM Cells for `state_size`, `zero_state`, and output state.
</span>
    <span class="c1"># now we need to calculate token logits for all the hidden states
</span>    
    <span class="c1"># first, we reshape `hidden_states` to [-1, LSTM_UNITS]
</span>    <span class="c1"># current hidden stats are: [batch_size, time steps, LSTM_UNITS]
</span>    <span class="n">flat_hidden_states</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">hidden_states</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="n">LSTM_UNITS</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">flat_hidden_states</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># then, we calculate logits for next tokens using `token_logits_bottleneck` and `token_logits` layers
</span>    <span class="c1"># Step 1: take flat_hidden_states and pass them into the token_logits_bottleneck
</span>    <span class="c1"># Step 2: take the output and pass into token_logits
</span>    <span class="n">flat_token_logits</span> <span class="o">=</span> <span class="nf">token_logits</span><span class="p">(</span><span class="nf">token_logits_bottleneck</span><span class="p">(</span><span class="n">flat_hidden_states</span><span class="p">))</span>
    
    <span class="c1"># then, we flatten the ground truth token ids.
</span>    <span class="c1"># remember, that we predict next tokens for each time step,
</span>    <span class="c1"># use `sentences` placeholder.
</span>    <span class="n">flat_ground_truth</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">sentences</span><span class="p">[:,</span><span class="mi">1</span><span class="p">:],</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">flat_ground_truth</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># we need to know where we have real tokens (not padding) in `flat_ground_truth`,
</span>    <span class="c1"># we don't want to propagate the loss for padded output tokens,
</span>    <span class="c1"># fill `flat_loss_mask` with 1.0 for real tokens (not pad_idx) and 0.0 otherwise.
</span>    <span class="n">flat_loss_mask</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">cast</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">not_equal</span><span class="p">(</span><span class="n">flat_ground_truth</span><span class="p">,</span> <span class="n">pad_idx</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">float32</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">flat_loss_mask</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># compute cross-entropy between `flat_ground_truth` and `flat_token_logits` predicted by lstm
</span>    <span class="n">xent</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="nf">sparse_softmax_cross_entropy_with_logits</span><span class="p">(</span>
        <span class="n">labels</span><span class="o">=</span><span class="n">flat_ground_truth</span><span class="p">,</span> 
        <span class="n">logits</span><span class="o">=</span><span class="n">flat_token_logits</span>
    <span class="p">)</span>

    <span class="c1"># compute average `xent` over tokens with nonzero `flat_loss_mask`.
</span>    <span class="c1"># we don't want to account misclassification of PAD tokens, because that doesn't make sense,
</span>    <span class="c1"># we have PAD tokens for batching purposes only!
</span>    <span class="n">loss</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">reduce_sum</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">multiply</span><span class="p">(</span><span class="n">xent</span><span class="p">,</span> <span class="n">flat_loss_mask</span><span class="p">))</span><span class="o">/</span><span class="n">tf</span><span class="p">.</span><span class="nf">reduce_sum</span><span class="p">(</span><span class="n">flat_loss_mask</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># define optimizer operation to minimize the loss
</span><span class="n">optimizer</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">train</span><span class="p">.</span><span class="nc">AdamOptimizer</span><span class="p">(</span><span class="n">learning_rate</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span>
<span class="n">train_step</span> <span class="o">=</span> <span class="n">optimizer</span><span class="p">.</span><span class="nf">minimize</span><span class="p">(</span><span class="n">decoder</span><span class="p">.</span><span class="n">loss</span><span class="p">)</span>

<span class="c1"># will be used to save/load network weights.
# you need to reset your default graph and define it in the same way to be able to load the saved weights!
</span><span class="n">saver</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">train</span><span class="p">.</span><span class="nc">Saver</span><span class="p">()</span>

<span class="c1"># initialize all variables
</span><span class="n">s</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">global_variables_initializer</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">writer</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">summary</span><span class="p">.</span><span class="nc">FileWriter</span><span class="p">(</span><span class="sh">'</span><span class="s">./logs</span><span class="sh">'</span><span class="p">,</span> <span class="n">s</span><span class="p">.</span><span class="n">graph</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/TensorBoard.PNG" />
</figure>

<h2 id="training-loop">Training loop</h2>

<p>Before we can train the model, we need to generate our training and validation batches. Each batch contains a set of embedded images (from the InceptionV3 encoder) and indexed captions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_captions_indexed</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">train_captions_indexed</span><span class="p">)</span>
<span class="n">val_captions_indexed</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">val_captions_indexed</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># generate batch via random sampling of images and captions,
# we use `max_len` parameter to control the length of the captions (truncating long captions)
</span><span class="k">def</span> <span class="nf">generate_batch</span><span class="p">(</span><span class="n">images_embeddings</span><span class="p">,</span> <span class="n">indexed_captions</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">,</span> <span class="n">max_len</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    `images_embeddings` is a np.array of shape [number of images, IMG_EMBED_SIZE].
    `indexed_captions` holds 5 vocabulary indexed captions for each image:
    [
        [
            [vocab[START], vocab[</span><span class="sh">"</span><span class="s">image1</span><span class="sh">"</span><span class="s">], vocab[</span><span class="sh">"</span><span class="s">caption1</span><span class="sh">"</span><span class="s">], vocab[END]],
            [vocab[START], vocab[</span><span class="sh">"</span><span class="s">image1</span><span class="sh">"</span><span class="s">], vocab[</span><span class="sh">"</span><span class="s">caption2</span><span class="sh">"</span><span class="s">], vocab[END]],
</span><span class="gp">            ...</span>
        <span class="p">],</span>
        <span class="bp">...</span>
    <span class="p">]</span>
    <span class="n">Generate</span> <span class="n">a</span> <span class="n">random</span> <span class="n">batch</span> <span class="n">of</span> <span class="n">size</span> <span class="sb">`batch_size`</span><span class="p">.</span>
    <span class="n">Take</span> <span class="n">random</span> <span class="n">images</span> <span class="ow">and</span> <span class="n">choose</span> <span class="n">one</span> <span class="n">random</span> <span class="n">caption</span> <span class="k">for</span> <span class="n">each</span> <span class="n">image</span><span class="p">.</span>
    <span class="n">Remember</span> <span class="n">to</span> <span class="n">use</span> <span class="sb">`batch_captions_to_matrix`</span> <span class="k">for</span> <span class="n">padding</span> <span class="ow">and</span> <span class="n">respect</span> <span class="sb">`max_len`</span> <span class="n">parameter</span><span class="p">.</span>
    <span class="n">Return</span> <span class="n">feed</span> <span class="nb">dict</span> <span class="p">{</span><span class="n">decoder</span><span class="p">.</span><span class="n">img_embeds</span><span class="p">:</span> <span class="p">...,</span> <span class="n">decoder</span><span class="p">.</span><span class="n">sentences</span><span class="p">:</span> <span class="p">...}.</span>
    <span class="sh">"""</span>
    <span class="n">batch_image_embeddings</span> <span class="o">=</span> <span class="nf">list</span><span class="p">()</span>
    <span class="n">batch_captions_matrix</span> <span class="o">=</span> <span class="nf">list</span><span class="p">()</span>

    <span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">batch_size</span><span class="p">):</span>

        <span class="c1"># select a random image
</span>        <span class="n">img_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="n">images_embeddings</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
        <span class="n">batch_image_embeddings</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">images_embeddings</span><span class="p">[</span><span class="n">img_idx</span><span class="p">])</span>

        <span class="c1"># select a random caption amongst the 5 for each images
</span>        <span class="n">caption_idx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
        <span class="n">batch_captions_matrix</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">indexed_captions</span><span class="p">[</span><span class="n">img_idx</span><span class="p">][</span><span class="n">caption_idx</span><span class="p">])</span>

    <span class="c1"># pad the batch if necessary
</span>    <span class="n">batch_captions_matrix</span> <span class="o">=</span> <span class="nf">batch_captions_to_matrix</span><span class="p">(</span><span class="n">batch_captions_matrix</span><span class="p">,</span> <span class="n">pad_idx</span><span class="p">,</span> <span class="n">max_len</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="p">{</span><span class="n">decoder</span><span class="p">.</span><span class="n">img_embeds</span><span class="p">:</span> <span class="n">batch_image_embeddings</span><span class="p">,</span> 
            <span class="n">decoder</span><span class="p">.</span><span class="n">sentences</span><span class="p">:</span> <span class="n">batch_captions_matrix</span><span class="p">}</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">batch_size</span> <span class="o">=</span> <span class="mi">64</span>
<span class="n">n_epochs</span> <span class="o">=</span> <span class="mi">30</span>
<span class="n">n_batches_per_epoch</span> <span class="o">=</span> <span class="mi">1000</span>
<span class="n">n_validation_batches</span> <span class="o">=</span> <span class="mi">100</span>  <span class="c1"># how many batches are used for validation after each epoch
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># you can load trained weights here
# uncomment the next line if you need to load weights
# saver.restore(s, get_checkpoint_path(epoch=4))
</span></code></pre></div></div>

<p>Look at the training and validation loss, they should be decreasing!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># actual training loop
</span><span class="n">MAX_LEN</span> <span class="o">=</span> <span class="mi">20</span>  <span class="c1"># truncate long captions to speed up training
</span>
<span class="c1"># to make training reproducible
</span><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>

<span class="n">losses_train</span> <span class="o">=</span> <span class="p">[]</span> 
<span class="n">losses_val</span> <span class="o">=</span> <span class="p">[]</span>

<span class="c1"># loop over n_epochs
</span><span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_epochs</span><span class="p">):</span>
    
    <span class="c1"># set loss to 0
</span>    <span class="n">train_loss</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">pbar</span> <span class="o">=</span> <span class="n">tqdm_utils</span><span class="p">.</span><span class="nf">tqdm_notebook_failsafe</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="n">n_batches_per_epoch</span><span class="p">))</span>
    <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="n">pbar</span><span class="p">:</span>

        <span class="c1"># run optimizer and save loss
</span>        <span class="c1"># genenrate batch
</span>        <span class="n">train_loss</span> <span class="o">+=</span> <span class="n">s</span><span class="p">.</span><span class="nf">run</span><span class="p">([</span><span class="n">decoder</span><span class="p">.</span><span class="n">loss</span><span class="p">,</span> <span class="n">train_step</span><span class="p">],</span> 
                            <span class="nf">generate_batch</span><span class="p">(</span><span class="n">train_img_embeds</span><span class="p">,</span> 
                                           <span class="n">train_captions_indexed</span><span class="p">,</span> 
                                           <span class="n">batch_size</span><span class="p">,</span> 
                                           <span class="n">MAX_LEN</span><span class="p">))[</span><span class="mi">0</span><span class="p">]</span>
        <span class="c1"># couter to average the loss
</span>        <span class="n">counter</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">pbar</span><span class="p">.</span><span class="nf">set_description</span><span class="p">(</span><span class="sh">"</span><span class="s">Training loss: %f</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">train_loss</span> <span class="o">/</span> <span class="n">counter</span><span class="p">))</span>
    
    <span class="c1"># average loss per epochs
</span>    <span class="n">train_loss</span> <span class="o">/=</span> <span class="n">n_batches_per_epoch</span>
    
    <span class="c1"># set validation loss = 0
</span>    <span class="n">val_loss</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c1"># perform validation over n_validation_batches
</span>    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_validation_batches</span><span class="p">):</span>
        <span class="n">val_loss</span> <span class="o">+=</span> <span class="n">s</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">decoder</span><span class="p">.</span><span class="n">loss</span><span class="p">,</span> <span class="nf">generate_batch</span><span class="p">(</span><span class="n">val_img_embeds</span><span class="p">,</span>
                                                       <span class="n">val_captions_indexed</span><span class="p">,</span> 
                                                       <span class="n">batch_size</span><span class="p">,</span> 
                                                       <span class="n">MAX_LEN</span><span class="p">))</span>
    <span class="n">val_loss</span> <span class="o">/=</span> <span class="n">n_validation_batches</span>
    
    <span class="n">losses_train</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">train_loss</span><span class="p">)</span>
    <span class="n">losses_val</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">val_loss</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Epoch: {}, train loss: {}, val loss: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">epoch</span><span class="p">,</span> <span class="n">train_loss</span><span class="p">,</span> <span class="n">val_loss</span><span class="p">))</span>

    <span class="c1"># save weights after finishing epoch
</span>    <span class="n">saver</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nf">get_checkpoint_path</span><span class="p">(</span><span class="n">epoch</span><span class="p">))</span>
    
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Finished!</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>**************************************************
Training loss: 4.304580
Epoch: 0, train loss: 4.304580224990845, val loss: 3.7320654726028444
**************************************************
Training loss: 3.423155
Epoch: 1, train loss: 3.423154556274414, val loss: 3.1873935198783876
**************************************************
Training loss: 3.025284
Epoch: 2, train loss: 3.0252837190628052, val loss: 2.9603699707984923
**************************************************
Training loss: 2.874783
Epoch: 3, train loss: 2.8747830657958984, val loss: 2.870602424144745
**************************************************
Training loss: 2.775481
Epoch: 4, train loss: 2.7754814348220824, val loss: 2.789423477649689
**************************************************
Training loss: 2.701144
Epoch: 5, train loss: 2.701143687963486, val loss: 2.749979841709137
WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow_core/python/training/saver.py:963: remove_checkpoint (from tensorflow.python.training.checkpoint_management) is deprecated and will be removed in a future version.
Instructions for updating:
Use standard file APIs to delete files with this prefix.
**************************************************
Training loss: 2.645951
Epoch: 6, train loss: 2.645950514793396, val loss: 2.7031424283981322
**************************************************
Training loss: 2.606195
Epoch: 7, train loss: 2.606195085763931, val loss: 2.6634791040420533
**************************************************
Training loss: 2.573536
Epoch: 8, train loss: 2.5735364294052125, val loss: 2.652997634410858
**************************************************
Training loss: 2.536031
Epoch: 9, train loss: 2.536031443834305, val loss: 2.6406166887283327
**************************************************
Training loss: 2.517448
Epoch: 10, train loss: 2.517448023319244, val loss: 2.6462294101715087
**************************************************
Training loss: 2.500151
Epoch: 11, train loss: 2.50015096616745, val loss: 2.603032250404358
**************************************************
Training loss: 2.474091
Epoch: 12, train loss: 2.474090936422348, val loss: 2.6064940333366393
**************************************************
Training loss: 2.454694
Epoch: 13, train loss: 2.4546935455799104, val loss: 2.5683004093170165
**************************************************
Training loss: 2.438749
Epoch: 14, train loss: 2.4387487576007842, val loss: 2.5649581503868104
**************************************************
Training loss: 2.420365
Epoch: 15, train loss: 2.420364526987076, val loss: 2.5585679984092713
**************************************************
Training loss: 2.407471
Epoch: 16, train loss: 2.407471377849579, val loss: 2.5467315411567686
**************************************************
Training loss: 2.395392
Epoch: 17, train loss: 2.3953915696144104, val loss: 2.523040156364441
**************************************************
Training loss: 2.386266
Epoch: 18, train loss: 2.3862663419246672, val loss: 2.5338460755348207
**************************************************
Training loss: 2.367717
Epoch: 19, train loss: 2.3677170577049256, val loss: 2.521715567111969
**************************************************
Training loss: 2.362852
Epoch: 20, train loss: 2.3628519823551177, val loss: 2.528599863052368
**************************************************
Training loss: 2.349724
Epoch: 21, train loss: 2.349724320650101, val loss: 2.508955328464508
**************************************************
Training loss: 2.344105
Epoch: 22, train loss: 2.344105479001999, val loss: 2.5082675886154173
**************************************************
Training loss: 2.334501
Epoch: 23, train loss: 2.334501156330109, val loss: 2.5232016921043394
**************************************************
Training loss: 2.325773
Epoch: 24, train loss: 2.3257727496623994, val loss: 2.497510917186737
**************************************************
Training loss: 2.320536
Epoch: 25, train loss: 2.320536171793938, val loss: 2.4894205212593077
**************************************************
Training loss: 2.312937
Epoch: 26, train loss: 2.3129370038509367, val loss: 2.4940505599975586
**************************************************
Training loss: 2.303621
Epoch: 27, train loss: 2.3036206084489823, val loss: 2.49146288394928
**************************************************
Training loss: 2.298418
Epoch: 28, train loss: 2.2984176824092866, val loss: 2.4823158597946167
**************************************************
Training loss: 2.295024
Epoch: 29, train loss: 2.2950236924886704, val loss: 2.4892579102516175
Finished!
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">#348ABD</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">#A60628</span><span class="sh">'</span><span class="p">]</span>
<span class="n">epochs</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="n">n_epochs</span><span class="p">)</span>
<span class="n">losses</span> <span class="o">=</span> <span class="p">[</span><span class="n">losses_train</span><span class="p">,</span> <span class="n">losses_val</span><span class="p">]</span> 

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">4</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">epochs</span><span class="p">,</span> <span class="n">losses</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">lw</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">training</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">epochs</span><span class="p">,</span> <span class="n">losses</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">lw</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">validation</span><span class="sh">'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">loss</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">epoch</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Training metric</span><span class="sh">'</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_53_0.png" />
</figure>

<p>After approximately 20 epochs, the validation loss starts to plateau. The gap between the training loss and validation loss increases and it is therefore a good decision to stop the learning at around 30 epochs. This will prevent over-fitting the training set.</p>

<p>With our newly trained model, we can now start making predictions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># check that it's learnt something, outputs accuracy of next word prediction (should be around 0.5)
</span><span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span><span class="p">,</span> <span class="n">log_loss</span>

<span class="c1"># create sentence based on word mapping
</span><span class="k">def</span> <span class="nf">decode_sentence</span><span class="p">(</span><span class="n">sentence_indices</span><span class="p">):</span>
    <span class="k">return</span> <span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="n">vocab_inverse</span><span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="n">sentence_indices</span><span class="p">)))</span>

<span class="k">def</span> <span class="nf">check_after_training</span><span class="p">(</span><span class="n">n_examples</span><span class="p">):</span>
    <span class="c1"># create batches
</span>    <span class="n">fd</span> <span class="o">=</span> <span class="nf">generate_batch</span><span class="p">(</span><span class="n">train_img_embeds</span><span class="p">,</span> <span class="n">train_captions_indexed</span><span class="p">,</span> <span class="n">batch_size</span><span class="p">)</span>

    <span class="c1"># flatten token and pass sentence through netowrk
</span>    <span class="n">logits</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">.</span><span class="n">flat_token_logits</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">fd</span><span class="p">)</span>
    <span class="n">truth</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">.</span><span class="n">flat_ground_truth</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">fd</span><span class="p">)</span>
    <span class="n">mask</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">.</span><span class="n">flat_loss_mask</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">fd</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>

    <span class="c1"># compute loss and accuracy
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Loss:</span><span class="sh">"</span><span class="p">,</span> <span class="n">decoder</span><span class="p">.</span><span class="n">loss</span><span class="p">.</span><span class="nf">eval</span><span class="p">(</span><span class="n">fd</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Accuracy:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">accuracy_score</span><span class="p">(</span><span class="n">logits</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)[</span><span class="n">mask</span><span class="p">],</span> <span class="n">truth</span><span class="p">[</span><span class="n">mask</span><span class="p">]))</span>
    <span class="nf">print</span><span class="p">()</span>

    <span class="c1"># display prediction for n random examples
</span>    <span class="k">for</span> <span class="n">example_idx</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">n_examples</span><span class="p">):</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Example</span><span class="sh">"</span><span class="p">,</span> <span class="n">example_idx</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Predicted:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">decode_sentence</span><span class="p">(</span><span class="n">logits</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">).</span><span class="nf">reshape</span><span class="p">((</span><span class="n">batch_size</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))[</span><span class="n">example_idx</span><span class="p">]))</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Truth:</span><span class="sh">"</span><span class="p">,</span> <span class="nf">decode_sentence</span><span class="p">(</span><span class="n">truth</span><span class="p">.</span><span class="nf">reshape</span><span class="p">((</span><span class="n">batch_size</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">))[</span><span class="n">example_idx</span><span class="p">]))</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>

<span class="nf">check_after_training</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Loss: 2.2630808
Accuracy: 0.4940867279894875

Example 0
Predicted: a bike group of bicycles parked in to each building #END# #END# #END# #END# #END# #END# #END# #END# #END# #END# #END# #END# #END#
Truth: a large group of bikes parked next to a building #END# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD#

Example 1
Predicted: a kitchen kitchen with with appliances and and utensils #END# #END# #END# #END# #END# #END# #END# #END# #END# #END# #END# #END# #END# #END#
Truth: a white kitchen filled with pots pans and dishes #END# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD#

Example 2
Predicted: a adult zebra is a younger zebra in a of a zebra #END# a zoo #END# #END# #END# #END# #END# #END# #END# #END#
Truth: an older zebra and a younger one in front of a lake at a zoo #END# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD# #PAD#
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># save last graph weights to file!
</span><span class="n">saver</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nf">get_checkpoint_path</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>'/content/gdrive/My Drive/colab/weights'
</code></pre></div></div>

<h1 id="applying-model">Applying model</h1>

<p>Now that we have trained our model, we need to adjust its structure to make predictions. We will keep the weights obtained during training and adjust the behavior so that the model predicts one word at a time and uses the first k words to predict word (k+1).</p>

<p>It will work as follows:</p>
<ul>
  <li>take an image as an input and embed it</li>
  <li>condition lstm on that embedding</li>
  <li>predict the next token given a START input token</li>
  <li>use predicted token as an input at next time step</li>
  <li>iterate until you predict an END token</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">final_model</span><span class="p">:</span>
    <span class="c1"># CNN encoder
</span>    <span class="n">encoder</span><span class="p">,</span> <span class="n">preprocess_for_model</span> <span class="o">=</span> <span class="nf">get_cnn_encoder</span><span class="p">()</span>
    <span class="n">saver</span><span class="p">.</span><span class="nf">restore</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nf">get_checkpoint_path</span><span class="p">())</span>  <span class="c1"># keras applications corrupt our graph, so we restore trained weights
</span>    
    <span class="c1"># containers for current lstm state
</span>    <span class="n">lstm_c</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nc">Variable</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">zeros</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="n">LSTM_UNITS</span><span class="p">]),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">cell</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">lstm_h</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nc">Variable</span><span class="p">(</span><span class="n">tf</span><span class="p">.</span><span class="nf">zeros</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span> <span class="n">LSTM_UNITS</span><span class="p">]),</span> <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">hidden</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># input images
</span>    <span class="n">input_images</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">placeholder</span><span class="p">(</span><span class="sh">'</span><span class="s">float32</span><span class="sh">'</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="n">IMG_SIZE</span><span class="p">,</span> <span class="n">IMG_SIZE</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">images</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># get image embeddings
</span>    <span class="n">img_embeds</span> <span class="o">=</span> <span class="nf">encoder</span><span class="p">(</span><span class="n">input_images</span><span class="p">)</span>

    <span class="c1"># initialize lstm state conditioned on image
</span>    <span class="n">init_c</span> <span class="o">=</span> <span class="n">init_h</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">.</span><span class="nf">img_embed_bottleneck_to_h0</span><span class="p">(</span><span class="n">decoder</span><span class="p">.</span><span class="nf">img_embed_to_bottleneck</span><span class="p">(</span><span class="n">img_embeds</span><span class="p">))</span>
    <span class="n">init_lstm</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">assign</span><span class="p">(</span><span class="n">lstm_c</span><span class="p">,</span> <span class="n">init_c</span><span class="p">),</span> <span class="n">tf</span><span class="p">.</span><span class="nf">assign</span><span class="p">(</span><span class="n">lstm_h</span><span class="p">,</span> <span class="n">init_h</span><span class="p">)</span>
    
    <span class="c1"># current word index
</span>    <span class="n">current_word</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="nf">placeholder</span><span class="p">(</span><span class="sh">'</span><span class="s">int32</span><span class="sh">'</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">current_input</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># embedding for current word
</span>    <span class="n">word_embed</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">.</span><span class="nf">word_embed</span><span class="p">(</span><span class="n">current_word</span><span class="p">)</span>

    <span class="c1"># apply lstm cell, get new lstm states
</span>    <span class="n">new_c</span><span class="p">,</span> <span class="n">new_h</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">.</span><span class="nf">lstm</span><span class="p">(</span><span class="n">word_embed</span><span class="p">,</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="n">rnn_cell</span><span class="p">.</span><span class="nc">LSTMStateTuple</span><span class="p">(</span><span class="n">lstm_c</span><span class="p">,</span> <span class="n">lstm_h</span><span class="p">))[</span><span class="mi">1</span><span class="p">]</span>

    <span class="c1"># compute logits for next token
</span>    <span class="n">new_logits</span> <span class="o">=</span> <span class="n">decoder</span><span class="p">.</span><span class="nf">token_logits</span><span class="p">(</span><span class="n">decoder</span><span class="p">.</span><span class="nf">token_logits_bottleneck</span><span class="p">(</span><span class="n">new_h</span><span class="p">))</span>
    
    <span class="c1"># compute probabilities for next token
</span>    <span class="n">new_probs</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">nn</span><span class="p">.</span><span class="nf">softmax</span><span class="p">(</span><span class="n">new_logits</span><span class="p">)</span>

    <span class="c1"># `one_step` outputs probabilities of next token and updates lstm hidden state
</span>    <span class="n">one_step</span> <span class="o">=</span> <span class="n">new_probs</span><span class="p">,</span> <span class="n">tf</span><span class="p">.</span><span class="nf">assign</span><span class="p">(</span><span class="n">lstm_c</span><span class="p">,</span> <span class="n">new_c</span><span class="p">),</span> <span class="n">tf</span><span class="p">.</span><span class="nf">assign</span><span class="p">(</span><span class="n">lstm_h</span><span class="p">,</span> <span class="n">new_h</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>INFO:tensorflow:Restoring parameters from /content/gdrive/My Drive/colab/weights
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># look at how temperature works for probability distributions
# for high temperature we have more uniform distribution
</span><span class="n">_</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">])</span>
<span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s"> </span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="n">_</span><span class="o">**</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">t</span><span class="p">)</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">_</span><span class="o">**</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">t</span><span class="p">)))),</span> <span class="sh">"</span><span class="s">with temperature</span><span class="sh">"</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.9999999997962965 2.0370359759195462e-10 1.2676505999700117e-70 with temperature 0.01
0.9030370433250645 0.09696286420394223 9.247099323648666e-08 with temperature 0.1
0.5 0.4 0.1 with temperature 1
0.35344772639219624 0.34564811360592396 0.3009041600018798 with temperature 10
0.33536728048099185 0.33461976434857876 0.3300129551704294 with temperature 100
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># this is an actual prediction loop
</span><span class="k">def</span> <span class="nf">generate_caption</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">t</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">sample</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">max_len</span><span class="o">=</span><span class="mi">20</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Generate caption for given image.
    if `sample` is True, we will sample next token from predicted probability distribution.
    `t` is a temperature during that sampling,
        higher `t` causes more uniform-like distribution = more chaos.
    </span><span class="sh">"""</span>
    <span class="c1"># condition lstm on the image
</span>    <span class="n">s</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">final_model</span><span class="p">.</span><span class="n">init_lstm</span><span class="p">,</span> 
          <span class="p">{</span><span class="n">final_model</span><span class="p">.</span><span class="n">input_images</span><span class="p">:</span> <span class="p">[</span><span class="n">image</span><span class="p">]})</span>
    
    <span class="c1"># current caption
</span>    <span class="c1"># start with only START token
</span>    <span class="n">caption</span> <span class="o">=</span> <span class="p">[</span><span class="n">vocab</span><span class="p">[</span><span class="n">START</span><span class="p">]]</span>
    
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">max_len</span><span class="p">):</span>
        <span class="n">next_word_probs</span> <span class="o">=</span> <span class="n">s</span><span class="p">.</span><span class="nf">run</span><span class="p">(</span><span class="n">final_model</span><span class="p">.</span><span class="n">one_step</span><span class="p">,</span> 
                                <span class="p">{</span><span class="n">final_model</span><span class="p">.</span><span class="n">current_word</span><span class="p">:</span> <span class="p">[</span><span class="n">caption</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]})[</span><span class="mi">0</span><span class="p">]</span>
        <span class="n">next_word_probs</span> <span class="o">=</span> <span class="n">next_word_probs</span><span class="p">.</span><span class="nf">ravel</span><span class="p">()</span>
        
        <span class="c1"># apply temperature
</span>        <span class="n">next_word_probs</span> <span class="o">=</span> <span class="n">next_word_probs</span><span class="o">**</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">t</span><span class="p">)</span> <span class="o">/</span> <span class="n">np</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">next_word_probs</span><span class="o">**</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="n">t</span><span class="p">))</span>

        <span class="k">if</span> <span class="n">sample</span><span class="p">:</span>
            <span class="n">next_word</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">vocab</span><span class="p">)),</span> <span class="n">p</span><span class="o">=</span><span class="n">next_word_probs</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">next_word</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">next_word_probs</span><span class="p">)</span>

        <span class="n">caption</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">next_word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">next_word</span> <span class="o">==</span> <span class="n">vocab</span><span class="p">[</span><span class="n">END</span><span class="p">]:</span>
            <span class="k">break</span>
       
    <span class="k">return</span> <span class="nf">list</span><span class="p">(</span><span class="nf">map</span><span class="p">(</span><span class="n">vocab_inverse</span><span class="p">.</span><span class="n">get</span><span class="p">,</span> <span class="n">caption</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># look at validation prediction example
</span><span class="k">def</span> <span class="nf">apply_model_to_image_raw_bytes</span><span class="p">(</span><span class="n">raw</span><span class="p">):</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">utils</span><span class="p">.</span><span class="nf">decode_image_from_buf</span><span class="p">(</span><span class="n">raw</span><span class="p">)</span>
    <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">grid</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
    <span class="n">img</span> <span class="o">=</span> <span class="n">utils</span><span class="p">.</span><span class="nf">crop_and_preprocess</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="n">IMG_SIZE</span><span class="p">,</span> <span class="n">IMG_SIZE</span><span class="p">),</span> <span class="n">final_model</span><span class="p">.</span><span class="n">preprocess_for_model</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="nf">generate_caption</span><span class="p">(</span><span class="n">img</span><span class="p">)[</span><span class="mi">1</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">show_valid_example</span><span class="p">(</span><span class="n">val_img_fns</span><span class="p">,</span> <span class="n">example_idx</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="n">zf</span> <span class="o">=</span> <span class="n">zipfile</span><span class="p">.</span><span class="nc">ZipFile</span><span class="p">(</span><span class="sh">"</span><span class="s">val2014_sample.zip</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">all_files</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">val_img_fns</span><span class="p">)</span>
    <span class="n">found_files</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">filename</span><span class="p">.</span><span class="nf">rsplit</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="n">all_files</span><span class="p">,</span> <span class="n">zf</span><span class="p">.</span><span class="n">filelist</span><span class="p">))</span>
    <span class="n">example</span> <span class="o">=</span> <span class="n">found_files</span><span class="p">[</span><span class="n">example_idx</span><span class="p">]</span>
    <span class="nf">apply_model_to_image_raw_bytes</span><span class="p">(</span><span class="n">zf</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">example</span><span class="p">))</span>
    
<span class="nf">show_valid_example</span><span class="p">(</span><span class="n">val_img_fns</span><span class="p">,</span> <span class="n">example_idx</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a baseball player is swinging at a pitch
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_61_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># sample more images from validation
</span><span class="k">for</span> <span class="n">idx</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">choice</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">zipfile</span><span class="p">.</span><span class="nc">ZipFile</span><span class="p">(</span><span class="sh">"</span><span class="s">val2014_sample.zip</span><span class="sh">"</span><span class="p">).</span><span class="n">filelist</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span> <span class="mi">10</span><span class="p">):</span>
    <span class="nf">show_valid_example</span><span class="p">(</span><span class="n">val_img_fns</span><span class="p">,</span> <span class="n">example_idx</span><span class="o">=</span><span class="n">idx</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a group of people standing around a table with a cake
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_62_1.png" />
</figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a woman sitting at a table with a plate of food
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_62_3.png" />
</figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a plate with a sandwich and a cup of coffee on it
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_62_5.png" />
</figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a man and a woman on a boat on a river
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_62_7.png" />
</figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a group of people riding skis down a snow covered slope
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_62_9.png" />
</figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a dog is eating a banana with a toy
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_62_11.png" />
</figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a man is playing tennis on a court
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_62_13.png" />
</figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a group of people standing in a room with a remote
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_62_15.png" />
</figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a black bear is standing in the woods
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_62_17.png" />
</figure>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a pizza with cheese and toppings on a plate
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/output_62_19.png" />
</figure>]]></content><author><name>Thibault Dody</name></author><category term="Tensorflow" /><category term="ML" /><category term="python" /><summary type="html"><![CDATA[Implementation of a caption generator model.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/tile.png" /><media:content medium="image" url="https://tdody.github.io/assets/img/2019-12-08-Image-Caption/tile.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Kaggle: Sales Forecast (Top 18%)</title><link href="http://localhost:4000/Sales-Forecast/" rel="alternate" type="text/html" title="Kaggle: Sales Forecast (Top 18%)" /><published>2019-11-10T00:00:00-05:00</published><updated>2019-11-10T00:00:00-05:00</updated><id>http://localhost:4000/Sales-Forecast</id><content type="html" xml:base="http://localhost:4000/Sales-Forecast/"><![CDATA[<footer id="attribution" style="float:right; color:#999; background:#fff;">
Created by Thibault Dody, 05/10/2019.
</footer>

<h1 id="predict-future-sales">Predict Future Sales</h1>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/header.png" style="height=288px;" />
</figure>

<p>Final project for “How to win a data science competition” Coursera course</p>

<h1>Table of Contents<span class="tocSkip"></span></h1>
<div class="toc"><ul class="toc-item"><li><span><a href="#Introduction" data-toc-modified-id="Introduction-1"><span class="toc-item-num">1&nbsp;&nbsp;</span>Introduction</a></span><ul class="toc-item"><li><span><a href="#Data-Structure" data-toc-modified-id="Data-Structure-1.1"><span class="toc-item-num">1.1&nbsp;&nbsp;</span>Data Structure</a></span></li><li><span><a href="#Objective" data-toc-modified-id="Objective-1.2"><span class="toc-item-num">1.2&nbsp;&nbsp;</span>Objective</a></span></li></ul></li><li><span><a href="#Load-Libraries-and-Dataset" data-toc-modified-id="Load-Libraries-and-Dataset-2"><span class="toc-item-num">2&nbsp;&nbsp;</span>Load Libraries and Dataset</a></span><ul class="toc-item"><li><span><a href="#Sales-Dataset" data-toc-modified-id="Sales-Dataset-2.1"><span class="toc-item-num">2.1&nbsp;&nbsp;</span>Sales Dataset</a></span></li><li><span><a href="#Item-Dataset" data-toc-modified-id="Item-Dataset-2.2"><span class="toc-item-num">2.2&nbsp;&nbsp;</span>Item Dataset</a></span></li><li><span><a href="#Item-Categories-Dataset" data-toc-modified-id="Item-Categories-Dataset-2.3"><span class="toc-item-num">2.3&nbsp;&nbsp;</span>Item Categories Dataset</a></span></li><li><span><a href="#Shop-Dataset" data-toc-modified-id="Shop-Dataset-2.4"><span class="toc-item-num">2.4&nbsp;&nbsp;</span>Shop Dataset</a></span></li></ul></li><li><span><a href="#Database-schema" data-toc-modified-id="Database-schema-3"><span class="toc-item-num">3&nbsp;&nbsp;</span>Database schema</a></span></li><li><span><a href="#Verification-and-Probing" data-toc-modified-id="Verification-and-Probing-4"><span class="toc-item-num">4&nbsp;&nbsp;</span>Verification and Probing</a></span></li><li><span><a href="#Exploratory-Data-Analysis-(EDA)" data-toc-modified-id="Exploratory-Data-Analysis-(EDA)-5"><span class="toc-item-num">5&nbsp;&nbsp;</span>Exploratory Data Analysis (EDA)</a></span><ul class="toc-item"><li><span><a href="#Data-Types" data-toc-modified-id="Data-Types-5.1"><span class="toc-item-num">5.1&nbsp;&nbsp;</span>Data Types</a></span></li><li><span><a href="#EDA-Numerical-Features" data-toc-modified-id="EDA-Numerical-Features-5.2"><span class="toc-item-num">5.2&nbsp;&nbsp;</span>EDA Numerical Features</a></span></li><li><span><a href="#EDA-Categorical-Features" data-toc-modified-id="EDA-Categorical-Features-5.3"><span class="toc-item-num">5.3&nbsp;&nbsp;</span>EDA Categorical Features</a></span></li><li><span><a href="#Monthly-Data" data-toc-modified-id="Monthly-Data-5.4"><span class="toc-item-num">5.4&nbsp;&nbsp;</span>Monthly Data</a></span></li></ul></li><li><span><a href="#Feature-Engineering" data-toc-modified-id="Feature-Engineering-6"><span class="toc-item-num">6&nbsp;&nbsp;</span>Feature Engineering</a></span><ul class="toc-item"><li><span><a href="#Downcast" data-toc-modified-id="Downcast-6.1"><span class="toc-item-num">6.1&nbsp;&nbsp;</span>Downcast</a></span></li><li><span><a href="#New-Features-and-Encoding" data-toc-modified-id="New-Features-and-Encoding-6.2"><span class="toc-item-num">6.2&nbsp;&nbsp;</span>New Features and Encoding</a></span></li><li><span><a href="#Lags" data-toc-modified-id="Lags-6.3"><span class="toc-item-num">6.3&nbsp;&nbsp;</span>Lags</a></span></li></ul></li><li><span><a href="#Train-/-Test-Split" data-toc-modified-id="Train-/-Test-Split-7"><span class="toc-item-num">7&nbsp;&nbsp;</span>Train / Test Split</a></span><ul class="toc-item"><li><span><a href="#Purge-Features" data-toc-modified-id="Purge-Features-7.1"><span class="toc-item-num">7.1&nbsp;&nbsp;</span>Purge Features</a></span></li><li><span><a href="#Make-Splits" data-toc-modified-id="Make-Splits-7.2"><span class="toc-item-num">7.2&nbsp;&nbsp;</span>Make Splits</a></span></li><li><span><a href="#Validate-Split-Strategy" data-toc-modified-id="Validate-Split-Strategy-7.3"><span class="toc-item-num">7.3&nbsp;&nbsp;</span>Validate Split Strategy</a></span></li></ul></li><li><span><a href="#Models" data-toc-modified-id="Models-8"><span class="toc-item-num">8&nbsp;&nbsp;</span>Models</a></span><ul class="toc-item"><li><span><a href="#Feature-Importance" data-toc-modified-id="Feature-Importance-8.1"><span class="toc-item-num">8.1&nbsp;&nbsp;</span>Feature Importance</a></span></li><li><span><a href="#Target-Distribution" data-toc-modified-id="Target-Distribution-8.2"><span class="toc-item-num">8.2&nbsp;&nbsp;</span>Target Distribution</a></span></li><li><span><a href="#First-Level-Models" data-toc-modified-id="First-Level-Models-8.3"><span class="toc-item-num">8.3&nbsp;&nbsp;</span>First Level Models</a></span><ul class="toc-item"><li><span><a href="#Scaling-and-Encoding" data-toc-modified-id="Scaling-and-Encoding-8.3.1"><span class="toc-item-num">8.3.1&nbsp;&nbsp;</span>Scaling and Encoding</a></span></li><li><span><a href="#Simple-Model-Selection" data-toc-modified-id="Simple-Model-Selection-8.3.2"><span class="toc-item-num">8.3.2&nbsp;&nbsp;</span>Simple Model Selection</a></span></li><li><span><a href="#Ridge-Regression" data-toc-modified-id="Ridge-Regression-8.3.3"><span class="toc-item-num">8.3.3&nbsp;&nbsp;</span>Ridge Regression</a></span></li><li><span><a href="#Lasso" data-toc-modified-id="Lasso-8.3.4"><span class="toc-item-num">8.3.4&nbsp;&nbsp;</span>Lasso</a></span></li><li><span><a href="#Bayesian-Ridge" data-toc-modified-id="Bayesian-Ridge-8.3.5"><span class="toc-item-num">8.3.5&nbsp;&nbsp;</span>Bayesian Ridge</a></span></li><li><span><a href="#Random-Forest" data-toc-modified-id="Random-Forest-8.3.6"><span class="toc-item-num">8.3.6&nbsp;&nbsp;</span>Random Forest</a></span></li><li><span><a href="#LightGBM" data-toc-modified-id="LightGBM-8.3.7"><span class="toc-item-num">8.3.7&nbsp;&nbsp;</span>LightGBM</a></span></li><li><span><a href="#XGBoost" data-toc-modified-id="XGBoost-8.3.8"><span class="toc-item-num">8.3.8&nbsp;&nbsp;</span>XGBoost</a></span></li><li><span><a href="#Final-Models" data-toc-modified-id="Final-Models-8.3.9"><span class="toc-item-num">8.3.9&nbsp;&nbsp;</span>Final Models</a></span></li></ul></li><li><span><a href="#Meta-Model" data-toc-modified-id="Meta-Model-8.4"><span class="toc-item-num">8.4&nbsp;&nbsp;</span>Meta Model</a></span><ul class="toc-item"><li><span><a href="#Meta-Model-without-Existing-Features" data-toc-modified-id="Meta-Model-without-Existing-Features-8.4.1"><span class="toc-item-num">8.4.1&nbsp;&nbsp;</span>Meta Model without Existing Features</a></span></li><li><span><a href="#Meta-Model-with-Existing-Features" data-toc-modified-id="Meta-Model-with-Existing-Features-8.4.2"><span class="toc-item-num">8.4.2&nbsp;&nbsp;</span>Meta Model with Existing Features</a></span></li></ul></li><li><span><a href="#Submission-and-Conclusion" data-toc-modified-id="Submission-and-Conclusion-8.5"><span class="toc-item-num">8.5&nbsp;&nbsp;</span>Submission and Conclusion</a></span></li></ul></li></ul></div>

<hr />
<p><a id="Section_1"></a></p>
<h2 id="introduction">Introduction</h2>

<p>This challenge serves as final project for the “How to win a data science competition” Coursera course.</p>

<p>In this competition you will work with a challenging time-series dataset consisting of daily sales data, kindly provided by one of the largest Russian software firms - 1C Company.</p>

<p>We are asking you to predict total sales for every product and store in the next month. By solving this competition you will be able to apply and enhance your data science skills.</p>

<p>The full project description and dataset can be found <a href="https://www.kaggle.com/c/competitive-data-science-predict-future-sales">here</a>.</p>

<hr />
<p><a id="Section_2"></a></p>
<h1 id="data-and-competition">Data and Competition</h1>

<p><a id="Section_21"></a></p>
<h3 id="data-structure">Data Structure</h3>

<p>We are provided with daily historical sales data. The task is to <strong>forecast the total amount of products sold in every shop for the test set</strong>. Note that the list of shops and products slightly changes every month. Creating a robust model that can handle such situations is part of the challenge.</p>

<p><strong>File descriptions</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">sales_train.csv</code> - the training set. Daily historical data from January 2013 to October 2015.</li>
  <li><code class="language-plaintext highlighter-rouge">test.csv</code> - the test set. You need to forecast the sales for these shops and products for November 2015.</li>
  <li><code class="language-plaintext highlighter-rouge">sample_submission.csv</code> - a sample submission file in the correct format.</li>
  <li><code class="language-plaintext highlighter-rouge">items.csv - supplemental</code> information about the items/products.</li>
  <li><code class="language-plaintext highlighter-rouge">item_categories.csv</code>  - supplemental information about the items categories.</li>
  <li><code class="language-plaintext highlighter-rouge">shops.csv</code>- supplemental information about the shops.</li>
</ul>

<p><strong>Data fields</strong></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ID</code> - an Id that represents a (Shop, Item) tuple within the test set</li>
  <li><code class="language-plaintext highlighter-rouge">shop_id</code> - unique identifier of a shop</li>
  <li><code class="language-plaintext highlighter-rouge">item_id</code> - unique identifier of a product</li>
  <li><code class="language-plaintext highlighter-rouge">item_category_id</code> - unique identifier of item category</li>
  <li><code class="language-plaintext highlighter-rouge">item_cnt_day</code> - number of products sold. You are predicting a monthly amount of this measure</li>
  <li><code class="language-plaintext highlighter-rouge">item_price</code> - current price of an item</li>
  <li><code class="language-plaintext highlighter-rouge">date - date</code> in format dd/mm/yyyy</li>
  <li><code class="language-plaintext highlighter-rouge">date_block_num</code> - a consecutive month number, used for convenience. January 2013 is 0, February 2013 is 1,…, October 2015 is 33</li>
  <li><code class="language-plaintext highlighter-rouge">item_name</code> - name of item</li>
  <li><code class="language-plaintext highlighter-rouge">shop_name</code> - name of shop</li>
  <li><code class="language-plaintext highlighter-rouge">item_category_name</code> - name of item category</li>
</ul>

<h3 id="objective">Objective</h3>

<p>The goal of this competition is to predict the total amount of products sold in every shop for the test set. The list of shops and products changes each month. Submissions are evaluated by root mean squared error (RMSE). True target values are clipped into [0,20] range.</p>

<hr />
<p><a id="Section_3"></a></p>
<h2 id="load-libraries-and-dataset">Load Libraries and Dataset</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="sh">'</span><span class="s">ggplot</span><span class="sh">'</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm_notebook</span>
<span class="kn">from</span> <span class="n">ipywidgets</span> <span class="kn">import</span> <span class="n">IntProgress</span>

<span class="kn">import</span> <span class="n">pickle</span>
<span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">product</span>
<span class="kn">import</span> <span class="n">gc</span>
<span class="kn">import</span> <span class="n">time</span>

<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">MinMaxScaler</span><span class="p">,</span> <span class="n">LabelEncoder</span>

<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">LabelEncoder</span>
<span class="kn">from</span> <span class="n">sklearn.feature_selection</span> <span class="kn">import</span> <span class="n">SelectFromModel</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span><span class="p">,</span> <span class="n">cross_val_score</span><span class="p">,</span> <span class="n">KFold</span>
<span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">ElasticNet</span><span class="p">,</span> <span class="n">Lasso</span><span class="p">,</span> <span class="n">Ridge</span><span class="p">,</span> <span class="n">RidgeCV</span><span class="p">,</span> <span class="n">LassoCV</span><span class="p">,</span> <span class="n">ElasticNetCV</span><span class="p">,</span> <span class="n">BayesianRidge</span><span class="p">,</span> <span class="n">LinearRegression</span>
<span class="kn">from</span> <span class="n">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeRegressor</span><span class="p">,</span> <span class="n">ExtraTreeClassifier</span>
<span class="kn">from</span> <span class="n">sklearn.svm</span> <span class="kn">import</span> <span class="n">SVR</span>
<span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestRegressor</span><span class="p">,</span>  <span class="n">GradientBoostingRegressor</span><span class="p">,</span> <span class="n">ExtraTreesRegressor</span>
<span class="kn">from</span> <span class="n">sklearn.neighbors</span> <span class="kn">import</span> <span class="n">KNeighborsRegressor</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">GridSearchCV</span><span class="p">,</span> <span class="n">ShuffleSplit</span>
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">RobustScaler</span>
<span class="kn">from</span> <span class="n">sklearn.pipeline</span> <span class="kn">import</span> <span class="n">make_pipeline</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">mean_squared_error</span>

<span class="kn">from</span> <span class="n">lightgbm</span> <span class="kn">import</span> <span class="n">LGBMRegressor</span>
<span class="kn">import</span> <span class="n">lightgbm</span> <span class="k">as</span> <span class="n">lgb</span>
<span class="kn">import</span> <span class="n">xgboost</span> <span class="k">as</span> <span class="n">xgb</span>
<span class="kn">from</span> <span class="n">xgboost</span> <span class="kn">import</span> <span class="n">XGBRegressor</span>

<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">seed</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
</code></pre></div></div>

<p>We load each csv file in an independent Padas DataFrame.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sales_train</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./competitive-data-science-predict-future-sales/sales_train.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">parse_dates</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">])</span>
<span class="n">sales_test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./competitive-data-science-predict-future-sales/test.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sample_submission</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./competitive-data-science-predict-future-sales/sample_submission.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="n">items</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./competitive-data-science-predict-future-sales/items.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="n">item_categories</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./competitive-data-science-predict-future-sales/item_categories.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="n">shops</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./competitive-data-science-predict-future-sales/shops.csv</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sample_submission</span><span class="p">.</span><span class="nf">head</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ID</th>
      <th>item_cnt_month</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>0.5</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>0.5</td>
    </tr>
    <tr>
      <td>2</td>
      <td>2</td>
      <td>0.5</td>
    </tr>
  </tbody>
</table>
</div>

<p>Let’s explore the datasets by first looking at:</p>
<ol>
  <li>The dataset shapes</li>
  <li>The dataset columns</li>
  <li>The data info</li>
</ol>

<p><a id="Section_31"></a></p>
<h3 id="sales-dataset">Sales Dataset</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Sales Train</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sales_train</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sales Train
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>2013-02-01</td>
      <td>0</td>
      <td>59</td>
      <td>22154</td>
      <td>999.00</td>
      <td>1.0</td>
    </tr>
    <tr>
      <td>1</td>
      <td>2013-03-01</td>
      <td>0</td>
      <td>25</td>
      <td>2552</td>
      <td>899.00</td>
      <td>1.0</td>
    </tr>
    <tr>
      <td>2</td>
      <td>2013-05-01</td>
      <td>0</td>
      <td>25</td>
      <td>2552</td>
      <td>899.00</td>
      <td>-1.0</td>
    </tr>
    <tr>
      <td>3</td>
      <td>2013-06-01</td>
      <td>0</td>
      <td>25</td>
      <td>2554</td>
      <td>1709.05</td>
      <td>1.0</td>
    </tr>
    <tr>
      <td>4</td>
      <td>2013-01-15</td>
      <td>0</td>
      <td>25</td>
      <td>2555</td>
      <td>1099.00</td>
      <td>1.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>The <code class="language-plaintext highlighter-rouge">item_cnt_dat</code> colum contains positive values for sales and negative values for returns.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Sales Train set shape</span><span class="sh">"</span><span class="p">,</span> <span class="n">sales_train</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sales Train set shape (2935849, 6)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sales_train</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 2935849 entries, 0 to 2935848
Data columns (total 6 columns):
date              datetime64[ns]
date_block_num    int64
shop_id           int64
item_id           int64
item_price        float64
item_cnt_day      float64
dtypes: datetime64[ns](1), float64(2), int64(3)
memory usage: 134.4 MB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Null records</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sales_train</span><span class="p">.</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Null records
date              0
date_block_num    0
shop_id           0
item_id           0
item_price        0
item_cnt_day      0
dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Description</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sales_train</span><span class="p">.</span><span class="nf">describe</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Description
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>count</td>
      <td>2.935849e+06</td>
      <td>2.935849e+06</td>
      <td>2.935849e+06</td>
      <td>2.935849e+06</td>
      <td>2.935849e+06</td>
    </tr>
    <tr>
      <td>mean</td>
      <td>1.456991e+01</td>
      <td>3.300173e+01</td>
      <td>1.019723e+04</td>
      <td>8.908532e+02</td>
      <td>1.242641e+00</td>
    </tr>
    <tr>
      <td>std</td>
      <td>9.422988e+00</td>
      <td>1.622697e+01</td>
      <td>6.324297e+03</td>
      <td>1.729800e+03</td>
      <td>2.618834e+00</td>
    </tr>
    <tr>
      <td>min</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>-1.000000e+00</td>
      <td>-2.200000e+01</td>
    </tr>
    <tr>
      <td>25%</td>
      <td>7.000000e+00</td>
      <td>2.200000e+01</td>
      <td>4.476000e+03</td>
      <td>2.490000e+02</td>
      <td>1.000000e+00</td>
    </tr>
    <tr>
      <td>50%</td>
      <td>1.400000e+01</td>
      <td>3.100000e+01</td>
      <td>9.343000e+03</td>
      <td>3.990000e+02</td>
      <td>1.000000e+00</td>
    </tr>
    <tr>
      <td>75%</td>
      <td>2.300000e+01</td>
      <td>4.700000e+01</td>
      <td>1.568400e+04</td>
      <td>9.990000e+02</td>
      <td>1.000000e+00</td>
    </tr>
    <tr>
      <td>max</td>
      <td>3.300000e+01</td>
      <td>5.900000e+01</td>
      <td>2.216900e+04</td>
      <td>3.079800e+05</td>
      <td>2.169000e+03</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Sales Test</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sales_test</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sales Test
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ID</th>
      <th>shop_id</th>
      <th>item_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>5</td>
      <td>5037</td>
    </tr>
    <tr>
      <td>1</td>
      <td>1</td>
      <td>5</td>
      <td>5320</td>
    </tr>
    <tr>
      <td>2</td>
      <td>2</td>
      <td>5</td>
      <td>5233</td>
    </tr>
    <tr>
      <td>3</td>
      <td>3</td>
      <td>5</td>
      <td>5232</td>
    </tr>
    <tr>
      <td>4</td>
      <td>4</td>
      <td>5</td>
      <td>5268</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Sales Test set shape</span><span class="sh">"</span><span class="p">,</span> <span class="n">sales_test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sales Test set shape (214200, 3)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sales_test</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 214200 entries, 0 to 214199
Data columns (total 3 columns):
ID         214200 non-null int64
shop_id    214200 non-null int64
item_id    214200 non-null int64
dtypes: int64(3)
memory usage: 4.9 MB
</code></pre></div></div>

<p><a id="Section_32"></a></p>
<h3 id="item-dataset">Item Dataset</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Items</span><span class="sh">"</span><span class="p">)</span>
<span class="n">items</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Items
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>item_name</th>
      <th>item_id</th>
      <th>item_category_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>! ВО ВЛАСТИ НАВАЖДЕНИЯ (ПЛАСТ.)         D</td>
      <td>0</td>
      <td>40</td>
    </tr>
    <tr>
      <td>1</td>
      <td>!ABBYY FineReader 12 Professional Edition Full...</td>
      <td>1</td>
      <td>76</td>
    </tr>
    <tr>
      <td>2</td>
      <td>***В ЛУЧАХ СЛАВЫ   (UNV)                    D</td>
      <td>2</td>
      <td>40</td>
    </tr>
    <tr>
      <td>3</td>
      <td>***ГОЛУБАЯ ВОЛНА  (Univ)                      D</td>
      <td>3</td>
      <td>40</td>
    </tr>
    <tr>
      <td>4</td>
      <td>***КОРОБКА (СТЕКЛО)                       D</td>
      <td>4</td>
      <td>40</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Items shape</span><span class="sh">"</span><span class="p">,</span> <span class="n">items</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Items shape (22170, 3)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Null records</span><span class="sh">"</span><span class="p">)</span>
<span class="n">items</span><span class="p">.</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Null records
item_name           0
item_id             0
item_category_id    0
dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">items</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 22170 entries, 0 to 22169
Data columns (total 3 columns):
item_name           22170 non-null object
item_id             22170 non-null int64
item_category_id    22170 non-null int64
dtypes: int64(2), object(1)
memory usage: 519.7+ KB
</code></pre></div></div>

<p><a id="Section_33"></a></p>
<h3 id="item-categories-dataset">Item Categories Dataset</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Item Categories</span><span class="sh">"</span><span class="p">)</span>
<span class="n">item_categories</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Item Categories
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>item_category_name</th>
      <th>item_category_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>PC - Гарнитуры/Наушники</td>
      <td>0</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Аксессуары - PS2</td>
      <td>1</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Аксессуары - PS3</td>
      <td>2</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Аксессуары - PS4</td>
      <td>3</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Аксессуары - PSP</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Item categories shape</span><span class="sh">"</span><span class="p">,</span> <span class="n">item_categories</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Item categories shape (84, 2)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">item_categories</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 84 entries, 0 to 83
Data columns (total 2 columns):
item_category_name    84 non-null object
item_category_id      84 non-null int64
dtypes: int64(1), object(1)
memory usage: 1.4+ KB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Null records</span><span class="sh">"</span><span class="p">)</span>
<span class="n">item_categories</span><span class="p">.</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Null records
item_category_name    0
item_category_id      0
dtype: int64
</code></pre></div></div>

<p><a id="Section_34"></a></p>
<h3 id="shop-dataset">Shop Dataset</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Shops</span><span class="sh">"</span><span class="p">)</span>
<span class="n">shops</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shops
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>shop_name</th>
      <th>shop_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>!Якутск Орджоникидзе, 56 фран</td>
      <td>0</td>
    </tr>
    <tr>
      <td>1</td>
      <td>!Якутск ТЦ "Центральный" фран</td>
      <td>1</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Адыгея ТЦ "Мега"</td>
      <td>2</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Балашиха ТРК "Октябрь-Киномир"</td>
      <td>3</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Волжский ТЦ "Волга Молл"</td>
      <td>4</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Shop shape</span><span class="sh">"</span><span class="p">,</span> <span class="n">shops</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shop shape (60, 2)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Null records</span><span class="sh">"</span><span class="p">)</span>
<span class="n">shops</span><span class="p">.</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Null records
shop_name    0
shop_id      0
dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shops</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 60 entries, 0 to 59
Data columns (total 2 columns):
shop_name    60 non-null object
shop_id      60 non-null int64
dtypes: int64(1), object(1)
memory usage: 1.1+ KB
</code></pre></div></div>

<p>The csv files have been imported and inspected. They do not contain apparent null values and they also seem to be well organized. The tables require further inspection to evaluate the quality of the data.</p>

<hr />
<p><a id="Section_4"></a></p>
<h2 id="database-schema">Database schema</h2>

<p>The set of csv files are connected using primary key features. The relationships are established as follows:</p>

<ul>
  <li>shops (shop_id) -&gt; sales_train (shop_id): type <strong>one-to-many</strong></li>
  <li>item (item_category_id) -&gt; item_categories (category_id): type <strong>one-to-many</strong></li>
  <li>sales_train (shop_id) -&gt; shops (shop_id): type <strong>one-to-many</strong></li>
  <li>sales_train (item_id) -&gt; items (item_id): type <strong>one-to-many</strong></li>
</ul>

<p>We can then join the tables into a single dataset:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># merge datset and drop duplicates keys
</span><span class="n">train</span> <span class="o">=</span> <span class="n">sales_train</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">items</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="n">rsuffix</span><span class="o">=</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)</span> \
                   <span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">shops</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="n">rsuffix</span><span class="o">=</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)</span> \
                   <span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">item_categories</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">,</span> <span class="n">rsuffix</span><span class="o">=</span><span class="sh">'</span><span class="s">_</span><span class="sh">'</span><span class="p">)</span> \
                   <span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">item_id_</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id_</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id_</span><span class="sh">'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Join dataset shape:</span><span class="sh">"</span><span class="p">,</span><span class="n">train</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="n">train</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Join dataset shape: (2935849, 10)
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
      <th>item_name</th>
      <th>item_category_id</th>
      <th>shop_name</th>
      <th>item_category_name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>2013-02-01</td>
      <td>0</td>
      <td>59</td>
      <td>22154</td>
      <td>999.00</td>
      <td>1.0</td>
      <td>ЯВЛЕНИЕ 2012 (BD)</td>
      <td>37</td>
      <td>Ярославль ТЦ "Альтаир"</td>
      <td>Кино - Blu-Ray</td>
    </tr>
    <tr>
      <td>1</td>
      <td>2013-03-01</td>
      <td>0</td>
      <td>25</td>
      <td>2552</td>
      <td>899.00</td>
      <td>1.0</td>
      <td>DEEP PURPLE  The House Of Blue Light  LP</td>
      <td>58</td>
      <td>Москва ТРК "Атриум"</td>
      <td>Музыка - Винил</td>
    </tr>
    <tr>
      <td>2</td>
      <td>2013-05-01</td>
      <td>0</td>
      <td>25</td>
      <td>2552</td>
      <td>899.00</td>
      <td>-1.0</td>
      <td>DEEP PURPLE  The House Of Blue Light  LP</td>
      <td>58</td>
      <td>Москва ТРК "Атриум"</td>
      <td>Музыка - Винил</td>
    </tr>
    <tr>
      <td>3</td>
      <td>2013-06-01</td>
      <td>0</td>
      <td>25</td>
      <td>2554</td>
      <td>1709.05</td>
      <td>1.0</td>
      <td>DEEP PURPLE  Who Do You Think We Are  LP</td>
      <td>58</td>
      <td>Москва ТРК "Атриум"</td>
      <td>Музыка - Винил</td>
    </tr>
    <tr>
      <td>4</td>
      <td>2013-01-15</td>
      <td>0</td>
      <td>25</td>
      <td>2555</td>
      <td>1099.00</td>
      <td>1.0</td>
      <td>DEEP PURPLE 30 Very Best Of 2CD (Фирм.)</td>
      <td>56</td>
      <td>Москва ТРК "Атриум"</td>
      <td>Музыка - CD фирменного производства</td>
    </tr>
  </tbody>
</table>
</div>

<hr />
<p><a id="Section_5"></a></p>
<h2 id="verification-and-probing">Verification and Probing</h2>

<p>A good exercise is to reproduce previous_value_benchmark. As the name suggest - in this benchmark for the each shop/item pair our predictions are just monthly sales from the previous month, i.e. October 2015.</p>

<p>The most important step at reproducing this score is correctly aggregating daily data and constructing monthly sales data frame. You need to get lagged values, fill NaNs with zeros and clip the values into [0,20] range. If you do it correctly, you’ll get precisely 1.16777 on the public leaderboard.</p>

<p>Generating features like this is a necessary basis for more complex models. Also, if you decide to fit some model, don’t forget to clip the target into [0,20] range, it makes a big difference.</p>

<p>The following steps are used to produced the benchmark verification:</p>
<ol>
  <li>Isolate data from October 2015</li>
  <li>Drop unnecessary features</li>
  <li>Group filtered data by <code class="language-plaintext highlighter-rouge">shop_id</code> and <code class="language-plaintext highlighter-rouge">item_id</code></li>
  <li>Clip data and fill Na with <code class="language-plaintext highlighter-rouge">0</code></li>
  <li>Rename columns to match submission format</li>
</ol>

<p><strong>Step 1</strong>: Isolate data</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># isolate date from October 2015
</span><span class="n">bench_oct2015</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">33</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># display the subset
</span><span class="n">bench_oct2015</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
      <th>item_name</th>
      <th>item_category_id</th>
      <th>shop_name</th>
      <th>item_category_name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2882335</td>
      <td>2015-10-23</td>
      <td>33</td>
      <td>45</td>
      <td>13315</td>
      <td>649.0</td>
      <td>1.0</td>
      <td>Комикс Супермен Земля-1 Книга 2</td>
      <td>47</td>
      <td>Самара ТЦ "ПаркХаус"</td>
      <td>Книги - Комиксы, манга</td>
    </tr>
    <tr>
      <td>2882336</td>
      <td>2015-05-10</td>
      <td>33</td>
      <td>45</td>
      <td>13880</td>
      <td>229.0</td>
      <td>1.0</td>
      <td>ЛЕПС ГРИГОРИЙ  Grand Collection  Лучшее для лу...</td>
      <td>55</td>
      <td>Самара ТЦ "ПаркХаус"</td>
      <td>Музыка - CD локального производства</td>
    </tr>
    <tr>
      <td>2882337</td>
      <td>2015-02-10</td>
      <td>33</td>
      <td>45</td>
      <td>13881</td>
      <td>659.0</td>
      <td>1.0</td>
      <td>ЛЕПС ГРИГОРИЙ  The Best  3CD (фирм.)</td>
      <td>55</td>
      <td>Самара ТЦ "ПаркХаус"</td>
      <td>Музыка - CD локального производства</td>
    </tr>
    <tr>
      <td>2882338</td>
      <td>2015-12-10</td>
      <td>33</td>
      <td>45</td>
      <td>13881</td>
      <td>659.0</td>
      <td>1.0</td>
      <td>ЛЕПС ГРИГОРИЙ  The Best  3CD (фирм.)</td>
      <td>55</td>
      <td>Самара ТЦ "ПаркХаус"</td>
      <td>Музыка - CD локального производства</td>
    </tr>
    <tr>
      <td>2882339</td>
      <td>2015-04-10</td>
      <td>33</td>
      <td>45</td>
      <td>13923</td>
      <td>169.0</td>
      <td>1.0</td>
      <td>ЛИКВИДАЦИЯ (Регион)</td>
      <td>40</td>
      <td>Самара ТЦ "ПаркХаус"</td>
      <td>Кино - DVD</td>
    </tr>
  </tbody>
</table>
</div>

<p><strong>Step 2</strong>: Aggregate data and fill na</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># the sales are aggregated by shop_id, item_id
</span><span class="n">test_oct2015</span> <span class="o">=</span> <span class="n">bench_oct2015</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">"</span><span class="s">shop_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">item_id</span><span class="sh">"</span><span class="p">])</span>

<span class="c1"># aggregate item_cnt by sum
</span><span class="n">test_oct2015</span> <span class="o">=</span> <span class="n">test_oct2015</span><span class="p">.</span><span class="nf">aggregate</span><span class="p">({</span><span class="sh">"</span><span class="s">item_cnt_day</span><span class="sh">"</span><span class="p">:</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">}).</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># melt indexes
</span><span class="n">test_oct2015</span> <span class="o">=</span> <span class="n">test_oct2015</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">level</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">shop_id</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">item_id</span><span class="sh">"</span><span class="p">])</span>

<span class="c1"># adjust column names to match submission
</span><span class="n">test_oct2015</span> <span class="o">=</span> <span class="n">test_oct2015</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span> <span class="n">test_oct2015</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="mi">2</span><span class="p">]:</span> <span class="sh">"</span><span class="s">item_cnt_month</span><span class="sh">"</span> <span class="p">})</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2047     42
19744    42
15406    42
13359    42
3240     42
         ..
21086    42
21214    42
17244    42
21342    42
2049     42
Name: item_id, Length: 5100, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_oct2015</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>22102    42
3350     42
15069    42
10200    41
7223     41
         ..
8138      1
20686     1
1929      1
16604     1
14289     1
Name: item_id, Length: 5413, dtype: int64
</code></pre></div></div>

<p>As shown above, our current predictions does not contain all the necessary records. This is due to the nature of the original filtered data. Indeed, the <code class="language-plaintext highlighter-rouge">shop_id</code>+<code class="language-plaintext highlighter-rouge">item_id</code> without sales in October 2015 do not appear. We need to merge the test set and our prediction using a left join to ensure that our submission meets the requirements.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># the store+item without any sale are not listed in our table.
</span><span class="n">test_submission</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">test_oct2015</span><span class="p">,</span> <span class="n">sales_test</span><span class="p">,</span>
                           <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span>
                           <span class="n">right_on</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]).</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">test_submission</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">test_submission</span> <span class="o">=</span> <span class="n">test_submission</span><span class="p">[[</span><span class="sh">'</span><span class="s">ID</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">]]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># clip predictions
</span><span class="n">test_submission</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">test_submission</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">].</span><span class="nf">clip</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">20</span><span class="p">)</span>
<span class="n">test_submission</span><span class="p">.</span><span class="nf">describe</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>ID</th>
      <th>item_cnt_month</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>count</td>
      <td>214200.000000</td>
      <td>214200.000000</td>
    </tr>
    <tr>
      <td>mean</td>
      <td>107099.500000</td>
      <td>0.255649</td>
    </tr>
    <tr>
      <td>std</td>
      <td>61834.358168</td>
      <td>1.089856</td>
    </tr>
    <tr>
      <td>min</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <td>25%</td>
      <td>53549.750000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <td>50%</td>
      <td>107099.500000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <td>75%</td>
      <td>160649.250000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <td>max</td>
      <td>214199.000000</td>
      <td>20.000000</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_submission</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">previous_value_benchmark.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/benchmark.png" style="height: 150px;" />
</figure>

<p><strong>Note</strong>: This is the benchmark value that we were aiming for.</p>

<p>In addition, we can perform some leaderboard probing to gain valuable insights on the test set. By predicting a 0 value for all the test cases, the evaluation metric (RMSE) becomes:</p>

<p>\(RMSE^{2}=MSE=\frac{1}{N}\sum_{i=1}^{N} (y_i-\hat{y_i})^2=\frac{1}{N}\sum_{i=1}^{N} (y_i)^2\)<br />
By using the value (\(\alpha\)) from the Kaggle evaluation, then we can retrieve:</p>

\[\sum_{i=1}^{N} (y_i)^2=\alpha*N\]

<p>Now, if we use another constant prediction, say 1.0, we have:<br />
\(RMSE^{2}=MSE=\frac{1}{N}\sum_{i=1}^{N} (y_i-\hat{y_i})^2=\frac{1}{N}\sum_{i=1}^{N} (y_i-1)^{2}=\beta\)</p>

<p>If we combine our two equations, we obtain:</p>

\[N*\beta=\sum_{i=1}^{N} (y_i-0.5)^{2}=\sum_{i=1}^{N} (y_i^{2}-2*y_i-1)=\sum_{i=1}^{N}(y_i^{2})-2*\sum_{i=1}^{N}(y_i)+N\]

<p>This becomes:</p>

\[\frac{1}{N}\sum_{i=1}^{N}(y_i)=\frac{\alpha+1-\beta}{2}\]

<p>We can then scale our future predictions to match the sum of the squares.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># set predictions equal to 0
</span><span class="n">test_submission</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mf">0.0</span>
<span class="n">test_submission</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">zero_value.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/zero_predictions.png" style="height: 150px;" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># set predictions equal to 1.0
</span><span class="n">test_submission</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1.0</span>
<span class="n">test_submission</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">one_value.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/one_predictions.png" style="height: 150px;" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mean_test</span> <span class="o">=</span> <span class="p">(</span><span class="mf">1.25011</span><span class="o">**</span><span class="mi">2</span> <span class="o">+</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="mf">1.41241</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">/</span> <span class="mf">2.0</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Mean of test set: {:.8f}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">mean_test</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mean of test set: 0.28393650
</code></pre></div></div>

<hr />
<p><a id="Section_6"></a></p>
<h2 id="exploratory-data-analysis-eda">Exploratory Data Analysis (EDA)</h2>

<p>Let’s first look for obvious invalid values in the train set:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 2935849 entries, 0 to 2935848
Data columns (total 10 columns):
date                  datetime64[ns]
date_block_num        int64
shop_id               int64
item_id               int64
item_price            float64
item_cnt_day          float64
item_name             object
item_category_id      int64
shop_name             object
item_category_name    object
dtypes: datetime64[ns](1), float64(2), int64(4), object(3)
memory usage: 224.0+ MB
</code></pre></div></div>

<p><strong>Note</strong>: From the above table, it appears that the features are stored using very complex data type. In order to save some memory, the 64-bit version of the floats and integers can be downcasted to 16-bit versions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">.</span><span class="nf">describe</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
      <th>item_category_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>count</td>
      <td>2.935849e+06</td>
      <td>2.935849e+06</td>
      <td>2.935849e+06</td>
      <td>2.935849e+06</td>
      <td>2.935849e+06</td>
      <td>2.935849e+06</td>
    </tr>
    <tr>
      <td>mean</td>
      <td>1.456991e+01</td>
      <td>3.300173e+01</td>
      <td>1.019723e+04</td>
      <td>8.908532e+02</td>
      <td>1.242641e+00</td>
      <td>4.000138e+01</td>
    </tr>
    <tr>
      <td>std</td>
      <td>9.422988e+00</td>
      <td>1.622697e+01</td>
      <td>6.324297e+03</td>
      <td>1.729800e+03</td>
      <td>2.618834e+00</td>
      <td>1.710076e+01</td>
    </tr>
    <tr>
      <td>min</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>0.000000e+00</td>
      <td>-1.000000e+00</td>
      <td>-2.200000e+01</td>
      <td>0.000000e+00</td>
    </tr>
    <tr>
      <td>25%</td>
      <td>7.000000e+00</td>
      <td>2.200000e+01</td>
      <td>4.476000e+03</td>
      <td>2.490000e+02</td>
      <td>1.000000e+00</td>
      <td>2.800000e+01</td>
    </tr>
    <tr>
      <td>50%</td>
      <td>1.400000e+01</td>
      <td>3.100000e+01</td>
      <td>9.343000e+03</td>
      <td>3.990000e+02</td>
      <td>1.000000e+00</td>
      <td>4.000000e+01</td>
    </tr>
    <tr>
      <td>75%</td>
      <td>2.300000e+01</td>
      <td>4.700000e+01</td>
      <td>1.568400e+04</td>
      <td>9.990000e+02</td>
      <td>1.000000e+00</td>
      <td>5.500000e+01</td>
    </tr>
    <tr>
      <td>max</td>
      <td>3.300000e+01</td>
      <td>5.900000e+01</td>
      <td>2.216900e+04</td>
      <td>3.079800e+05</td>
      <td>2.169000e+03</td>
      <td>8.300000e+01</td>
    </tr>
  </tbody>
</table>
</div>

<p><strong>Note</strong>:</p>
<ol>
  <li>As shown above, there are negative prices. This appears to be incorrect. We can further investigate by plotting the distribution of the prices. In addition, there seem to be a few items with a very large price tags.</li>
  <li>Similarly, there are a few days with very high item count.</li>
</ol>

<p><a id="Section_61"></a></p>
<h3 id="data-types">Data Types</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">change_data_type</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="n">float_cols</span> <span class="o">=</span> <span class="p">[</span><span class="n">col</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">df</span> <span class="k">if</span> <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">dtype</span> <span class="o">==</span> <span class="sh">'</span><span class="s">float64</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">int_cols</span> <span class="o">=</span> <span class="p">[</span><span class="n">col</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">df</span> <span class="k">if</span> <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">dtype</span> <span class="o">==</span> <span class="sh">'</span><span class="s">int64</span><span class="sh">'</span><span class="p">]</span>

    <span class="n">df</span><span class="p">[</span><span class="n">float_cols</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">float_cols</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="n">int_cols</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">int_cols</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">df</span>


<span class="n">train</span> <span class="o">=</span> <span class="nf">change_data_type</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>
<span class="n">train</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 2935849 entries, 0 to 2935848
Data columns (total 10 columns):
date                  datetime64[ns]
date_block_num        int16
shop_id               int16
item_id               int16
item_price            float32
item_cnt_day          float32
item_name             object
item_category_id      int16
shop_name             object
item_category_name    object
dtypes: datetime64[ns](1), float32(2), int16(4), object(3)
memory usage: 134.4+ MB
</code></pre></div></div>

<p>The dataframe went from 224 MB to 134 MB.</p>

<p><a id="Section_62"></a></p>
<h3 id="eda-numerical-features">EDA Numerical Features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot boxplot
</span><span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_price</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1c3bdc1f10&gt;
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_78_1.png" />
</figure>

<p><strong>Note</strong>: We can count how many items have a price tag above 150000.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_price</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">150000</span><span class="p">]</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
      <th>item_name</th>
      <th>item_category_id</th>
      <th>shop_name</th>
      <th>item_category_name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1163158</td>
      <td>2013-12-13</td>
      <td>11</td>
      <td>12</td>
      <td>6066</td>
      <td>307980.0</td>
      <td>1.0</td>
      <td>Radmin 3  - 522 лиц.</td>
      <td>75</td>
      <td>Интернет-магазин ЧС</td>
      <td>Программы - Для дома и офиса</td>
    </tr>
  </tbody>
</table>
</div>

<p>Let’s see if this item has had a difference price previously:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">6066</span><span class="p">]</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
      <th>item_name</th>
      <th>item_category_id</th>
      <th>shop_name</th>
      <th>item_category_name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>1163158</td>
      <td>2013-12-13</td>
      <td>11</td>
      <td>12</td>
      <td>6066</td>
      <td>307980.0</td>
      <td>1.0</td>
      <td>Radmin 3  - 522 лиц.</td>
      <td>75</td>
      <td>Интернет-магазин ЧС</td>
      <td>Программы - Для дома и офиса</td>
    </tr>
  </tbody>
</table>
</div>

<p>We can drop this item since this high price appears to be an error.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># remove the single outlier for large price
</span><span class="n">train</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_price</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">150000</span><span class="p">]</span>
</code></pre></div></div>

<p>Does the dataset contain negative prices?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_price</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="nf">sort_index</span><span class="p">().</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>-1.0000       1
 0.0700       2
 0.0875       1
 0.0900       1
 0.1000    2932
Name: item_price, dtype: int64
</code></pre></div></div>

<p><strong>Note</strong>: One item has a negative price, we remove it from the list.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># remove the single outlier for negative price
</span><span class="n">train</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_price</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot boxplot
</span><span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlim</span><span class="p">(</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">1e5</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xscale</span><span class="p">(</span><span class="sh">"</span><span class="s">log</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_price</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1a1773acd0&gt;
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_89_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot boxplot
</span><span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1a78fcdfd0&gt;
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_90_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1500</span><span class="p">]</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date</th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_price</th>
      <th>item_cnt_day</th>
      <th>item_name</th>
      <th>item_category_id</th>
      <th>shop_name</th>
      <th>item_category_name</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>2909818</td>
      <td>2015-10-28</td>
      <td>33</td>
      <td>12</td>
      <td>11373</td>
      <td>0.908714</td>
      <td>2169.0</td>
      <td>Доставка до пункта выдачи (Boxberry)</td>
      <td>9</td>
      <td>Интернет-магазин ЧС</td>
      <td>Доставка товара</td>
    </tr>
  </tbody>
</table>
</div>

<p>This day does not correspond to a holiday during which we could expect a large sale. We remove this value.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># remove the outlier for item_cnt_day
</span><span class="n">train</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">1500</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">scatterplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">item_price</span><span class="sh">'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.3</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;matplotlib.axes._subplots.AxesSubplot at 0x1a29353a10&gt;
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_94_1.png" />
</figure>

<p>As expected, expensive items are not often purchased. Let’s now inspect trends over time.</p>

<p><a id="Section_62"></a></p>
<h3 id="eda-categorical-features">EDA Categorical Features</h3>

<p>We start by looking for duplicates in the categories.  Based on the configuration of the</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shops</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_name</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Химки ТЦ "Мега"                  1
!Якутск Орджоникидзе, 56 фран    1
Уфа ТЦ "Семья" 2                 1
Калуга ТРЦ "XXI век"             1
Якутск ТЦ "Центральный"          1
Name: shop_name, dtype: int64
</code></pre></div></div>

<p>There are no obvious duplicates. However, upon detailed inspection of the <code class="language-plaintext highlighter-rouge">shop_name</code> feature, we can make the following observations:</p>
<ol>
  <li>The <code class="language-plaintext highlighter-rouge">shop_name</code> contains the city of the store. The string is structured as “city, store name”</li>
  <li>Several id appears to be duplicates.</li>
</ol>

<p>The indexes below appear to be duplicates. They are combined under a single index. The same process is applied to the test set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shops</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_name</span><span class="sh">'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="nf">strip</span><span class="p">(</span><span class="sh">'</span><span class="s">!</span><span class="sh">'</span><span class="p">).</span><span class="nf">sort_values</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2                                    Адыгея ТЦ "Мега"
3                      Балашиха ТРК "Октябрь-Киномир"
4                            Волжский ТЦ "Волга Молл"
5                              Вологда ТРЦ "Мармелад"
6                          Воронеж (Плехановская, 13)
7                              Воронеж ТРЦ "Максимир"
8                        Воронеж ТРЦ Сити-Парк "Град"
9                                   Выездная Торговля
10                         Жуковский ул. Чкалова 39м?
11                         Жуковский ул. Чкалова 39м²
12                                Интернет-магазин ЧС
13                                Казань ТЦ "Бехетле"
14                            Казань ТЦ "ПаркХаус" II
15                               Калуга ТРЦ "XXI век"
16                                   Коломна ТЦ "Рио"
17                      Красноярск ТЦ "Взлетка Плаза"
18                               Красноярск ТЦ "Июнь"
19                              Курск ТЦ "Пушкинский"
20                                Москва "Распродажа"
21                             Москва МТРЦ "Афи Молл"
22                                 Москва Магазин С21
23                   Москва ТК "Буденовский" (пав.А2)
24                   Москва ТК "Буденовский" (пав.К7)
25                                Москва ТРК "Атриум"
26                        Москва ТЦ "Ареал" (Беляево)
27                     Москва ТЦ "МЕГА Белая Дача II"
28                    Москва ТЦ "МЕГА Теплый Стан" II
29                 Москва ТЦ "Новый век" (Новокосино)
30                             Москва ТЦ "Перловский"
31                            Москва ТЦ "Семеновский"
32                         Москва ТЦ "Серебряный Дом"
33                                  Мытищи ТРК "XL-3"
34                               Н.Новгород ТРЦ "РИО"
35                        Н.Новгород ТРЦ "Фантастика"
36              Новосибирск ТРЦ "Галерея Новосибирск"
37                              Новосибирск ТЦ "Мега"
38                                     Омск ТЦ "Мега"
39              РостовНаДону ТРК "Мегацентр Горизонт"
40    РостовНаДону ТРК "Мегацентр Горизонт" Островной
41                             РостовНаДону ТЦ "Мега"
42                             СПб ТК "Невский Центр"
43                                    СПб ТК "Сенная"
44                                Самара ТЦ "Мелодия"
45                               Самара ТЦ "ПаркХаус"
46                              Сергиев Посад ТЦ "7Я"
47                             Сургут ТРЦ "Сити Молл"
48                       Томск ТРЦ "Изумрудный Город"
49                              Тюмень ТРЦ "Кристалл"
50                                 Тюмень ТЦ "Гудвин"
51                          Тюмень ТЦ "Зеленый Берег"
52                               Уфа ТК "Центральный"
53                                   Уфа ТЦ "Семья" 2
54                                    Химки ТЦ "Мега"
55                           Цифровой склад 1С-Онлайн
56                               Чехов ТРЦ "Карнавал"
57                            Якутск Орджоникидзе, 56
0                        Якутск Орджоникидзе, 56 фран
58                            Якутск ТЦ "Центральный"
1                        Якутск ТЦ "Центральный" фран
59                             Ярославль ТЦ "Альтаир"
Name: shop_name, dtype: object
</code></pre></div></div>

<p>The pairs are defined as (0, 57), (1, 58), (10, 11).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shops</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_name</span><span class="sh">'</span><span class="p">].</span><span class="n">loc</span><span class="p">[[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">57</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">58</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">]]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0     !Якутск Орджоникидзе, 56 фран
57          Якутск Орджоникидзе, 56
1     !Якутск ТЦ "Центральный" фран
58          Якутск ТЦ "Центральный"
10       Жуковский ул. Чкалова 39м?
11       Жуковский ул. Чкалова 39м²
Name: shop_name, dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># (0, 57) -&gt; Якутск Орджоникидзе, 56
</span><span class="n">train</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">57</span>
<span class="n">sales_test</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">57</span>

<span class="c1"># (1, 58) -&gt; Якутск ТЦ "Центральный"
</span><span class="n">train</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">58</span>
<span class="n">sales_test</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">58</span>

<span class="c1"># (10, 11) -&gt; Жуковский ул. Чкалова 39м²
</span><span class="n">train</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">10</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">11</span>
<span class="n">sales_test</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">10</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">11</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># add revenue to train set
</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">revenue</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_price</span><span class="sh">'</span><span class="p">]</span> <span class="o">*</span> <span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">.</span><span class="n">columns</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Index(['date', 'date_block_num', 'shop_id', 'item_id', 'item_price',
       'item_cnt_day', 'item_name', 'item_category_id', 'shop_name',
       'item_category_name', 'revenue'],
      dtype='object')
</code></pre></div></div>

<p>In addition, we can create a new feature containing the city name associated to the store name.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># replace one faulty city name (Сергиев Посад)
</span><span class="n">shops</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">shops</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_name</span><span class="sh">'</span><span class="p">]</span><span class="o">==</span><span class="sh">'</span><span class="s">Сергиев Посад ТЦ </span><span class="sh">"</span><span class="s">7Я</span><span class="sh">"'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_name</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">'</span><span class="s">СергиевПосад ТЦ </span><span class="sh">"</span><span class="s">7Я</span><span class="sh">"'</span>

<span class="c1"># split shop name (and remove the leading !)
</span><span class="n">shops</span><span class="p">[</span><span class="sh">'</span><span class="s">city</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">shops</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_name</span><span class="sh">'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="nf">strip</span><span class="p">(</span><span class="sh">'</span><span class="s">!</span><span class="sh">'</span><span class="p">).</span><span class="nb">str</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">).</span><span class="nf">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">shops</span><span class="p">[</span><span class="sh">'</span><span class="s">city</span><span class="sh">'</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">().</span><span class="nf">sort_index</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Адыгея               1
Балашиха             1
Волжский             1
Вологда              1
Воронеж              3
Выездная             1
Жуковский            2
Интернет-магазин     1
Казань               2
Калуга               1
Коломна              1
Красноярск           2
Курск                1
Москва              13
Мытищи               1
Н.Новгород           2
Новосибирск          2
Омск                 1
РостовНаДону         3
СПб                  2
Самара               2
СергиевПосад         1
Сургут               1
Томск                1
Тюмень               3
Уфа                  2
Химки                1
Цифровой             1
Чехов                1
Якутск               4
Ярославль            1
Name: city, dtype: int64
</code></pre></div></div>

<p>The city name can be encoded to facilitate the use of this feature.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shops</span><span class="p">[</span><span class="sh">'</span><span class="s">city_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nc">LabelEncoder</span><span class="p">().</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">shops</span><span class="p">[</span><span class="sh">'</span><span class="s">city</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<p>We can now delete the unnecessary columns <code class="language-plaintext highlighter-rouge">city</code> and <code class="language-plaintext highlighter-rouge">shop_name</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shops</span> <span class="o">=</span> <span class="n">shops</span><span class="p">[[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">city_id</span><span class="sh">'</span><span class="p">]]</span>
</code></pre></div></div>

<p>The next categorical feature to process is the item category. It is encoded as an id and as a name. The first step consists of looking at the <code class="language-plaintext highlighter-rouge">item_category_name</code> to identify potential embedded information.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">item_categories</span><span class="p">.</span><span class="nf">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>item_category_name</th>
      <th>item_category_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>PC - Гарнитуры/Наушники</td>
      <td>0</td>
    </tr>
    <tr>
      <td>1</td>
      <td>Аксессуары - PS2</td>
      <td>1</td>
    </tr>
    <tr>
      <td>2</td>
      <td>Аксессуары - PS3</td>
      <td>2</td>
    </tr>
    <tr>
      <td>3</td>
      <td>Аксессуары - PS4</td>
      <td>3</td>
    </tr>
    <tr>
      <td>4</td>
      <td>Аксессуары - PSP</td>
      <td>4</td>
    </tr>
    <tr>
      <td>5</td>
      <td>Аксессуары - PSVita</td>
      <td>5</td>
    </tr>
    <tr>
      <td>6</td>
      <td>Аксессуары - XBOX 360</td>
      <td>6</td>
    </tr>
    <tr>
      <td>7</td>
      <td>Аксессуары - XBOX ONE</td>
      <td>7</td>
    </tr>
    <tr>
      <td>8</td>
      <td>Билеты (Цифра)</td>
      <td>8</td>
    </tr>
    <tr>
      <td>9</td>
      <td>Доставка товара</td>
      <td>9</td>
    </tr>
  </tbody>
</table>
</div>

<p>It seems that the category contains two components:</p>
<ol>
  <li>A type</li>
  <li>A subtype</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># split `item_category_name`
</span><span class="n">item_categories</span><span class="p">[</span><span class="sh">'</span><span class="s">split</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">item_categories</span><span class="p">[</span><span class="sh">'</span><span class="s">item_category_name</span><span class="sh">'</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s"> - </span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># isolate `type_name` and 'subtype_name'
</span><span class="n">item_categories</span><span class="p">[</span><span class="sh">'</span><span class="s">type_name</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">item_categories</span><span class="p">[</span><span class="sh">'</span><span class="s">split</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">())</span>
<span class="n">item_categories</span><span class="p">[</span><span class="sh">'</span><span class="s">subtype_name</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">item_categories</span><span class="p">[</span><span class="sh">'</span><span class="s">split</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">strip</span><span class="p">()</span> <span class="k">if</span> <span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">&gt;</span><span class="mi">1</span> <span class="k">else</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">strip</span><span class="p">())</span>

<span class="c1"># the type and subtype can be encoded
</span><span class="n">item_categories</span><span class="p">[</span><span class="sh">'</span><span class="s">type_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nc">LabelEncoder</span><span class="p">().</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">item_categories</span><span class="p">[</span><span class="sh">'</span><span class="s">type_name</span><span class="sh">'</span><span class="p">])</span>
<span class="n">item_categories</span><span class="p">[</span><span class="sh">'</span><span class="s">subtype_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nc">LabelEncoder</span><span class="p">().</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">item_categories</span><span class="p">[</span><span class="sh">'</span><span class="s">subtype_name</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># filter out text features
</span><span class="n">item_categories</span> <span class="o">=</span> <span class="n">item_categories</span><span class="p">[[</span><span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">type_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">subtype_id</span><span class="sh">'</span><span class="p">]]</span>
</code></pre></div></div>

<p>Finally, we apply a similar process to the item names. Since the item names are not consistently defined, we keep only the <code class="language-plaintext highlighter-rouge">item_it</code> and the <code class="language-plaintext highlighter-rouge">item_category_id</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">items</span> <span class="o">=</span> <span class="n">items</span><span class="p">[[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">]]</span>
</code></pre></div></div>

<p><a id="Section_63"></a></p>
<h3 id="monthly-data">Monthly Data</h3>

<p>This competition is special because it requires to perform some aggregation on the train set before building the model. In order to make monthly predictions, we aggregate the train set by shop and item. In addition, the train set needs to contain similar shop/item pairs as the test set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">=====  ITEMS  =====</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">There are {} unique items in the train set.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">())))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">There are {} unique items in the test set.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">())))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{} items are in the test but not in the train set.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">())</span> <span class="o">-</span> <span class="nf">set</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()))))</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">===== SHOPS  =====</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">There are {} unique shops in the train set.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">())))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">There are {} unique shops in the test set.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">())))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{} shop are in the test but not in the train set.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">())</span> <span class="o">-</span> <span class="nf">set</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()))))</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">===== TEST  =====</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The test set contains {} pairs.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">sales_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">There are {} possible unique pairs using the test data.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">())</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">())))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>=====  ITEMS  =====
There are 21806 unique items in the train set.
There are 5100 unique items in the test set.
363 items are in the test but not in the train set.

===== SHOPS  =====
There are 57 unique shops in the train set.
There are 42 unique shops in the test set.
0 shop are in the test but not in the train set.

===== TEST  =====
The test set contains 214200 pairs.
There are 214200 possible unique pairs using the test data.
</code></pre></div></div>

<p>Before we dive into the monthly trends, we need to establish some important rules to help capture the proper sale trends. We need to aggregate the data per month (<code class="language-plaintext highlighter-rouge">date_block_num</code>, <code class="language-plaintext highlighter-rouge">shop_id</code>, <code class="language-plaintext highlighter-rouge">item_id</code>).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">product</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_data</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">cols</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">34</span><span class="p">):</span>
    
    <span class="c1"># isolate sales made on ith month
</span>    <span class="n">monthly_sales</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span><span class="o">==</span><span class="n">i</span><span class="p">]</span>
    
    <span class="c1"># create pairs of id, shops, items
</span>    <span class="n">full_data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="nf">product</span><span class="p">([</span><span class="n">i</span><span class="p">],</span>
                                        <span class="n">monthly_sales</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">(),</span>
                                        <span class="n">monthly_sales</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">())</span>
                               <span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">int16</span><span class="sh">'</span><span class="p">))</span>
    
<span class="c1"># create dataframe    
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">vstack</span><span class="p">(</span><span class="n">full_data</span><span class="p">),</span> <span class="n">columns</span><span class="o">=</span><span class="n">cols</span><span class="p">)</span>

<span class="c1"># convert data to optimize memory
</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int8</span><span class="p">)</span>
<span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int8</span><span class="p">)</span>
<span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>

<span class="c1"># sort values
</span><span class="n">full_data</span> <span class="o">=</span>  <span class="n">full_data</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">cols</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_data</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(10913804, 3)
</code></pre></div></div>

<p>The data now needs to be populated. To do so, we compute the aggregates over <code class="language-plaintext highlighter-rouge">shop_id</code>, <code class="language-plaintext highlighter-rouge">date_block_num</code>, and <code class="language-plaintext highlighter-rouge">item_id</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_data</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>114910</td>
      <td>0</td>
      <td>2</td>
      <td>19</td>
    </tr>
    <tr>
      <td>117150</td>
      <td>0</td>
      <td>2</td>
      <td>27</td>
    </tr>
    <tr>
      <td>120623</td>
      <td>0</td>
      <td>2</td>
      <td>28</td>
    </tr>
    <tr>
      <td>118316</td>
      <td>0</td>
      <td>2</td>
      <td>29</td>
    </tr>
    <tr>
      <td>114602</td>
      <td>0</td>
      <td>2</td>
      <td>32</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># aggregate item_cnt_day
</span><span class="n">monthly_train</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]).</span><span class="nf">agg</span><span class="p">({</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">sum</span><span class="sh">'</span><span class="p">})</span>

<span class="c1"># reset index and columns
</span><span class="n">monthly_train</span> <span class="o">=</span> <span class="n">monthly_train</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">()</span>

<span class="c1"># combine monthly train and pairs
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">monthly_train</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">cols</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># clip data, fill nulls with 0, and downsize the datatype
</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">).</span><span class="nf">clip</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">20</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">)</span>
</code></pre></div></div>

<p>Include the test set records.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create month number
</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="mi">34</span>

<span class="c1"># downsize features
</span><span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>
<span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>
<span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">sales_test</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>

<span class="n">sales_test</span> <span class="o">=</span> <span class="n">sales_test</span><span class="p">.</span><span class="nf">set_index</span><span class="p">(</span><span class="sh">'</span><span class="s">ID</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># concat test and full_data
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">([</span><span class="n">full_data</span><span class="p">,</span> <span class="n">sales_test</span><span class="p">],</span> <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">keys</span><span class="o">=</span><span class="n">cols</span><span class="p">,</span> <span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># fill test values to 0
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<p>Now that our dataset contains the full sets of month/shop/item, we can add our additional features to complete the set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># shops
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">shops</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># items
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">items</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># item_categories
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">item_categories</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># downsize the in64
</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">city_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">city_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>
<span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>
<span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">type_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">type_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>
<span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">subtype_id</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">subtype_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int16</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_data</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>date_block_num</th>
      <th>shop_id</th>
      <th>item_id</th>
      <th>item_cnt_day</th>
      <th>city_id</th>
      <th>item_category_id</th>
      <th>type_id</th>
      <th>subtype_id</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>0</td>
      <td>2</td>
      <td>19</td>
      <td>0.0</td>
      <td>0</td>
      <td>40</td>
      <td>11</td>
      <td>6</td>
    </tr>
    <tr>
      <td>1</td>
      <td>0</td>
      <td>2</td>
      <td>27</td>
      <td>1.0</td>
      <td>0</td>
      <td>19</td>
      <td>5</td>
      <td>12</td>
    </tr>
    <tr>
      <td>2</td>
      <td>0</td>
      <td>2</td>
      <td>28</td>
      <td>0.0</td>
      <td>0</td>
      <td>30</td>
      <td>8</td>
      <td>57</td>
    </tr>
    <tr>
      <td>3</td>
      <td>0</td>
      <td>2</td>
      <td>29</td>
      <td>0.0</td>
      <td>0</td>
      <td>23</td>
      <td>5</td>
      <td>18</td>
    </tr>
    <tr>
      <td>4</td>
      <td>0</td>
      <td>2</td>
      <td>32</td>
      <td>0.0</td>
      <td>0</td>
      <td>40</td>
      <td>11</td>
      <td>6</td>
    </tr>
  </tbody>
</table>
</div>

<p>At this point, we have combined our datasets and are ready for more exploration. One of the most common mistake made when performing EDA is to not clearly define what one is trying to archive. In order to avoid this lack of direction, let’s ask ourselves a few questions that we want answer before going further with our dataset.</p>
<ol>
  <li>What is the monthly total count trend?</li>
  <li>Is there a cycle when averaging the total counts by month?</li>
  <li>What categories are the most sold?</li>
  <li>What shops sell more?</li>
  <li>What categories are generating the most revenue?</li>
  <li>How frequent are returns?</li>
</ol>

<p><strong>What is the monthly total count trend?</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># generate ticks for monthly plots
</span><span class="n">x_tick_vals</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="nf">date_range</span><span class="p">(</span><span class="sh">'</span><span class="s">2013</span><span class="sh">'</span><span class="p">,</span> <span class="n">freq</span><span class="o">=</span><span class="sh">'</span><span class="s">M</span><span class="sh">'</span><span class="p">,</span> <span class="n">periods</span><span class="o">=</span><span class="mi">34</span><span class="p">))</span>
<span class="n">x_tick_vals</span> <span class="o">=</span> <span class="p">[</span><span class="nf">str</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">month</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="s">/</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">year</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">x_tick_vals</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">groups</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">])[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Total item sold</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">groups</span><span class="p">.</span><span class="nf">max</span><span class="p">())</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Date</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticks</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">34</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">x_tick_vals</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">groups</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_139_0.png" />
</figure>

<p><strong>Note</strong>: From the above plot, we can make two observations:</p>
<ol>
  <li>There seems to be a overall decrease of sales year after year</li>
  <li>The plot present some seasonality, the sales during the month of December are much higher that the sales during the preceding and following months. This can be explained as the Holiday season is typically prone to more spendings.</li>
</ol>

<p><strong>Is there a cycle when averaging the total counts by month?</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">month</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">].</span><span class="n">dt</span><span class="p">.</span><span class="n">month</span>
<span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">].</span><span class="n">dt</span><span class="p">.</span><span class="n">year</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">groups</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">month</span><span class="sh">'</span><span class="p">])[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">sum</span><span class="p">()</span>
<span class="n">groups</span> <span class="o">=</span> <span class="n">groups</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">groups</span> <span class="o">=</span> <span class="n">groups</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">month</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Total items sold per month</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">1.1</span><span class="o">*</span><span class="n">groups</span><span class="p">.</span><span class="nf">max</span><span class="p">())</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Month</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticks</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">13</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">x_tick_vals</span><span class="p">,</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">groups</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_144_0.png" />
</figure>

<p><strong>What categories are the most sold?</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gp_category_mean</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">mean</span><span class="p">()</span>
<span class="n">gp_category_sum</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">sharex</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">item_category_id</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">item_cnt_day</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">gp_category_mean</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">palette</span><span class="o">=</span><span class="sh">"</span><span class="s">deep</span><span class="sh">"</span><span class="p">).</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Average number of item sold daily per category</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">item_category_id</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">item_cnt_day</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">gp_category_sum</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">palette</span><span class="o">=</span><span class="sh">"</span><span class="s">deep</span><span class="sh">"</span><span class="p">).</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Average number of item sold per category</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">''</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">labelsize</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_147_0.png" />
</figure>

<p><strong>Note</strong>: From the above two plots, we can observer two interesting facts:</p>
<ol>
  <li>The sales are clearly unbalances amongst item categories. Several categories (71 and 79) account for a very large portion of the average daily item category count sold daily.<br />
  a. “Подарки - Сумки, Альбомы, Коврики д/мыши”,71 (Gifts - Bags, Albums, Mousepads)<br />
  b. Служебные,79 (Office furnitures)</li>
  <li>When looking at the average number of item sold per categories, new categories appear to dominate the sales.<br />
  a. Игры PC - Стандартные издания,30 (PC Games - Standard Editions)<br />
  b. Кино - DVD,40 (Cinema - DVD)<br />
  c. Музыка - CD локального производства,55 (Music - Local Production CD)</li>
</ol>

<p>The discrepancy between the two plots can be explained because not all the items and all the categories were sold during the entire timeframe of the study.</p>

<p><strong>What shops sell more?</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gp_shops_sum</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">shop_id</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">item_cnt_day</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">gp_shops_sum</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="sh">"</span><span class="s">deep</span><span class="sh">"</span><span class="p">).</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Total number of item sold per store</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">''</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">labelsize</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_151_0.png" />
</figure>

<p><strong>Note</strong>: From the above plots, we can see a wide distribution of item sold per store. This can be a helpful feature as the size of the store is certainly correlated to the monthly sales of each items.</p>

<p><strong>What categories are generating the most revenue?</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gp_cat_rev</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">revenue</span><span class="sh">'</span><span class="p">].</span><span class="nf">sum</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="nf">catplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">item_category_id</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">revenue</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">data</span><span class="o">=</span><span class="n">gp_cat_rev</span><span class="p">,</span> <span class="n">row</span><span class="o">=</span><span class="sh">"</span><span class="s">year</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">palette</span><span class="o">=</span><span class="sh">"</span><span class="s">deep</span><span class="sh">"</span><span class="p">,</span> <span class="n">kind</span><span class="o">=</span><span class="sh">"</span><span class="s">bar</span><span class="sh">"</span><span class="p">,</span>
            <span class="n">height</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">aspect</span><span class="o">=</span><span class="mf">3.5</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_155_0.png" />
</figure>

<p><strong>Note</strong>: The above plots help understand two important aspects of the sale trends:</p>
<ol>
  <li>There is a time effect related to what item categories are popular. For instance, in 2013, the category19 was very popular and its associated revenue has been decreasing since.</li>
  <li>As expected, the category feature is directly related to quantities sold.</li>
</ol>

<p><strong>How frequent are returns?</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">return_df</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="o">-</span><span class="nf">min</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
<span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">sales</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nf">max</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</code></pre></div></div>

<p><em>Return per category</em></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">return_cats</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">sales</span><span class="sh">'</span><span class="p">].</span><span class="nf">sum</span><span class="p">()</span>
<span class="n">return_cats</span><span class="p">[</span><span class="sh">'</span><span class="s">percent_return</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">return_cats</span><span class="p">[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">return_cats</span><span class="p">[</span><span class="sh">'</span><span class="s">sales</span><span class="sh">'</span><span class="p">]</span> <span class="o">*</span> <span class="mf">100.</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">item_category_id</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">percent_return</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">return_cats</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="sh">"</span><span class="s">deep</span><span class="sh">"</span><span class="p">).</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Percentage of return per category</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">''</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">labelsize</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_161_0.png" />
</figure>

<p><strong>Note</strong>: From the above, we can see that the item category 17 (Игровые консоли - Прочие, Game consoles - Other) experiences the highest rate of return (4.5%). This is helpful because this feature can be use to better predict the quantity returned every month.</p>

<p><em>Return per store</em></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">return_stores</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">sales</span><span class="sh">'</span><span class="p">].</span><span class="nf">sum</span><span class="p">()</span>
<span class="n">return_stores</span><span class="p">[</span><span class="sh">'</span><span class="s">percent_return</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">return_stores</span><span class="p">[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">return_stores</span><span class="p">[</span><span class="sh">'</span><span class="s">sales</span><span class="sh">'</span><span class="p">]</span> <span class="o">*</span> <span class="mf">100.</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">shop_id</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">percent_return</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">return_stores</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="sh">"</span><span class="s">deep</span><span class="sh">"</span><span class="p">).</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Return rate per store</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">''</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">labelsize</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_165_0.png" />
</figure>

<p><strong>Note</strong>: The above plot shows that overall, the shops experience a similar rate of return (~0.4%). However, two stores (9 and 33) experience a higher rate of return with 0.7% and 0.85% respectively.</p>

<p><em>Return per month</em></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">month</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="sh">'</span><span class="s">str</span><span class="sh">'</span><span class="p">).</span><span class="nb">str</span><span class="p">.</span><span class="nf">cat</span><span class="p">(</span><span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="sh">'</span><span class="s">str</span><span class="sh">'</span><span class="p">),</span><span class="n">sep</span><span class="o">=</span><span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">return_month</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">sales</span><span class="sh">'</span><span class="p">].</span><span class="nf">sum</span><span class="p">()</span>
<span class="n">return_month</span><span class="p">[</span><span class="sh">'</span><span class="s">percent_return</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">return_month</span><span class="p">[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">return_month</span><span class="p">[</span><span class="sh">'</span><span class="s">sales</span><span class="sh">'</span><span class="p">]</span> <span class="o">*</span> <span class="mf">100.</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">date</span><span class="sh">"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">"</span><span class="s">percent_return</span><span class="sh">"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">return_month</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="sh">"</span><span class="s">deep</span><span class="sh">"</span><span class="p">).</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Return rate per store</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">''</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">ax</span><span class="p">.</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">60</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">labelsize</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_170_0.png" />
</figure>

<p>Before performing some feature engineering, we clean up the memory of unused variables.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">del</span> <span class="n">ax</span><span class="p">,</span> <span class="n">axes</span>
<span class="k">del</span> <span class="n">bench_oct2015</span><span class="p">,</span> <span class="n">test_oct2015</span><span class="p">,</span> <span class="n">test_submission</span>
<span class="k">del</span> <span class="n">f</span><span class="p">,</span> <span class="n">fig</span><span class="p">,</span> <span class="n">x_tick_vals</span>
<span class="k">del</span> <span class="n">i</span>
<span class="k">del</span> <span class="n">gp_cat_rev</span><span class="p">,</span> <span class="n">gp_category_mean</span><span class="p">,</span> <span class="n">gp_category_sum</span><span class="p">,</span> <span class="n">gp_shops_sum</span><span class="p">,</span> <span class="n">groups</span>
<span class="k">del</span> <span class="n">return_cats</span><span class="p">,</span> <span class="n">return_stores</span><span class="p">,</span> <span class="n">monthly_train</span><span class="p">,</span> <span class="n">monthly_sales</span>
</code></pre></div></div>

<hr />
<p><a id="Section_7"></a></p>
<h2 id="feature-engineering">Feature Engineering</h2>

<p>In this section, we leverage the valuable insights we obtained from the EDA by creating new features.
The first step consists of creating a function to help generate lag features. For instance, we want each monthly record to contain information about the sales from the n-th previous month.</p>

<h3 id="downcast">Downcast</h3>
<p>In order to save some memory, we downcast the floats and integers stored in the dataset.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Datasize before downcast:</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">full_data</span><span class="p">.</span><span class="nf">info</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Datasize before downcast:
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 11128004 entries, 0 to 11128003
Data columns (total 8 columns):
date_block_num      int16
shop_id             int16
item_id             int16
item_cnt_day        float32
city_id             int16
item_category_id    int16
type_id             int16
subtype_id          int16
dtypes: float32(1), int16(7)
memory usage: 275.9 MB
None
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">downcast_dtypes</span><span class="p">(</span><span class="n">df</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">
        Changes column types in the dataframe: 
                
                `float64` type to `float16`
                `int64`   type to `int16`http://localhost:8888/notebooks/Google%20Drive/2-Coding/1-Coursera/Advanced%20ML/2-Kaggle/Final%20Project/Final%20Project.ipynb#
    </span><span class="sh">'''</span>
    
    <span class="c1"># Select columns to downcast
</span>    <span class="n">float_cols</span> <span class="o">=</span> <span class="p">[</span><span class="n">c</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">df</span> <span class="k">if</span> <span class="n">df</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">dtype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">float64</span><span class="sh">"</span> <span class="ow">or</span> <span class="n">df</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">dtype</span> <span class="o">==</span> <span class="sh">'</span><span class="s">float32</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">int_cols</span> <span class="o">=</span>   <span class="p">[</span><span class="n">c</span> <span class="k">for</span> <span class="n">c</span> <span class="ow">in</span> <span class="n">df</span> <span class="nf">if </span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">dtype</span> <span class="o">==</span> <span class="sh">"</span><span class="s">int64</span><span class="sh">"</span> <span class="ow">or</span> <span class="n">df</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">dtype</span> <span class="o">==</span> <span class="sh">'</span><span class="s">int32</span><span class="sh">'</span>  <span class="ow">or</span> <span class="n">df</span><span class="p">[</span><span class="n">c</span><span class="p">].</span><span class="n">dtype</span> <span class="o">==</span> <span class="sh">'</span><span class="s">int16</span><span class="sh">'</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">c</span><span class="o">!=</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">)]</span>
    
    <span class="c1"># Downcast
</span>    <span class="n">df</span><span class="p">[</span><span class="n">float_cols</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">float_cols</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">float16</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="n">int_cols</span><span class="p">]</span>   <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">int_cols</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">int8</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">df</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">full_data</span> <span class="o">=</span> <span class="nf">downcast_dtypes</span><span class="p">(</span><span class="n">full_data</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Datasize after downcast:</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">full_data</span><span class="p">.</span><span class="nf">info</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Datasize after downcast:
&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 11128004 entries, 0 to 11128003
Data columns (total 8 columns):
date_block_num      int8
shop_id             int8
item_id             int16
item_cnt_day        float16
city_id             int8
item_category_id    int8
type_id             int8
subtype_id          int8
dtypes: float16(1), int16(1), int8(6)
memory usage: 191.0 MB
None
</code></pre></div></div>

<p><a id="Section_71"></a></p>
<h3 id="new-features-and-encoding">New Features and Encoding</h3>

<p>Before we implement the lags, we need to define what features we want to lag. Based on the EDA, the following features will be used:</p>

<ul>
  <li>Per shop_id and item_id, we want to propagate the min, average, and max price</li>
  <li>Per shop_id and item id, we want to propagate the current streak of sales (in month)</li>
  <li>Per store_id, item_id, we want the number of returns</li>
  <li>Per item_id, we want to propagate the min, average, and max price</li>
  <li>Per item_id, we want the number of store selling the item</li>
  <li>Per shop_id, we want the number of item sold</li>
  <li>Per shop_id, we want the most famous category</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create return features
</span><span class="n">return_df</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">[[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">]]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># ===========================
# create groups
# ===========================
</span>
<span class="c1"># items
</span><span class="n">group_item</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># store + item
</span><span class="n">group_store_item</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="c1"># store
</span><span class="n">group_store</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># category
</span><span class="n">group_cat</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># category + store
</span><span class="n">group_cat_store</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># type code
</span><span class="n">group_type</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">type_id</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># type + store
</span><span class="n">group_type_shop</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">type_id</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># subtype
</span><span class="n">group_subtype</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">subtype_id</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># subtype + store
</span><span class="n">group_subtype_shop</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">subtype_id</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># city
</span><span class="n">group_city</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">city_id</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># city + item
</span><span class="n">group_city_item</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">city_id</span><span class="sh">'</span><span class="p">])</span>

<span class="c1"># return per shop + item
</span><span class="n">return_shop_item</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">)</span>

<span class="c1"># return per shop
</span><span class="n">return_shop</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">)</span>

<span class="c1"># return per item
</span><span class="n">retun_item</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">)</span>

<span class="c1"># ===========================
# create encodings
# ===========================
</span>
<span class="c1"># PRICE
# min, max, average of price per items per month
</span><span class="n">monthly_sales_group</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">])</span>
<span class="n">min_max_avg_prices</span> <span class="o">=</span> <span class="n">monthly_sales_group</span><span class="p">[</span><span class="sh">'</span><span class="s">item_price</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">([</span><span class="sh">'</span><span class="s">min</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">max</span><span class="sh">'</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">]).</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">min_max_avg_prices</span> <span class="o">=</span> <span class="n">min_max_avg_prices</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">min_item_price</span><span class="sh">"</span><span class="p">,</span>
                                                        <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">max_item_price</span><span class="sh">"</span><span class="p">,</span>
                                                        <span class="sh">"</span><span class="s">mean</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">avg_item_price</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># min, max, average of price per item per item per store per month
</span><span class="n">monthly_sales_item_store_group</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">])</span>
<span class="n">min_max_avg_item_store</span> <span class="o">=</span> <span class="n">monthly_sales_item_store_group</span><span class="p">[</span><span class="sh">'</span><span class="s">item_price</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">([</span><span class="sh">'</span><span class="s">min</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">max</span><span class="sh">'</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">]).</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">min_max_avg_item_store</span> <span class="o">=</span> <span class="n">min_max_avg_item_store</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">min</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">min_item_shop_price</span><span class="sh">"</span><span class="p">,</span>
                                                                <span class="sh">"</span><span class="s">max</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">max_item_shop_price</span><span class="sh">"</span><span class="p">,</span>
                                                                <span class="sh">"</span><span class="s">mean</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">avg_item_shop_price</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># RETURNS
# sum returns per store
</span><span class="n">return_shop</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">).</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">shop_return</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># sum returns per item
</span><span class="n">return_item</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">).</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">item_return</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># sum returns per category
</span><span class="n">return_cat</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">).</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">cat_return</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># sum returns per store + item
</span><span class="n">return_item_store</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">).</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">item_shop_return</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># sum returns per store per category
</span><span class="n">return_store_cat</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">).</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">return</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">cat_shop_return</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># SALES
# number of stores selling the item per month
</span><span class="n">store_count</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">])[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">count</span><span class="p">().</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">store_count</span> <span class="o">=</span> <span class="n">store_count</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">shop_count</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># target item count
</span><span class="n">target_item</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">)[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">sum</span><span class="p">()</span>
<span class="n">target_item</span> <span class="o">=</span> <span class="n">target_item</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">item_cnt_day</span><span class="sh">"</span><span class="p">:</span> <span class="sh">"</span><span class="s">item_sold</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># number of unique items sold in store per month
</span><span class="n">unique_items</span> <span class="o">=</span> <span class="n">group_store</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">nunique</span><span class="p">().</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">unique_items</span> <span class="o">=</span> <span class="n">unique_items</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">:</span> <span class="sh">"</span><span class="s">item_avail</span><span class="sh">"</span><span class="p">})</span>

<span class="c1"># number of item sold per category
</span><span class="n">cat_count</span> <span class="o">=</span> <span class="n">group_cat</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">).</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">cat_count</span> <span class="o">=</span> <span class="n">cat_count</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">avg_cat_count</span><span class="sh">'</span><span class="p">})</span>

<span class="c1"># nunber of item sold per category per store
</span><span class="n">cat_store_count</span> <span class="o">=</span> <span class="n">group_cat_store</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">).</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">cat_store_count</span> <span class="o">=</span> <span class="n">cat_store_count</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">avg_cat_store_count</span><span class="sh">'</span><span class="p">})</span>

<span class="c1"># TYPES AND SUBTYPES
# types
</span><span class="n">type_count</span> <span class="o">=</span> <span class="n">group_type</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">).</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">type_count</span> <span class="o">=</span> <span class="n">type_count</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">avg_type</span><span class="sh">'</span><span class="p">})</span>

<span class="n">type_store_count</span> <span class="o">=</span> <span class="n">group_type_shop</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">).</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">type_store_count</span> <span class="o">=</span> <span class="n">type_store_count</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">avg_type_store</span><span class="sh">'</span><span class="p">})</span>

<span class="c1"># subtype
</span><span class="n">subtype_count</span> <span class="o">=</span> <span class="n">group_subtype</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">).</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">subtype_count</span> <span class="o">=</span> <span class="n">subtype_count</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">avg_subtype</span><span class="sh">'</span><span class="p">})</span>

<span class="n">subtype_store_count</span> <span class="o">=</span> <span class="n">group_subtype_shop</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">).</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">subtype_store_count</span> <span class="o">=</span> <span class="n">subtype_store_count</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">avg_subtype_store</span><span class="sh">'</span><span class="p">})</span>

<span class="c1"># CITY
</span><span class="n">city_count</span> <span class="o">=</span> <span class="n">group_city</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">).</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">avg_city</span><span class="sh">'</span><span class="p">})</span>
<span class="n">city_count_item</span> <span class="o">=</span> <span class="n">group_city_item</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">agg</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">).</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">avg_city_item</span><span class="sh">'</span><span class="p">})</span>
</code></pre></div></div>

<p>In addition to the encoded features, we need a function to compute streaks. Three streaks are considered:</p>
<ol>
  <li>Number of successive month the item has been sold (looking only at the previous months).</li>
  <li>Number of total sales for the item.</li>
  <li>Number of total sales for the item with a 0 for month during which sales=0.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">streak</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">col</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">
    Return a new feature corresponding to the streak of the sales for an item.
    </span><span class="sh">"""</span>

    <span class="n">clone</span> <span class="o">=</span> <span class="n">df</span><span class="p">[[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="n">col</span><span class="p">]].</span><span class="nf">copy</span><span class="p">()</span>

    <span class="c1"># sort clone (item_id, shop_id, data_block_num)
</span>    <span class="n">clone</span> <span class="o">=</span> <span class="n">clone</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">([</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">])</span>

    <span class="c1"># create new sold feature
</span>    <span class="n">clone</span><span class="p">[</span><span class="sh">'</span><span class="s">sold</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">clone</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>

    <span class="c1"># create streak reset condition
</span>    <span class="n">reset</span> <span class="o">=</span> <span class="p">(</span><span class="n">clone</span><span class="p">[</span><span class="sh">'</span><span class="s">sold</span><span class="sh">'</span><span class="p">]</span><span class="o">!=</span><span class="n">clone</span><span class="p">[</span><span class="sh">'</span><span class="s">sold</span><span class="sh">'</span><span class="p">].</span><span class="nf">shift</span><span class="p">())</span> <span class="o">|</span> \
            <span class="p">(</span><span class="n">clone</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]</span><span class="o">!=</span><span class="n">clone</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">shift</span><span class="p">())</span> <span class="o">|</span> \
            <span class="p">(</span><span class="n">clone</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">]</span><span class="o">!=</span><span class="n">clone</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">shift</span><span class="p">())</span>

    <span class="c1"># create streak
</span>    <span class="n">clone</span><span class="p">[</span><span class="sh">'</span><span class="s">streak</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">clone</span><span class="p">[</span><span class="sh">'</span><span class="s">sold</span><span class="sh">'</span><span class="p">].</span><span class="nf">groupby</span><span class="p">((</span><span class="n">reset</span><span class="p">).</span><span class="nf">cumsum</span><span class="p">()).</span><span class="nf">cumsum</span><span class="p">()</span>

    <span class="c1"># add total sales (10, 11, 0, 0, 5, 1, 0) =&gt; (10, 21, 21, 21, 26, 27, 27)
</span>    <span class="n">cum_sales_df</span> <span class="o">=</span> <span class="n">clone</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span>
        <span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">])[</span><span class="n">col</span><span class="p">].</span><span class="nf">sum</span><span class="p">().</span><span class="nf">groupby</span><span class="p">(</span>
            <span class="n">level</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">]).</span><span class="nf">cumsum</span><span class="p">().</span><span class="nf">reset_index</span><span class="p">().</span><span class="nf">rename</span><span class="p">(</span>
                <span class="n">columns</span><span class="o">=</span><span class="p">{</span><span class="n">col</span><span class="p">:</span> <span class="sh">'</span><span class="s">cum_sales</span><span class="sh">'</span><span class="p">})</span>
    <span class="n">clone</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">clone</span><span class="p">,</span>
                     <span class="n">right</span><span class="o">=</span><span class="n">cum_sales_df</span><span class="p">,</span>
                     <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">],</span>
                     <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># delete column
</span>    <span class="k">del</span> <span class="n">clone</span><span class="p">[</span><span class="n">col</span><span class="p">]</span>

    <span class="c1"># merge streak with original df
</span>    <span class="n">return_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">df</span><span class="p">,</span>
                         <span class="n">right</span><span class="o">=</span><span class="n">clone</span><span class="p">,</span>
                         <span class="n">on</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">],</span>
                         <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># add sale streak in term of number (10, 11, 0, 0, 5, 1, 0) =&gt; (10, 21, 0, 0, 5, 6, 0)
</span>    <span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">cum_if_sales</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">cum_sales</span><span class="sh">'</span><span class="p">]</span>

    <span class="c1"># remove values of cum_if_sales for months without sales
</span>    <span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">cum_if_sales</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">cum_if_sales</span><span class="sh">'</span><span class="p">]</span> <span class="o">*</span> <span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">sold</span><span class="sh">'</span><span class="p">]</span>

    <span class="c1"># delete column
</span>    <span class="k">del</span> <span class="n">return_df</span><span class="p">[</span><span class="sh">'</span><span class="s">sold</span><span class="sh">'</span><span class="p">]</span>

    <span class="k">return</span> <span class="n">return_df</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># combine all new features with original dataframe and create sale streaks
</span><span class="n">key_item_store</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">key_item</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">key_store</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">key_store_cat</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">key_cat</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">key_type</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">type_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">key_type_shop</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">type_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">key_subype</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">subtype_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">key_subtype_shop</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">subtype_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">key_city</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">city_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">key_city_item</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">city_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filename</span> <span class="o">=</span> <span class="sh">'</span><span class="s">data</span><span class="sh">'</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
    <span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="n">outfile</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># PRICE
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">min_max_avg_prices</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_item</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>
<span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">min_max_avg_item_store</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_item_store</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># RETURNS
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">return_shop</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_store</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>
<span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">return_item</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_item</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>
<span class="c1">#full_data = pd.merge(left=full_data, right=return_cat, on=key_cat, how='left')
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">return_item_store</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_item_store</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>
<span class="c1">#full_data = pd.merge(left=full_data, right=return_store_cat, on=key_store_cat, how='left')
</span>
<span class="c1"># SALES
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">store_count</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_item</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>
<span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">target_item</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_item</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>
<span class="c1">#full_data = pd.merge(left=full_data, right=unique_items, on=key_store, how='left')
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">cat_count</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_cat</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>
<span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">cat_store_count</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_store_cat</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># TYPES AND SUBTYPES
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">type_count</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_type</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>
<span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">type_store_count</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_type_shop</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>
<span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">subtype_count</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_subype</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>
<span class="n">full_data</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">left</span><span class="o">=</span><span class="n">full_data</span><span class="p">,</span> <span class="n">right</span><span class="o">=</span><span class="n">subtype_store_count</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">key_subtype_shop</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># CITY
#full_data = pd.merge(left=full_data, right=city_count, on=key_city, how='left')
#full_data = pd.merge(left=full_data, right=city_count_item, on=key_city_item, how='left')
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># fill_na
</span><span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">min_item_price</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">max_item_price</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">avg_item_price</span><span class="sh">'</span><span class="p">,</span>
           <span class="sh">'</span><span class="s">min_item_shop_price</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">max_item_shop_price</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">avg_item_shop_price</span><span class="sh">'</span><span class="p">,</span> 
           <span class="sh">'</span><span class="s">shop_return</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_return</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_shop_return</span><span class="sh">'</span><span class="p">]</span>

<span class="n">full_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="n">columns</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="n">columns</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="c1"># create data skreak
</span><span class="n">full_data</span> <span class="o">=</span> <span class="nf">streak</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">del</span> <span class="n">min_max_avg_prices</span><span class="p">,</span> <span class="n">min_max_avg_item_store</span><span class="p">,</span> <span class="n">return_shop</span><span class="p">,</span> <span class="n">return_item</span><span class="p">,</span> <span class="n">return_cat</span><span class="p">,</span> <span class="n">return_item_store</span>
<span class="k">del</span> <span class="n">return_store_cat</span><span class="p">,</span> <span class="n">store_count</span><span class="p">,</span> <span class="n">target_item</span><span class="p">,</span> <span class="n">unique_items</span><span class="p">,</span> <span class="n">cat_count</span><span class="p">,</span> <span class="n">cat_store_count</span>
<span class="k">del</span> <span class="n">type_count</span><span class="p">,</span> <span class="n">type_store_count</span><span class="p">,</span> <span class="n">subtype_count</span><span class="p">,</span> <span class="n">subtype_store_count</span>
<span class="k">del</span> <span class="n">city_count</span><span class="p">,</span> <span class="n">city_count_item</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">del</span> <span class="n">return_df</span><span class="p">,</span> <span class="n">return_shop_item</span><span class="p">,</span> <span class="n">return_month</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filename</span> <span class="o">=</span> <span class="sh">'</span><span class="s">data</span><span class="sh">'</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
    <span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="n">outfile</span><span class="p">)</span>
<span class="c1">#with open(filename, 'rb') as infile:
#    full_data = pickle.load(infile)
</span></code></pre></div></div>

<p><a id="Section_73"></a></p>
<h3 id="lags">Lags</h3>

<p>In order for the past information to be available when making predictions for the current month, lagged features need to be created. They consists of conveying the information from the past to the current records. For instance, what was the number of sales for a specific pair of item and shop during the previous month.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># List of columns that we will use to create lags
</span><span class="n">index_cols</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">no_shift</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">city_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">subtype_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">type_id</span><span class="sh">'</span><span class="p">]</span>
<span class="n">cols_to_rename</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="n">full_data</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">difference</span><span class="p">(</span><span class="n">index_cols</span><span class="p">).</span><span class="nf">difference</span><span class="p">(</span><span class="n">no_shift</span><span class="p">))</span>
</code></pre></div></div>

<p>We can now create a set of lagged features using lags ranging from 1 to 12 months.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">lag_feature</span><span class="p">(</span><span class="n">df</span><span class="p">,</span><span class="n">lags</span><span class="p">,</span> <span class="n">cols</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">
    Add new lag columns to the dataframe (df).
    Inputs:
        df: input dataframe containing time-series data.
        lags: list of integer corresponding to the desired lags.
    </span><span class="sh">'''</span>
    <span class="k">for</span> <span class="n">month_shift</span> <span class="ow">in</span> <span class="nf">tqdm_notebook</span><span class="p">(</span><span class="n">lags</span><span class="p">):</span>
     
        <span class="c1"># clone df
</span>        <span class="n">df_shift</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">index_cols</span> <span class="o">+</span> <span class="n">cols</span><span class="p">].</span><span class="nf">copy</span><span class="p">()</span>

        <span class="c1"># shift date_block_num
</span>        <span class="n">df_shift</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df_shift</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">month_shift</span>

        <span class="c1"># dummy rename function
</span>        <span class="n">foo</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="sh">'</span><span class="s">{}_lag_{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">month_shift</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">cols</span> <span class="k">else</span> <span class="n">x</span>

        <span class="c1"># rename columns
</span>        <span class="n">df_shift</span> <span class="o">=</span> <span class="n">df_shift</span><span class="p">.</span><span class="nf">rename</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">foo</span><span class="p">)</span>

        <span class="c1"># downcast
</span>        <span class="n">df_shift</span> <span class="o">=</span> <span class="nf">downcast_dtypes</span><span class="p">(</span><span class="n">df_shift</span><span class="p">)</span>
        
        <span class="c1"># merge original data with shift
</span>        <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">df</span><span class="p">,</span> <span class="n">df_shift</span><span class="p">,</span> <span class="n">on</span><span class="o">=</span><span class="n">index_cols</span><span class="p">,</span> <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">).</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">df</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create lags
</span><span class="n">full_data</span> <span class="o">=</span> <span class="nf">lag_feature</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="p">[</span><span class="sh">'</span><span class="s">avg_cat_count</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">avg_cat_store_count</span><span class="sh">'</span><span class="p">,</span>
                                         <span class="sh">'</span><span class="s">avg_subtype</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">avg_subtype_store</span><span class="sh">'</span><span class="p">,</span>
                                         <span class="sh">'</span><span class="s">avg_type</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">avg_type_store</span><span class="sh">'</span><span class="p">,</span>
                                         <span class="sh">'</span><span class="s">item_return</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_shop_return</span><span class="sh">'</span><span class="p">,</span>
                                         <span class="sh">'</span><span class="s">item_sold</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_count</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_return</span><span class="sh">'</span><span class="p">])</span>

<span class="n">full_data</span> <span class="o">=</span> <span class="nf">lag_feature</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],</span> <span class="p">[</span><span class="sh">'</span><span class="s">min_item_price</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">avg_item_price</span><span class="sh">'</span><span class="p">,</span>
                                               <span class="sh">'</span><span class="s">cum_if_sales</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">cum_sales</span><span class="sh">'</span><span class="p">,</span>
                                               <span class="sh">'</span><span class="s">max_item_price</span><span class="sh">'</span><span class="p">])</span>

<span class="n">full_data</span> <span class="o">=</span> <span class="nf">lag_feature</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],</span> <span class="p">[</span><span class="sh">'</span><span class="s">max_item_shop_price</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">min_item_shop_price</span><span class="sh">'</span><span class="p">,</span>
                                                   <span class="sh">'</span><span class="s">avg_item_shop_price</span><span class="sh">'</span><span class="p">])</span>

<span class="n">full_data</span> <span class="o">=</span> <span class="nf">lag_feature</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">12</span><span class="p">],</span> <span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">streak</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HBox(children=(IntProgress(value=0, max=1), HTML(value='')))






HBox(children=(IntProgress(value=0, max=4), HTML(value='')))






HBox(children=(IntProgress(value=0, max=6), HTML(value='')))






HBox(children=(IntProgress(value=0, max=7), HTML(value='')))
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Extract time based features.
</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">year</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">((</span><span class="n">x</span><span class="o">//</span><span class="mi">12</span><span class="p">)</span> <span class="o">+</span> <span class="mi">2013</span><span class="p">))</span>
<span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">month</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span> <span class="o">%</span> <span class="mi">12</span><span class="p">))</span>
</code></pre></div></div>

<hr />
<p><a id="Section_8"></a></p>
<h2 id="train--test-split">Train / Test Split</h2>

<p>The objective of the model is to accurately predict sales of the 34th month. Since the test set is defined in the future of our available dataset, we need to respect the same conditions when defining our train/validation split. That is, the months included in the validation split should be posterior to the train period.</p>
<ul>
  <li>The training set is defined using months 12 to 28 (we remove the first 12 months as the data may be too old to accurately represent current trends in the sales).</li>
  <li>The validation set is defined using months 29 to 33 and the test set will use block 34.</li>
</ul>

<p>In addition, the goal of this competition is to predict the sales of month N without any information related to month N. Therefore, we delete from our dataset the features that are related to the sales of the current month.</p>

<h3 id="purge-features">Purge Features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># metrics related to the sales of current month (to be deleted)
</span><span class="n">to_delete</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">"</span><span class="s">min_item_price</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">max_item_price</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">avg_item_price</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">min_item_shop_price</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">max_item_shop_price</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">avg_item_shop_price</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">shop_return</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">item_return</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">item_shop_return</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">shop_count</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">item_sold</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">item_avail</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">avg_cat_count</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">avg_cat_store_count</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">avg_type</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">avg_type_store</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">avg_subtype</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">avg_subtype_store</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">streak</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">cum_sales</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">cum_if_sales</span><span class="sh">"</span>
<span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># purge full set of columns to be deleted
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="n">full_data</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">difference</span><span class="p">(</span><span class="n">to_delete</span><span class="p">)]</span>
</code></pre></div></div>

<p>Now we delete the first 12 months worth of data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># remove first 12 months (null lag and old data)
</span><span class="n">full_data</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[(</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span><span class="o">&gt;=</span><span class="mi">12</span><span class="p">)]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filename</span> <span class="o">=</span> <span class="sh">'</span><span class="s">data_before_split</span><span class="sh">'</span>
<span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">outfile</span><span class="p">:</span>
    <span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">full_data</span><span class="p">,</span> <span class="n">outfile</span><span class="p">)</span>
<span class="c1">#with open(filename, 'rb') as infile:
#    full_data = pickle.load(infile)
</span></code></pre></div></div>

<h3 id="make-splits">Make Splits</h3>

<p>Finally, we split the dataset into a training, a validation, and a test set according to the rules defined above.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># train set
</span><span class="n">X_train</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">28</span><span class="p">].</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">],</span>
                                                           <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">X_train_dates</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">28</span><span class="p">][</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">Y_train</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">28</span><span class="p">][</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># validation set for first-layer model
</span><span class="n">X_valid</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[(</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">28</span><span class="p">)</span>
                    <span class="o">&amp;</span> <span class="p">(</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">33</span><span class="p">)].</span><span class="nf">drop</span><span class="p">(</span>
                        <span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">X_valid_dates</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[(</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">28</span><span class="p">)</span>
                    <span class="o">&amp;</span> <span class="p">(</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">33</span><span class="p">)][</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">Y_valid</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[(</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">28</span><span class="p">)</span>
                    <span class="o">&amp;</span> <span class="p">(</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">33</span><span class="p">)][</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># validation set for meta-model
</span><span class="n">X_valid_meta</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">33</span><span class="p">].</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">X_valid_meta_dates</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">33</span><span class="p">][</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span>
<span class="n">Y_valid_meta</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">33</span><span class="p">][</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># test set (predictions)
</span><span class="n">X_test</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">34</span><span class="p">].</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">],</span>
                                                           <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>We create a checkpoint by pickling our train, validation, and test sets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># train
</span><span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">X_train.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
<span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">Y_train.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
<span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">X_train_dates</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">X_train_dates.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>

<span class="c1"># validation
</span><span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">X_valid</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">X_valid.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
<span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">Y_valid</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">Y_valid.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
<span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">X_valid_dates</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">X_valid_dates.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>

<span class="c1"># validation meta
</span><span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">X_valid_meta</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">X_valid_meta.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
<span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">Y_valid_meta</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">Y_valid_meta.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
<span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">X_valid_meta_dates</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">X_valid_meta_dates.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>

<span class="c1"># test
</span><span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">X_test.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<h3 id="validate-split-strategy">Validate Split Strategy</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># define number of total records
</span><span class="n">n_rows</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">X_valid</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="n">X_valid_meta</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="c1"># print fractions
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Train set records:</span><span class="sh">'</span><span class="p">,</span> <span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Validation set records:</span><span class="sh">'</span><span class="p">,</span> <span class="n">X_valid</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Meta validation set records:</span><span class="sh">'</span><span class="p">,</span> <span class="n">X_valid_meta</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Test set records:</span><span class="sh">'</span><span class="p">,</span> <span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Train set records: %s (%.f%% of complete data)</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">((</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">n_rows</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Validation set records: %s (%.f%% of complete data)</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_valid</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">((</span><span class="n">X_valid</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">n_rows</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Meta validation set records: %s (%.f%% of complete data)</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">X_valid_meta</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="p">((</span><span class="n">X_valid_meta</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">n_rows</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Train set records: 5068102
Validation set records: 1118820
Meta validation set records: 238172
Test set records: 214200
Train set records: 5068102 (76% of complete data)
Validation set records: 1118820 (17% of complete data)
Meta validation set records: 238172 (4% of complete data)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">mean for whole train set: {0}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span>
    <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">full_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">28</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span>
        <span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">mean for validation train set: {0}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span>
    <span class="n">np</span><span class="p">.</span><span class="nf">mean</span><span class="p">(</span><span class="n">full_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">33</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">&gt;=</span> <span class="mi">28</span><span class="p">),</span> <span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span>
        <span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">))))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mean for whole train set: 0.29374054074287415
mean for validation train set: 0.2667059898376465
</code></pre></div></div>

<p><strong>Note</strong>: the above means are very close to the value obtained by probing the leaderboard.</p>

<p>Since we have been generating a lot of data, it is important to clear unnecessary variable. We have created our train, validation, and test set so the full dataset can be deleted.</p>

<p>Finally, we can look at new records in the test set, that is pairs the set of <code class="language-plaintext highlighter-rouge">item_id</code> from the test set not included in the train set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">item_in_test_only</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()).</span><span class="nf">difference</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Items in test and not in train: {0}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">item_in_test_only</span><span class="p">)))</span>
<span class="n">item_in_train_only</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()).</span><span class="nf">difference</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Items in train and not in test: {0}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">item_in_train_only</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Items in test and not in train: 1499
Items in train and not in test: 11626
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">del</span> <span class="n">full_data</span>
</code></pre></div></div>

<hr />
<p><a id="Section_9"></a></p>
<h2 id="models">Models</h2>

<p>We are now ready to train our models. We are going to follow a typical ensembling process:</p>
<ol>
  <li>Examine feature importance to see if PCA is needed.</li>
  <li>Create first layer models.</li>
  <li>For the promising base-layer models, fine-tune the hyperparameters.</li>
  <li>Stack model using a meta-model.</li>
</ol>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/stacking_cv_regressor_overview.png" style="height: 500px;" />
</figure>

<p><a id="Section_75"></a></p>
<h3 id="feature-importance">Feature Importance</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">pickle</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">xgboost</span>
<span class="kn">from</span> <span class="n">xgboost</span> <span class="kn">import</span> <span class="n">XGBRegressor</span>
<span class="kn">import</span> <span class="n">gc</span>

<span class="n">gc</span><span class="p">.</span><span class="nf">collect</span><span class="p">()</span>
<span class="c1"># reload
</span><span class="n">X_train</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">'</span><span class="s">X_train.pickle</span><span class="sh">'</span><span class="p">)</span>
<span class="n">X_train_dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">'</span><span class="s">X_train_dates.pickle</span><span class="sh">'</span><span class="p">)</span>
<span class="n">Y_train</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">'</span><span class="s">Y_train.pickle</span><span class="sh">'</span><span class="p">)</span>

<span class="n">X_valid</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">'</span><span class="s">X_valid.pickle</span><span class="sh">'</span><span class="p">)</span>
<span class="n">X_valid_dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">'</span><span class="s">X_valid_dates.pickle</span><span class="sh">'</span><span class="p">)</span>
<span class="n">Y_valid</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">'</span><span class="s">Y_valid.pickle</span><span class="sh">'</span><span class="p">)</span>

<span class="n">X_valid_meta</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">'</span><span class="s">X_valid_meta.pickle</span><span class="sh">'</span><span class="p">)</span>
<span class="n">X_valid_meta_dates</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">'</span><span class="s">X_valid_meta_dates.pickle</span><span class="sh">'</span><span class="p">)</span>
<span class="n">Y_valid_meta</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">'</span><span class="s">Y_valid_meta.pickle</span><span class="sh">'</span><span class="p">)</span>

<span class="n">X_test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_pickle</span><span class="p">(</span><span class="sh">'</span><span class="s">X_test.pickle</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>In order to obtain the feature importances, we create a simple tree-based model (Random-Forest) and extract the feature importances.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create simple random forest
</span><span class="n">forest</span> <span class="o">=</span> <span class="nc">ExtraTreesRegressor</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
                              <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
                              <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
                              <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># train model on training set
</span><span class="n">forest</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>

<span class="c1"># extract feature importances
</span><span class="n">importances</span> <span class="o">=</span> <span class="n">forest</span><span class="p">.</span><span class="n">feature_importances_</span>
<span class="n">std</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">std</span><span class="p">([</span><span class="n">tree</span><span class="p">.</span><span class="n">feature_importances_</span> <span class="k">for</span> <span class="n">tree</span> <span class="ow">in</span> <span class="n">forest</span><span class="p">.</span><span class="n">estimators_</span><span class="p">],</span>
             <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">indices</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argsort</span><span class="p">(</span><span class="n">importances</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed: 51.8min
[Parallel(n_jobs=-1)]: Done  50 out of  50 | elapsed: 58.1min finished
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pd</span><span class="p">.</span><span class="n">options</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">max_rows</span> <span class="o">=</span> <span class="mi">999</span>
<span class="n">feature_importance</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">feature</span><span class="sh">'</span><span class="p">:</span><span class="n">X_train</span><span class="p">.</span><span class="n">columns</span><span class="p">,</span><span class="sh">'</span><span class="s">score_mean</span><span class="sh">'</span><span class="p">:</span><span class="n">importances</span><span class="p">,</span><span class="sh">'</span><span class="s">score_std</span><span class="sh">'</span><span class="p">:</span><span class="n">std</span><span class="p">})</span>
<span class="n">feature_importance</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">(</span><span class="sh">'</span><span class="s">score_mean</span><span class="sh">'</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>feature</th>
      <th>score_mean</th>
      <th>score_std</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>27</td>
      <td>item_cnt_day_lag_1</td>
      <td>0.305195</td>
      <td>0.042668</td>
    </tr>
    <tr>
      <td>34</td>
      <td>item_id</td>
      <td>0.125091</td>
      <td>0.003394</td>
    </tr>
    <tr>
      <td>60</td>
      <td>shop_id</td>
      <td>0.039580</td>
      <td>0.002824</td>
    </tr>
    <tr>
      <td>37</td>
      <td>item_sold_lag_1</td>
      <td>0.038010</td>
      <td>0.021622</td>
    </tr>
    <tr>
      <td>16</td>
      <td>city_id</td>
      <td>0.027129</td>
      <td>0.001806</td>
    </tr>
    <tr>
      <td>58</td>
      <td>month</td>
      <td>0.025071</td>
      <td>0.002134</td>
    </tr>
    <tr>
      <td>29</td>
      <td>item_cnt_day_lag_2</td>
      <td>0.024382</td>
      <td>0.027393</td>
    </tr>
    <tr>
      <td>13</td>
      <td>avg_subtype_store_lag_1</td>
      <td>0.021515</td>
      <td>0.006218</td>
    </tr>
    <tr>
      <td>69</td>
      <td>subtype_id</td>
      <td>0.021043</td>
      <td>0.004745</td>
    </tr>
    <tr>
      <td>26</td>
      <td>item_category_id</td>
      <td>0.018220</td>
      <td>0.004668</td>
    </tr>
    <tr>
      <td>25</td>
      <td>date_block_num</td>
      <td>0.017076</td>
      <td>0.001475</td>
    </tr>
    <tr>
      <td>15</td>
      <td>avg_type_store_lag_1</td>
      <td>0.016783</td>
      <td>0.000826</td>
    </tr>
    <tr>
      <td>1</td>
      <td>avg_cat_store_count_lag_1</td>
      <td>0.016078</td>
      <td>0.001597</td>
    </tr>
    <tr>
      <td>30</td>
      <td>item_cnt_day_lag_3</td>
      <td>0.015121</td>
      <td>0.008848</td>
    </tr>
    <tr>
      <td>61</td>
      <td>shop_return_lag_1</td>
      <td>0.013561</td>
      <td>0.000370</td>
    </tr>
    <tr>
      <td>18</td>
      <td>cum_if_sales_lag_2</td>
      <td>0.012104</td>
      <td>0.014885</td>
    </tr>
    <tr>
      <td>17</td>
      <td>cum_if_sales_lag_1</td>
      <td>0.011855</td>
      <td>0.017054</td>
    </tr>
    <tr>
      <td>62</td>
      <td>streak_lag_1</td>
      <td>0.009901</td>
      <td>0.017725</td>
    </tr>
    <tr>
      <td>31</td>
      <td>item_cnt_day_lag_4</td>
      <td>0.009412</td>
      <td>0.008743</td>
    </tr>
    <tr>
      <td>48</td>
      <td>min_item_price_lag_1</td>
      <td>0.008958</td>
      <td>0.000425</td>
    </tr>
    <tr>
      <td>59</td>
      <td>shop_count_lag_1</td>
      <td>0.008888</td>
      <td>0.000927</td>
    </tr>
    <tr>
      <td>21</td>
      <td>cum_sales_lag_1</td>
      <td>0.008629</td>
      <td>0.004356</td>
    </tr>
    <tr>
      <td>14</td>
      <td>avg_type_lag_1</td>
      <td>0.008317</td>
      <td>0.000455</td>
    </tr>
    <tr>
      <td>0</td>
      <td>avg_cat_count_lag_1</td>
      <td>0.008092</td>
      <td>0.000505</td>
    </tr>
    <tr>
      <td>12</td>
      <td>avg_subtype_lag_1</td>
      <td>0.008021</td>
      <td>0.000505</td>
    </tr>
    <tr>
      <td>22</td>
      <td>cum_sales_lag_2</td>
      <td>0.007750</td>
      <td>0.006408</td>
    </tr>
    <tr>
      <td>70</td>
      <td>type_id</td>
      <td>0.007607</td>
      <td>0.001340</td>
    </tr>
    <tr>
      <td>49</td>
      <td>min_item_price_lag_2</td>
      <td>0.006894</td>
      <td>0.000784</td>
    </tr>
    <tr>
      <td>2</td>
      <td>avg_item_price_lag_1</td>
      <td>0.006879</td>
      <td>0.000407</td>
    </tr>
    <tr>
      <td>32</td>
      <td>item_cnt_day_lag_5</td>
      <td>0.006349</td>
      <td>0.001230</td>
    </tr>
    <tr>
      <td>3</td>
      <td>avg_item_price_lag_2</td>
      <td>0.006176</td>
      <td>0.000789</td>
    </tr>
    <tr>
      <td>38</td>
      <td>max_item_price_lag_1</td>
      <td>0.005687</td>
      <td>0.000350</td>
    </tr>
    <tr>
      <td>52</td>
      <td>min_item_shop_price_lag_1</td>
      <td>0.005490</td>
      <td>0.006499</td>
    </tr>
    <tr>
      <td>23</td>
      <td>cum_sales_lag_3</td>
      <td>0.005310</td>
      <td>0.001466</td>
    </tr>
    <tr>
      <td>50</td>
      <td>min_item_price_lag_3</td>
      <td>0.005241</td>
      <td>0.000841</td>
    </tr>
    <tr>
      <td>33</td>
      <td>item_cnt_day_lag_6</td>
      <td>0.005217</td>
      <td>0.000389</td>
    </tr>
    <tr>
      <td>28</td>
      <td>item_cnt_day_lag_12</td>
      <td>0.005185</td>
      <td>0.000260</td>
    </tr>
    <tr>
      <td>39</td>
      <td>max_item_price_lag_2</td>
      <td>0.005158</td>
      <td>0.000609</td>
    </tr>
    <tr>
      <td>35</td>
      <td>item_return_lag_1</td>
      <td>0.005050</td>
      <td>0.000282</td>
    </tr>
    <tr>
      <td>71</td>
      <td>year</td>
      <td>0.004917</td>
      <td>0.000670</td>
    </tr>
    <tr>
      <td>51</td>
      <td>min_item_price_lag_4</td>
      <td>0.004894</td>
      <td>0.000623</td>
    </tr>
    <tr>
      <td>6</td>
      <td>avg_item_shop_price_lag_1</td>
      <td>0.004718</td>
      <td>0.003328</td>
    </tr>
    <tr>
      <td>24</td>
      <td>cum_sales_lag_4</td>
      <td>0.004653</td>
      <td>0.000653</td>
    </tr>
    <tr>
      <td>64</td>
      <td>streak_lag_2</td>
      <td>0.004480</td>
      <td>0.004787</td>
    </tr>
    <tr>
      <td>4</td>
      <td>avg_item_price_lag_3</td>
      <td>0.004368</td>
      <td>0.000997</td>
    </tr>
    <tr>
      <td>19</td>
      <td>cum_if_sales_lag_3</td>
      <td>0.004304</td>
      <td>0.002244</td>
    </tr>
    <tr>
      <td>5</td>
      <td>avg_item_price_lag_4</td>
      <td>0.004222</td>
      <td>0.000603</td>
    </tr>
    <tr>
      <td>40</td>
      <td>max_item_price_lag_3</td>
      <td>0.004156</td>
      <td>0.000745</td>
    </tr>
    <tr>
      <td>41</td>
      <td>max_item_price_lag_4</td>
      <td>0.004048</td>
      <td>0.001032</td>
    </tr>
    <tr>
      <td>42</td>
      <td>max_item_shop_price_lag_1</td>
      <td>0.004008</td>
      <td>0.000292</td>
    </tr>
    <tr>
      <td>63</td>
      <td>streak_lag_12</td>
      <td>0.004008</td>
      <td>0.000249</td>
    </tr>
    <tr>
      <td>20</td>
      <td>cum_if_sales_lag_4</td>
      <td>0.003543</td>
      <td>0.000916</td>
    </tr>
    <tr>
      <td>65</td>
      <td>streak_lag_3</td>
      <td>0.003189</td>
      <td>0.002778</td>
    </tr>
    <tr>
      <td>68</td>
      <td>streak_lag_6</td>
      <td>0.002993</td>
      <td>0.000258</td>
    </tr>
    <tr>
      <td>67</td>
      <td>streak_lag_5</td>
      <td>0.002671</td>
      <td>0.000333</td>
    </tr>
    <tr>
      <td>66</td>
      <td>streak_lag_4</td>
      <td>0.002589</td>
      <td>0.000574</td>
    </tr>
    <tr>
      <td>53</td>
      <td>min_item_shop_price_lag_2</td>
      <td>0.002463</td>
      <td>0.000299</td>
    </tr>
    <tr>
      <td>7</td>
      <td>avg_item_shop_price_lag_2</td>
      <td>0.002361</td>
      <td>0.000242</td>
    </tr>
    <tr>
      <td>43</td>
      <td>max_item_shop_price_lag_2</td>
      <td>0.002280</td>
      <td>0.000286</td>
    </tr>
    <tr>
      <td>54</td>
      <td>min_item_shop_price_lag_3</td>
      <td>0.002064</td>
      <td>0.000261</td>
    </tr>
    <tr>
      <td>57</td>
      <td>min_item_shop_price_lag_6</td>
      <td>0.002018</td>
      <td>0.000140</td>
    </tr>
    <tr>
      <td>56</td>
      <td>min_item_shop_price_lag_5</td>
      <td>0.001937</td>
      <td>0.000142</td>
    </tr>
    <tr>
      <td>8</td>
      <td>avg_item_shop_price_lag_3</td>
      <td>0.001932</td>
      <td>0.000148</td>
    </tr>
    <tr>
      <td>44</td>
      <td>max_item_shop_price_lag_3</td>
      <td>0.001898</td>
      <td>0.000224</td>
    </tr>
    <tr>
      <td>47</td>
      <td>max_item_shop_price_lag_6</td>
      <td>0.001890</td>
      <td>0.000154</td>
    </tr>
    <tr>
      <td>11</td>
      <td>avg_item_shop_price_lag_6</td>
      <td>0.001880</td>
      <td>0.000111</td>
    </tr>
    <tr>
      <td>10</td>
      <td>avg_item_shop_price_lag_5</td>
      <td>0.001860</td>
      <td>0.000095</td>
    </tr>
    <tr>
      <td>55</td>
      <td>min_item_shop_price_lag_4</td>
      <td>0.001816</td>
      <td>0.000130</td>
    </tr>
    <tr>
      <td>46</td>
      <td>max_item_shop_price_lag_5</td>
      <td>0.001812</td>
      <td>0.000124</td>
    </tr>
    <tr>
      <td>9</td>
      <td>avg_item_shop_price_lag_4</td>
      <td>0.001726</td>
      <td>0.000107</td>
    </tr>
    <tr>
      <td>45</td>
      <td>max_item_shop_price_lag_4</td>
      <td>0.001710</td>
      <td>0.000148</td>
    </tr>
    <tr>
      <td>36</td>
      <td>item_shop_return_lag_1</td>
      <td>0.000569</td>
      <td>0.000060</td>
    </tr>
  </tbody>
</table>
</div>

<p><strong>Note</strong>: As shown above, several of our lag (1) features appears to be essential. This is a good sign as it shows that our EDA and feature engineering was done properly.</p>

<p><a id="Section_91"></a></p>
<h3 id="target-distribution">Target Distribution</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span> <span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">kde</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">norm_hist</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Train</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">Y_valid</span><span class="p">,</span> <span class="n">kde</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">norm_hist</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Validation</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">legend</span><span class="p">()</span>
<span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">legend</span><span class="p">();</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_231_0.png" />
</figure>

<p><a id="Section_91"></a></p>
<h3 id="first-level-models">First Level Models</h3>

<h4 id="scaling-and-encoding">Scaling and Encoding</h4>
<p>Because we have encoded features related to the price and average features, it is important to have a common scale when feeding our dataset into models like the Linear Regression. These models are very sensitive to data scale</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="nf">tqdm_notebook</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">columns</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">X_train</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">dtype</span><span class="o">!=</span><span class="sh">'</span><span class="s">int8</span><span class="sh">'</span> <span class="ow">and</span> <span class="n">X_train</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">dtype</span><span class="o">!=</span><span class="sh">'</span><span class="s">int16</span><span class="sh">'</span><span class="p">:</span>
        <span class="n">scaler</span> <span class="o">=</span> <span class="nc">MinMaxScaler</span><span class="p">().</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">[[</span><span class="n">col</span><span class="p">]])</span>
        
        <span class="n">X_train</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">[[</span><span class="n">col</span><span class="p">]])</span>
        <span class="n">X_valid</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X_valid</span><span class="p">[[</span><span class="n">col</span><span class="p">]])</span>
        <span class="n">X_valid_meta</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X_valid_meta</span><span class="p">[[</span><span class="n">col</span><span class="p">]])</span>
        <span class="n">X_test</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="n">scaler</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">[[</span><span class="n">col</span><span class="p">]])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HBox(children=(IntProgress(value=0, max=72), HTML(value='')))
</code></pre></div></div>

<h4 id="simple-model-selection">Simple Model Selection</h4>

<p>In this section, we train several basic models with their default parameters and we compare how they perform on the validation set. The goal is to identify model with potential. The selected models will then be finely tuned.</p>

<p><strong>Note</strong>: Our dataset contains categorical features encoded using index integers. In order to train a linear model on the dataset, we need to remove these categorical features from the sets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># features to be removed when training a linear model
</span><span class="n">categorical_features</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">city_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_category_id</span><span class="sh">'</span><span class="p">,</span>
                        <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">subtype_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">type_id</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># select subset of features for linear models
</span><span class="n">X_train_lin</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">X_train</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">difference</span><span class="p">(</span><span class="n">categorical_features</span><span class="p">)]</span>
<span class="n">X_valid_lin</span> <span class="o">=</span> <span class="n">X_valid</span><span class="p">[</span><span class="n">X_valid</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">difference</span><span class="p">(</span><span class="n">categorical_features</span><span class="p">)]</span>
<span class="n">X_valid_meta_lin</span> <span class="o">=</span> <span class="n">X_valid_meta</span><span class="p">[</span><span class="n">X_valid_meta</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">difference</span><span class="p">(</span><span class="n">categorical_features</span><span class="p">)]</span>
<span class="n">X_test_lin</span> <span class="o">=</span> <span class="n">X_test</span><span class="p">[</span><span class="n">X_test</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">difference</span><span class="p">(</span><span class="n">categorical_features</span><span class="p">)]</span>
</code></pre></div></div>

<p>We now train several simple models using their default parameter to assess their potential.</p>

<p>Our candidates consist of a set of tree-based models and a set of models not able to handle categorical features. We therefore create a test and train set without categorical features.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">models_trees</span> <span class="o">=</span> <span class="p">[</span><span class="nc">ExtraTreesRegressor</span><span class="p">(</span><span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span>
                <span class="nc">RandomForestRegressor</span><span class="p">(</span><span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span>
                <span class="nc">LGBMRegressor</span><span class="p">(</span><span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">),</span>
                <span class="nc">XGBRegressor</span><span class="p">(</span><span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">objective</span><span class="o">=</span><span class="sh">'</span><span class="s">reg:squarederror</span><span class="sh">'</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">2</span><span class="p">)]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">models_lin</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Lasso</span><span class="p">(),</span> <span class="nc">ElasticNet</span><span class="p">(),</span> <span class="nc">BayesianRidge</span><span class="p">(),</span> <span class="nc">LinearRegression</span><span class="p">()]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># results summary
</span><span class="n">summary_cols</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Parameters (Pre)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">train_RMSE</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">val_RMSE</span><span class="sh">'</span><span class="p">]</span>
<span class="n">summary_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">summary_cols</span><span class="p">)</span>

<span class="n">pred_valid_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">train_estimator</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">x_valid</span><span class="p">,</span> <span class="n">y_valid</span><span class="p">,</span> <span class="n">estimators</span><span class="p">,</span> <span class="n">df</span><span class="p">,</span> <span class="n">pred_df</span><span class="p">):</span>
    
    <span class="n">n_rows</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">estimator</span> <span class="ow">in</span> <span class="nf">tqdm_notebook</span><span class="p">(</span><span class="nf">enumerate</span><span class="p">(</span><span class="n">estimators</span><span class="p">)):</span>
        
        <span class="c1"># identify model
</span>        <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="n">n_rows</span><span class="p">,</span> <span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">estimator</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span>
        <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="n">n_rows</span><span class="p">,</span><span class="sh">'</span><span class="s">Parameters (Pre)</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">estimator</span><span class="p">.</span><span class="nf">get_params</span><span class="p">())</span>
        
        <span class="c1"># train model
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Training:</span><span class="sh">"</span><span class="p">,</span> <span class="n">estimator</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">)</span>
        <span class="n">ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        <span class="n">estimator</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">x_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="s">training time: {:.1f}s</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="n">ts</span><span class="p">))</span>
        
        <span class="c1"># compute metrics    
</span>        <span class="n">pred_valid</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">estimator</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">x_valid</span><span class="p">),</span> <span class="mf">0.</span><span class="p">,</span> <span class="mf">20.</span><span class="p">)</span>
        <span class="n">pred_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">estimator</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">x_train</span><span class="p">),</span> <span class="mf">0.</span><span class="p">,</span> <span class="mf">20.</span><span class="p">)</span>
        <span class="n">rmse_val</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">y_valid</span><span class="p">,</span> <span class="n">pred_valid</span><span class="p">))</span>
        <span class="n">rmse_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">pred_train</span><span class="p">))</span>
        
        <span class="c1"># save metrics
</span>        <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="n">n_rows</span><span class="p">,</span> <span class="sh">'</span><span class="s">train_RMSE</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse_train</span>
        <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="o">+</span><span class="n">n_rows</span><span class="p">,</span> <span class="sh">'</span><span class="s">val_RMSE</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">rmse_val</span>
        
        <span class="n">pred_df</span><span class="p">[</span><span class="n">estimator</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_valid</span>
        
        <span class="nf">print</span><span class="p">(</span><span class="n">estimator</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="sh">'</span><span class="s">trained...</span><span class="sh">'</span><span class="p">)</span>
        
        <span class="k">del</span> <span class="n">estimator</span>
        <span class="n">gc</span><span class="p">.</span><span class="nf">collect</span><span class="p">()</span>
            
    <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">([</span><span class="sh">'</span><span class="s">val_RMSE</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">df</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="n">df</span><span class="p">,</span> <span class="n">pred_df</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_df</span><span class="p">,</span> <span class="n">pred_valid_df</span>  <span class="o">=</span> <span class="nf">train_estimator</span><span class="p">(</span><span class="n">X_train_lin</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span>
                                             <span class="n">X_valid_lin</span><span class="p">,</span> <span class="n">Y_valid</span><span class="p">,</span>
                                             <span class="n">models_lin</span><span class="p">,</span> <span class="n">summary_df</span><span class="p">,</span> <span class="n">pred_valid_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HBox(children=(IntProgress(value=1, bar_style='info', max=1), HTML(value='')))


--------------------------------------------------
Training: Lasso
	training time: 6.5s
Lasso trained...
--------------------------------------------------
Training: ElasticNet
	training time: 4.4s
ElasticNet trained...
--------------------------------------------------
Training: BayesianRidge
	training time: 21.7s
BayesianRidge trained...
--------------------------------------------------
Training: LinearRegression
	training time: 7.9s
LinearRegression trained...
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_df</span><span class="p">,</span> <span class="n">pred_valid_df</span>  <span class="o">=</span> <span class="nf">train_estimator</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span>
                             <span class="n">X_valid</span><span class="p">,</span> <span class="n">Y_valid</span><span class="p">,</span>
                             <span class="n">models_trees</span><span class="p">,</span> <span class="n">summary_df</span><span class="p">,</span> <span class="n">pred_valid_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HBox(children=(IntProgress(value=1, bar_style='info', max=1), HTML(value='')))


--------------------------------------------------
Training: ExtraTreesRegressor



[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 4 concurrent workers.


building tree 1 of 10building tree 2 of 10
building tree 3 of 10
building tree 4 of 10

building tree 5 of 10
building tree 6 of 10
building tree 7 of 10
building tree 8 of 10
building tree 9 of 10
building tree 10 of 10


[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed:  9.8min finished


	training time: 591.2s


[Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=4)]: Done  10 out of  10 | elapsed:    1.6s finished
[Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=4)]: Done  10 out of  10 | elapsed:    7.8s finished


ExtraTreesRegressor trained...
--------------------------------------------------
Training: RandomForestRegressor


[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 4 concurrent workers.


building tree 1 of 10building tree 2 of 10
building tree 3 of 10
building tree 4 of 10

building tree 5 of 10
building tree 6 of 10
building tree 7 of 10
building tree 8 of 10
building tree 9 of 10
building tree 10 of 10


[Parallel(n_jobs=-1)]: Done  10 out of  10 | elapsed: 15.5min finished


	training time: 932.4s


[Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=4)]: Done  10 out of  10 | elapsed:    1.7s finished
[Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=4)]: Done  10 out of  10 | elapsed:    7.5s finished


RandomForestRegressor trained...
--------------------------------------------------
Training: LGBMRegressor
	training time: 64.9s
LGBMRegressor trained...
--------------------------------------------------
Training: XGBRegressor

	training time: 3223.7s
XGBRegressor trained...
</code></pre></div></div>

<p>Below are the results of our basic models. As we can see, the Lasso and ElasticNet model contain too much regularization and are not able to make predictions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_df</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Model</th>
      <th>Parameters (Pre)</th>
      <th>train_RMSE</th>
      <th>val_RMSE</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>6</td>
      <td>LGBMRegressor</td>
      <td>{'boosting_type': 'gbdt', 'class_weight': None...</td>
      <td>0.826947</td>
      <td>0.813052</td>
    </tr>
    <tr>
      <td>7</td>
      <td>XGBRegressor</td>
      <td>{'base_score': 0.5, 'booster': 'gbtree', 'cols...</td>
      <td>0.897198</td>
      <td>0.822411</td>
    </tr>
    <tr>
      <td>2</td>
      <td>BayesianRidge</td>
      <td>{'alpha_1': 1e-06, 'alpha_2': 1e-06, 'compute_...</td>
      <td>0.933291</td>
      <td>0.838651</td>
    </tr>
    <tr>
      <td>3</td>
      <td>LinearRegression</td>
      <td>{'copy_X': True, 'fit_intercept': True, 'n_job...</td>
      <td>0.933289</td>
      <td>0.838666</td>
    </tr>
    <tr>
      <td>5</td>
      <td>RandomForestRegressor</td>
      <td>{'bootstrap': True, 'criterion': 'mse', 'max_d...</td>
      <td>0.329639</td>
      <td>0.878088</td>
    </tr>
    <tr>
      <td>4</td>
      <td>ExtraTreesRegressor</td>
      <td>{'bootstrap': False, 'criterion': 'mse', 'max_...</td>
      <td>0</td>
      <td>0.878273</td>
    </tr>
    <tr>
      <td>0</td>
      <td>Lasso</td>
      <td>{'alpha': 1.0, 'copy_X': True, 'fit_intercept'...</td>
      <td>1.21245</td>
      <td>1.07186</td>
    </tr>
    <tr>
      <td>1</td>
      <td>ElasticNet</td>
      <td>{'alpha': 1.0, 'copy_X': True, 'fit_intercept'...</td>
      <td>1.21245</td>
      <td>1.07186</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot results
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">g</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="sh">"</span><span class="s">val_RMSE</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">Model</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">summary_df</span><span class="p">)</span>
<span class="n">g</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Mean Accuracy</span><span class="sh">"</span><span class="p">)</span>
<span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Validation scores</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_249_0.png" />
</figure>

<p>When blending models, we need to combine models that are not “too” correlated. Therefore, we plot the correlations in the predictions of our models.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compute the correlation matrix
</span><span class="n">corr</span> <span class="o">=</span> <span class="n">pred_valid_df</span><span class="p">.</span><span class="nf">corr</span><span class="p">()</span>

<span class="c1"># Generate a mask for the upper triangle
</span><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">bool</span><span class="p">)</span>
<span class="n">mask</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">triu_indices_from</span><span class="p">(</span><span class="n">mask</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">True</span>

<span class="c1"># Generate a custom diverging colormap
</span><span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">220</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">as_cmap</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="k">with</span> <span class="n">sns</span><span class="p">.</span><span class="nf">axes_style</span><span class="p">(</span><span class="sh">"</span><span class="s">white</span><span class="sh">"</span><span class="p">):</span>    
    <span class="c1"># Set up the matplotlib figure
</span>    <span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>
    
    <span class="c1"># Draw the heatmap with the mask and correct aspect ratio
</span>    <span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span><span class="n">vmin</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mf">2.</span><span class="p">,</span><span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">linewidths</span><span class="o">=</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="n">cbar_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">shrink</span><span class="sh">"</span><span class="p">:</span> <span class="p">.</span><span class="mi">4</span><span class="p">})</span>
    
    <span class="n">ax</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">((</span><span class="mi">8</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/output_251_0.png" />
</figure>

<p>As we can see, the Lasso and ElasticNet model only predict 0, this is due to a poor regularization parameter value. We will keep these model and finely tune them</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tune_model</span><span class="p">(</span><span class="n">estimator</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">X_val</span><span class="p">,</span> <span class="n">Y_val</span><span class="p">,</span> <span class="n">grid_params</span><span class="p">):</span>
    <span class="c1"># extract parameters to be tuned and candidate values
</span>    <span class="n">params</span> <span class="o">=</span> <span class="n">grid_params</span><span class="p">.</span><span class="nf">keys</span><span class="p">()</span>
    <span class="n">values</span> <span class="o">=</span> <span class="n">grid_params</span><span class="p">.</span><span class="nf">values</span><span class="p">()</span>
    
    <span class="c1"># create all combinations
</span>    <span class="n">combinations</span> <span class="o">=</span> <span class="nf">product</span><span class="p">(</span><span class="o">*</span><span class="n">values</span><span class="p">)</span>
    
    <span class="c1"># store results
</span>    <span class="n">scores</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">return_obj</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">parameters</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="c1"># iterate 
</span>    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">combo</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">combinations</span><span class="p">):</span>
        <span class="c1"># format header for readability
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span>
        
        <span class="n">ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        
        <span class="c1"># recreate input params
</span>        <span class="n">current_param</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">combo</span><span class="p">))</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">current_param</span><span class="p">)</span>
        <span class="n">parameters</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">current_param</span><span class="p">)</span>
        
        <span class="c1"># train model
</span>        <span class="n">model</span> <span class="o">=</span> <span class="nf">estimator</span><span class="p">(</span><span class="o">**</span><span class="n">current_param</span><span class="p">)</span>
        <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="s">training done: {:.2f}s</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="n">ts</span><span class="p">))</span>
        
        <span class="c1"># make predictions
</span>        <span class="n">pred_validaiton</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_val</span><span class="p">)</span>
        
        <span class="c1"># compute metrics
</span>        <span class="n">mse</span> <span class="o">=</span> <span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">Y_val</span><span class="p">,</span> <span class="n">pred_validaiton</span><span class="p">)</span>
        <span class="n">rmse</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">mse</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">RMSE SCORE: {:.5f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">rmse</span><span class="p">))</span>
        
        <span class="c1"># save scores
</span>        <span class="n">scores</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">rmse</span><span class="p">)</span>
        
        <span class="c1"># checkpoint
</span>        <span class="n">best_score</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Best score: {:.5f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">best_score</span><span class="p">))</span>
        <span class="n">best_model</span> <span class="o">=</span> <span class="n">parameters</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">argmin</span><span class="p">(</span><span class="n">scores</span><span class="p">)]</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Best model: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">best_model</span><span class="p">))</span>
        
        <span class="k">del</span> <span class="n">best_score</span>
        <span class="k">del</span> <span class="n">best_model</span>
        <span class="k">del</span> <span class="n">pred_validaiton</span>
        <span class="k">del</span> <span class="n">model</span>
        <span class="n">gc</span><span class="p">.</span><span class="n">collect</span>
        
    <span class="c1"># scores and models
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">SUMMARY</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">scores</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
    <span class="n">best_score</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
    <span class="n">best_model</span> <span class="o">=</span> <span class="n">parameters</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">argmin</span><span class="p">(</span><span class="n">scores</span><span class="p">)]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Best score: {:.5f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">best_score</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Best model: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">best_model</span><span class="p">))</span>

    <span class="n">return_obj</span><span class="p">[</span><span class="sh">'</span><span class="s">scores</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">scores</span>
    <span class="n">return_obj</span><span class="p">[</span><span class="sh">'</span><span class="s">best_score</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_score</span>
    <span class="n">return_obj</span><span class="p">[</span><span class="sh">'</span><span class="s">best_model_params</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_model</span>
    
    <span class="k">return</span> <span class="n">return_obj</span>
</code></pre></div></div>

<h4 id="ridge-regression">Ridge Regression</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alphas</span> <span class="o">=</span> <span class="p">[</span><span class="mi">265</span><span class="p">,</span> <span class="mi">270</span><span class="p">,</span> <span class="mi">275</span><span class="p">]</span>
<span class="n">grid_params</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">alpha</span><span class="sh">'</span><span class="p">:</span><span class="n">alphas</span><span class="p">}</span>
<span class="n">val_res</span> <span class="o">=</span> <span class="nf">tune_model</span><span class="p">(</span><span class="n">Ridge</span><span class="p">,</span> <span class="n">X_train_lin</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> 
                   <span class="n">X_valid_lin</span><span class="p">,</span> <span class="n">Y_valid</span><span class="p">,</span> <span class="n">grid_params</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--------------------------------------------------
MODEL 0
{'alpha': 265}
	training done: 10.59s
RMSE SCORE: 0.83796
Best score: 0.83796
Best model: {'alpha': 265}
--------------------------------------------------
MODEL 1
{'alpha': 270}
	training done: 3.67s
RMSE SCORE: 0.83796
Best score: 0.83796
Best model: {'alpha': 270}
--------------------------------------------------
MODEL 2
{'alpha': 275}
	training done: 2.75s
RMSE SCORE: 0.83796
Best score: 0.83796
Best model: {'alpha': 270}
--------------------------------------------------
SUMMARY
Best score: 0.83796
Best model: {'alpha': 270}
</code></pre></div></div>

<h4 id="lasso">Lasso</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">alphas</span> <span class="o">=</span> <span class="mi">10</span><span class="o">**</span><span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="o">-</span><span class="mf">4.2</span><span class="p">,</span> <span class="o">-</span><span class="mf">3.6</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="n">grid_params</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">alpha</span><span class="sh">'</span><span class="p">:</span><span class="n">alphas</span><span class="p">}</span>
<span class="n">val_res</span> <span class="o">=</span> <span class="nf">tune_model</span><span class="p">(</span><span class="n">Lasso</span><span class="p">,</span> <span class="n">X_train_lin</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> 
                   <span class="n">X_valid_lin</span><span class="p">,</span> <span class="n">Y_valid</span><span class="p">,</span> <span class="n">grid_params</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--------------------------------------------------
MODEL 0
{'alpha': 6.309573444801929e-05}
	training done: 158.73s
RMSE SCORE: 0.83807
Best score: 0.83807
Best model: {'alpha': 6.309573444801929e-05}
--------------------------------------------------
MODEL 1
{'alpha': 8.912509381337459e-05}
	training done: 129.75s
RMSE SCORE: 0.83810
Best score: 0.83807
Best model: {'alpha': 6.309573444801929e-05}
--------------------------------------------------
MODEL 2
{'alpha': 0.0001258925411794166}
	training done: 49.31s
RMSE SCORE: 0.83808
Best score: 0.83807
Best model: {'alpha': 6.309573444801929e-05}
--------------------------------------------------
MODEL 3
{'alpha': 0.00017782794100389227}
	training done: 52.77s
RMSE SCORE: 0.83824
Best score: 0.83807
Best model: {'alpha': 6.309573444801929e-05}
--------------------------------------------------
MODEL 4
{'alpha': 0.00025118864315095795}
	training done: 52.73s
RMSE SCORE: 0.83879
Best score: 0.83807
Best model: {'alpha': 6.309573444801929e-05}
--------------------------------------------------
SUMMARY
Best score: 0.83807
Best model: {'alpha': 6.309573444801929e-05}
</code></pre></div></div>

<h4 id="bayesian-ridge">Bayesian Ridge</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">br_alpha_1</span> <span class="o">=</span> <span class="mi">10</span><span class="o">**</span><span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span><span class="o">+</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="n">br_alpha_2</span> <span class="o">=</span> <span class="mi">10</span><span class="o">**</span><span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="o">-</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="n">br_lambda_1</span> <span class="o">=</span> <span class="mi">10</span><span class="o">**</span><span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span><span class="o">+</span><span class="mi">6</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="n">br_lambda_2</span> <span class="o">=</span> <span class="mi">10</span><span class="o">**</span><span class="n">np</span><span class="p">.</span><span class="nf">linspace</span><span class="p">(</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>

<span class="n">grid_params</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">alpha_1</span><span class="sh">'</span><span class="p">:</span> <span class="n">br_alpha_1</span><span class="p">,</span> <span class="sh">'</span><span class="s">alpha_2</span><span class="sh">'</span><span class="p">:</span> <span class="n">br_alpha_2</span><span class="p">,</span>
               <span class="sh">'</span><span class="s">lambda_1</span><span class="sh">'</span><span class="p">:</span> <span class="n">br_lambda_1</span><span class="p">,</span> <span class="sh">'</span><span class="s">lambda_2</span><span class="sh">'</span><span class="p">:</span> <span class="n">br_lambda_2</span><span class="p">}</span>
<span class="n">val_res</span> <span class="o">=</span> <span class="nf">tune_model</span><span class="p">(</span><span class="n">BayesianRidge</span><span class="p">,</span> <span class="n">X_train_lin</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span>
                    <span class="n">X_valid_lin</span><span class="p">,</span> <span class="n">Y_valid</span><span class="p">,</span> <span class="n">grid_params</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--------------------------------------------------
MODEL 0
{'alpha_1': 10000.0, 'alpha_2': 1e-08, 'lambda_1': 10000.0, 'lambda_2': 10.0}
	training done: 29.31s
RMSE SCORE: 0.83807
Best score: 0.83807
Best model: {'alpha_1': 10000.0, 'alpha_2': 1e-08, 'lambda_1': 10000.0, 'lambda_2': 10.0}
--------------------------------------------------
MODEL 1
{'alpha_1': 10000.0, 'alpha_2': 1e-08, 'lambda_1': 10000.0, 'lambda_2': 31.622776601683793}
	training done: 16.63s
RMSE SCORE: 0.83815
Best score: 0.83807
Best model: {'alpha_1': 10000.0, 'alpha_2': 1e-08, 'lambda_1': 10000.0, 'lambda_2': 10.0}
--------------------------------------------------
MODEL 2
{'alpha_1': 10000.0, 'alpha_2': 1e-08, 'lambda_1': 10000.0, 'lambda_2': 100.0}
	training done: 16.15s
RMSE SCORE: 0.83832
Best score: 0.83807
Best model: {'alpha_1': 10000.0, 'alpha_2': 1e-08, 'lambda_1': 10000.0, 'lambda_2': 10.0}
--------------------------------------------------
MODEL 3
{'alpha_1': 10000.0, 'alpha_2': 1e-08, 'lambda_1': 10000.0, 'lambda_2': 316.22776601683796}
	training done: 16.43s
RMSE SCORE: 0.83852
Best score: 0.83807
Best model: {'alpha_1': 10000.0, 'alpha_2': 1e-08, 'lambda_1': 10000.0, 'lambda_2': 10.0}
...
--------------------------------------------------
MODEL 624
{'alpha_1': 1000000.0, 'alpha_2': 1e-06, 'lambda_1': 1000000.0, 'lambda_2': 1000.0}
	training done: 15.20s
RMSE SCORE: 0.83822
Best score: 0.83796
Best model: {'alpha_1': 10000.0, 'alpha_2': 1e-07, 'lambda_1': 316227.7660168379, 'lambda_2': 1000.0}
--------------------------------------------------
SUMMARY
Best score: 0.83796
Best model: {'alpha_1': 10000.0, 'alpha_2': 1e-07, 'lambda_1': 316227.7660168379, 'lambda_2': 1000.0}
</code></pre></div></div>

<h4 id="random-forest">Random Forest</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">grid_params</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">max_depth</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="bp">None</span><span class="p">],</span>
             <span class="sh">'</span><span class="s">max_features</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">sqrt</span><span class="sh">'</span><span class="p">],</span>
             <span class="sh">'</span><span class="s">min_samples_split</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">],</span>
             <span class="sh">'</span><span class="s">n_estimators</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">],</span>
             <span class="sh">'</span><span class="s">n_jobs</span><span class="sh">'</span><span class="p">:[</span><span class="o">-</span><span class="mi">1</span><span class="p">]}</span>

<span class="n">val_res</span> <span class="o">=</span> <span class="nf">tune_model</span><span class="p">(</span><span class="n">RandomForestRegressor</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span>
                    <span class="n">X_valid</span><span class="p">,</span> <span class="n">Y_valid</span><span class="p">,</span> <span class="n">grid_params</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--------------------------------------------------
MODEL 0
{'max_depth': 10, 'max_features': 'auto', 'min_samples_split': 5, 'n_estimators': 10, 'n_jobs': -1}
	training done: 546.59s
RMSE SCORE: 0.82886
Best score: 0.82886
Best model: {'max_depth': 10, 'max_features': 'auto', 'min_samples_split': 5, 'n_estimators': 10, 'n_jobs': -1}
--------------------------------------------------
MODEL 1
{'max_depth': 10, 'max_features': 'auto', 'min_samples_split': 5, 'n_estimators': 50, 'n_jobs': -1}
	training done: 2117.12s
RMSE SCORE: 0.82208
Best score: 0.82208
Best model: {'max_depth': 10, 'max_features': 'auto', 'min_samples_split': 5, 'n_estimators': 50, 'n_jobs': -1}
--------------------------------------------------
MODEL 2
{'max_depth': 10, 'max_features': 'auto', 'min_samples_split': 5, 'n_estimators': 100, 'n_jobs': -1}
	training done: 4011.42s
RMSE SCORE: 0.82328
Best score: 0.82208
Best model: {'max_depth': 10, 'max_features': 'auto', 'min_samples_split': 5, 'n_estimators': 50, 'n_jobs': -1}
...
--------------------------------------------------
MODEL 47
{'max_depth': None, 'max_features': 'sqrt', 'min_samples_split': 10, 'n_estimators': 100, 'n_jobs': -1}
	training done: 1189.53s
RMSE SCORE: 0.82544
Best score: 0.80872
Best model: {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_split': 10, 'n_estimators': 100, 'n_jobs': -1}
--------------------------------------------------
SUMMARY
Best score: 0.80872
Best model: {'max_depth': 20, 'max_features': 'sqrt', 'min_samples_split': 10, 'n_estimators': 100, 'n_jobs': -1}
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">grid_params</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">max_depth</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">],</span>
             <span class="sh">'</span><span class="s">max_features</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="sh">'</span><span class="s">auto</span><span class="sh">'</span><span class="p">],</span>
             <span class="sh">'</span><span class="s">min_samples_split</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">],</span>
             <span class="sh">'</span><span class="s">n_estimators</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">500</span><span class="p">],</span>
             <span class="sh">'</span><span class="s">n_jobs</span><span class="sh">'</span><span class="p">:[</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
             <span class="sh">'</span><span class="s">verbose</span><span class="sh">'</span><span class="p">:[</span><span class="mi">1</span><span class="p">]}</span>

<span class="n">val_res</span> <span class="o">=</span> <span class="nf">tune_model</span><span class="p">(</span><span class="n">RandomForestRegressor</span><span class="p">,</span> <span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span>
                    <span class="n">X_valid</span><span class="p">,</span> <span class="n">Y_valid</span><span class="p">,</span> <span class="n">grid_params</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--------------------------------------------------
MODEL 0
{'max_depth': 10, 'max_features': 'auto', 'min_samples_split': 5, 'n_estimators': 500, 'n_jobs': -1, 'verbose': 1}


[Parallel(n_jobs=-1)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=-1)]: Done  42 tasks      | elapsed: 30.1min
[Parallel(n_jobs=-1)]: Done 192 tasks      | elapsed: 113.6min
[Parallel(n_jobs=-1)]: Done 442 tasks      | elapsed: 255.3min
[Parallel(n_jobs=-1)]: Done 500 out of 500 | elapsed: 287.2min finished


	training done: 17241.45s


[Parallel(n_jobs=4)]: Using backend ThreadingBackend with 4 concurrent workers.
[Parallel(n_jobs=4)]: Done  42 tasks      | elapsed:    0.9s
[Parallel(n_jobs=4)]: Done 192 tasks      | elapsed:    4.9s
[Parallel(n_jobs=4)]: Done 442 tasks      | elapsed:   10.2s


RMSE SCORE: 0.82104
Best score: 0.82104
Best model: {'max_depth': 10, 'max_features': 'auto', 'min_samples_split': 5, 'n_estimators': 500, 'n_jobs': -1, 'verbose': 1}
--------------------------------------------------
SUMMARY
Best score: 0.82104
Best model: {'max_depth': 10, 'max_features': 'auto', 'min_samples_split': 5, 'n_estimators': 500, 'n_jobs': -1, 'verbose': 1}


[Parallel(n_jobs=4)]: Done 500 out of 500 | elapsed:   11.4s finished
</code></pre></div></div>

<h4 id="lightgbm">LightGBM</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">tune_model_lgb</span><span class="p">(</span><span class="n">lgb_train_</span><span class="p">,</span> <span class="n">lgb_valid_</span><span class="p">,</span> <span class="n">grid_params</span><span class="p">):</span>
    <span class="c1"># extract parameters to be tuned and candidate values
</span>    <span class="n">params</span> <span class="o">=</span> <span class="n">grid_params</span><span class="p">.</span><span class="nf">keys</span><span class="p">()</span>
    <span class="n">values</span> <span class="o">=</span> <span class="n">grid_params</span><span class="p">.</span><span class="nf">values</span><span class="p">()</span>
    
    <span class="c1"># create all combinations
</span>    <span class="n">combinations</span> <span class="o">=</span> <span class="nf">product</span><span class="p">(</span><span class="o">*</span><span class="n">values</span><span class="p">)</span>
    
    <span class="c1"># store results
</span>    <span class="n">scores</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">return_obj</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="n">parameters</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="c1"># iterate 
</span>    <span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">combo</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">combinations</span><span class="p">):</span>
        <span class="c1"># format header for readability
</span>        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">MODEL {0}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">idx</span><span class="p">))</span>
        
        <span class="n">ts</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span>
        
        <span class="c1"># recreate input params
</span>        <span class="n">current_param</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">combo</span><span class="p">))</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">current_param</span><span class="p">)</span>
        <span class="n">parameters</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">current_param</span><span class="p">)</span>
        
        <span class="c1"># train model
</span>        <span class="n">gbm</span> <span class="o">=</span> <span class="n">lgb</span><span class="p">.</span><span class="nf">train</span><span class="p">(</span><span class="n">current_param</span><span class="p">,</span>
                <span class="n">lgb_train</span><span class="p">,</span>
                <span class="n">num_boost_round</span><span class="o">=</span><span class="mi">300</span><span class="p">,</span>
                <span class="n">valid_sets</span><span class="o">=</span><span class="n">lgb_valid</span><span class="p">,</span>
                <span class="n">early_stopping_rounds</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
        
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="s">training done: {:.2f}s</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="nf">time</span><span class="p">()</span><span class="o">-</span><span class="n">ts</span><span class="p">))</span>
        
        <span class="c1"># make predictions
</span>        <span class="n">y_pred</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">gbm</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_valid</span><span class="p">,</span> <span class="n">num_iteration</span><span class="o">=</span><span class="n">gbm</span><span class="p">.</span><span class="n">best_iteration</span><span class="p">),</span><span class="mf">0.</span><span class="p">,</span><span class="mf">20.</span><span class="p">)</span>
        
        <span class="c1"># compute metrics
</span>        <span class="n">mse</span> <span class="o">=</span> <span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">Y_valid</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">)</span>
        <span class="n">rmse</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="n">mse</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">RMSE SCORE: {:.5f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">rmse</span><span class="p">))</span>
        
        <span class="c1"># save scores
</span>        <span class="n">scores</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">rmse</span><span class="p">)</span>
        
        <span class="c1"># checkpoint
</span>        <span class="n">best_score</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Best score: {:.5f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">best_score</span><span class="p">))</span>
        <span class="n">best_model</span> <span class="o">=</span> <span class="n">parameters</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">argmin</span><span class="p">(</span><span class="n">scores</span><span class="p">)]</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Best model: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">best_model</span><span class="p">))</span>
        
        <span class="k">del</span> <span class="n">best_score</span>
        <span class="k">del</span> <span class="n">best_model</span>
        <span class="k">del</span> <span class="n">y_pred</span>
        <span class="k">del</span> <span class="n">gbm</span>
        <span class="n">gc</span><span class="p">.</span><span class="n">collect</span>
        
    <span class="c1"># scores and models
</span>    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="o">*</span><span class="mi">50</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">SUMMARY</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">scores</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
    <span class="n">best_score</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
    <span class="n">best_model</span> <span class="o">=</span> <span class="n">parameters</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">argmin</span><span class="p">(</span><span class="n">scores</span><span class="p">)]</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Best score: {:.5f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">best_score</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Best model: {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">best_model</span><span class="p">))</span>

    <span class="n">return_obj</span><span class="p">[</span><span class="sh">'</span><span class="s">scores</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">scores</span>
    <span class="n">return_obj</span><span class="p">[</span><span class="sh">'</span><span class="s">best_score</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_score</span>
    <span class="n">return_obj</span><span class="p">[</span><span class="sh">'</span><span class="s">best_model_params</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_model</span>
    
    <span class="k">return</span> <span class="n">return_obj</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># isolate categorical features
</span><span class="n">indexes_of_categories</span> <span class="o">=</span> <span class="p">[</span><span class="n">X_train</span><span class="p">.</span><span class="n">columns</span><span class="p">.</span><span class="nf">get_loc</span><span class="p">(</span><span class="n">col</span><span class="p">)</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">categorical_features</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create lbg training and validation set
</span><span class="n">lgb_train</span> <span class="o">=</span> <span class="n">lgb</span><span class="p">.</span><span class="nc">Dataset</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">X_train</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">Y_train</span><span class="p">,</span> <span class="n">categorical_feature</span><span class="o">=</span><span class="n">indexes_of_categories</span><span class="p">,</span> <span class="n">free_raw_data</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">lgb_valid</span> <span class="o">=</span> <span class="n">lgb</span><span class="p">.</span><span class="nc">Dataset</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">X_valid</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">Y_valid</span><span class="p">,</span> <span class="n">categorical_feature</span><span class="o">=</span><span class="n">indexes_of_categories</span><span class="p">,</span> <span class="n">free_raw_data</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="n">params_gs</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">'</span><span class="s">num_leaves</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">17</span><span class="p">,</span><span class="mi">31</span><span class="p">,</span><span class="mi">51</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">min_data_in_leaf</span><span class="sh">'</span><span class="p">:[</span><span class="mi">10</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">30</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">max_depth</span><span class="sh">'</span><span class="p">:[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">10</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">learning_rate</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.05</span><span class="p">,</span><span class="mf">0.1</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">feature_fraction</span><span class="sh">'</span><span class="p">:[</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.6</span><span class="p">,</span> <span class="mf">0.7</span><span class="p">,</span><span class="mf">0.8</span><span class="p">,</span><span class="mf">0.9</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">bagging_fraction</span><span class="sh">'</span><span class="p">:[</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.7</span><span class="p">,</span><span class="mf">0.8</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">max_bin</span><span class="sh">'</span><span class="p">:[</span><span class="mi">255</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">boosting_type</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="sh">'</span><span class="s">gbdt</span><span class="sh">'</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">objective</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="sh">'</span><span class="s">regression</span><span class="sh">'</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">metric</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="sh">'</span><span class="s">l2</span><span class="sh">'</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">bagging_freq</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">],</span>
    <span class="sh">'</span><span class="s">verbose</span><span class="sh">'</span><span class="p">:</span> <span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="p">}</span>

<span class="n">light_gbm</span> <span class="o">=</span> <span class="nf">tune_model_lgb</span><span class="p">(</span><span class="n">lgb_train</span><span class="p">,</span> <span class="n">lgb_valid</span><span class="p">,</span> <span class="n">params_gs</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--------------------------------------------------
MODEL 0
{'num_leaves': 17, 'min_data_in_leaf': 10, 'max_depth': -1, 'learning_rate': 0.05, 'feature_fraction': 0.5, 'bagging_fraction': 0.5, 'max_bin': 255, 'boosting_type': 'gbdt', 'objective': 'regression', 'metric': 'l2', 'bagging_freq': 5, 'verbose': -1}



[1]	valid_0's l2: 1.10527
Training until validation scores don't improve for 5 rounds
[2]	valid_0's l2: 1.07531
[3]	valid_0's l2: 1.05201
[4]	valid_0's l2: 1.02279
[5]	valid_0's l2: 0.998551
[6]	valid_0's l2: 0.974025
[7]	valid_0's l2: 0.952692
[8]	valid_0's l2: 0.932333
[9]	valid_0's l2: 0.91344
[10]	valid_0's l2: 0.895566
[11]	valid_0's l2: 0.876383
[12]	valid_0's l2: 0.862929
[13]	valid_0's l2: 0.850901
[14]	valid_0's l2: 0.838443
[15]	valid_0's l2: 0.823629
[16]	valid_0's l2: 0.815305
[17]	valid_0's l2: 0.803962
[18]	valid_0's l2: 0.798741
[19]	valid_0's l2: 0.791434
[20]	valid_0's l2: 0.783215
[21]	valid_0's l2: 0.776634
[22]	valid_0's l2: 0.768956
[23]	valid_0's l2: 0.764029
[24]	valid_0's l2: 0.757802
[25]	valid_0's l2: 0.754147
[26]	valid_0's l2: 0.749015
[27]	valid_0's l2: 0.743662
[28]	valid_0's l2: 0.738082
[29]	valid_0's l2: 0.735406
[30]	valid_0's l2: 0.731135
[31]	valid_0's l2: 0.72884
[32]	valid_0's l2: 0.727529
[33]	valid_0's l2: 0.724651
[34]	valid_0's l2: 0.72392
[35]	valid_0's l2: 0.720609
[36]	valid_0's l2: 0.720633
[37]	valid_0's l2: 0.719136
[38]	valid_0's l2: 0.716923
[39]	valid_0's l2: 0.714208
[40]	valid_0's l2: 0.712108
[41]	valid_0's l2: 0.710699
[42]	valid_0's l2: 0.710426
[43]	valid_0's l2: 0.709536
[44]	valid_0's l2: 0.710491
[45]	valid_0's l2: 0.707844
[46]	valid_0's l2: 0.706848
[47]	valid_0's l2: 0.705889
[48]	valid_0's l2: 0.703528
[49]	valid_0's l2: 0.701249
[50]	valid_0's l2: 0.701599
[51]	valid_0's l2: 0.700817
[52]	valid_0's l2: 0.700734
[53]	valid_0's l2: 0.699862
[54]	valid_0's l2: 0.699969
[55]	valid_0's l2: 0.699991
[56]	valid_0's l2: 0.699688
[57]	valid_0's l2: 0.699316
[58]	valid_0's l2: 0.697707
[59]	valid_0's l2: 0.697867
[60]	valid_0's l2: 0.697003
[61]	valid_0's l2: 0.695797
[62]	valid_0's l2: 0.694803
[63]	valid_0's l2: 0.694291
[64]	valid_0's l2: 0.693099
[65]	valid_0's l2: 0.692775
[66]	valid_0's l2: 0.693045
[67]	valid_0's l2: 0.691834
[68]	valid_0's l2: 0.692186
[69]	valid_0's l2: 0.692687
[70]	valid_0's l2: 0.692229
[71]	valid_0's l2: 0.692593
[72]	valid_0's l2: 0.692336
Early stopping, best iteration is:
[67]	valid_0's l2: 0.691834
	training done: 40.75s
RMSE SCORE: 0.83516
Best score: 0.83516
Best model: {'num_leaves': 17, 'min_data_in_leaf': 10, 'max_depth': -1, 'learning_rate': 0.05, 'feature_fraction': 0.5, 'bagging_fraction': 0.5, 'max_bin': 255, 'boosting_type': 'gbdt', 'objective': 'regression', 'metric': 'l2', 'bagging_freq': 5, 'verbose': -1}
--------------------------------------------------
MODEL 1
{'num_leaves': 17, 'min_data_in_leaf': 10, 'max_depth': -1, 'learning_rate': 0.05, 'feature_fraction': 0.5, 'bagging_fraction': 0.5, 'max_bin': 255, 'boosting_type': 'gbdt', 'objective': 'regression', 'metric': 'l2', 'bagging_freq': 6, 'verbose': -1}



[1]	valid_0's l2: 1.10527
Training until validation scores don't improve for 5 rounds
[2]	valid_0's l2: 1.07531
[3]	valid_0's l2: 1.05201
[4]	valid_0's l2: 1.02279
[5]	valid_0's l2: 0.998551
[6]	valid_0's l2: 0.97405
[7]	valid_0's l2: 0.95349
[8]	valid_0's l2: 0.932658
[9]	valid_0's l2: 0.914223
[10]	valid_0's l2: 0.897632
[11]	valid_0's l2: 0.877349
[12]	valid_0's l2: 0.863744
[13]	valid_0's l2: 0.851036
[14]	valid_0's l2: 0.838301
[15]	valid_0's l2: 0.823764
[16]	valid_0's l2: 0.816064
[17]	valid_0's l2: 0.805195
[18]	valid_0's l2: 0.79905
[19]	valid_0's l2: 0.791872
[20]	valid_0's l2: 0.783252
[21]	valid_0's l2: 0.777125
[22]	valid_0's l2: 0.76982
[23]	valid_0's l2: 0.765262
[24]	valid_0's l2: 0.759256
[25]	valid_0's l2: 0.75549
[26]	valid_0's l2: 0.750393
[27]	valid_0's l2: 0.744901
[28]	valid_0's l2: 0.739169
[29]	valid_0's l2: 0.736655
[30]	valid_0's l2: 0.732419
[31]	valid_0's l2: 0.730543
[32]	valid_0's l2: 0.72918
[33]	valid_0's l2: 0.725655
[34]	valid_0's l2: 0.725163
[35]	valid_0's l2: 0.721856
[36]	valid_0's l2: 0.721893
[37]	valid_0's l2: 0.720522
[38]	valid_0's l2: 0.717873
[39]	valid_0's l2: 0.714776
[40]	valid_0's l2: 0.712635
[41]	valid_0's l2: 0.710812
[42]	valid_0's l2: 0.710365
[43]	valid_0's l2: 0.70942
[44]	valid_0's l2: 0.709538
[45]	valid_0's l2: 0.707223
[46]	valid_0's l2: 0.705169
[47]	valid_0's l2: 0.703678
[48]	valid_0's l2: 0.701343
[49]	valid_0's l2: 0.700215
[50]	valid_0's l2: 0.700314
[51]	valid_0's l2: 0.699423
[52]	valid_0's l2: 0.699303
[53]	valid_0's l2: 0.697868
[54]	valid_0's l2: 0.697933
[55]	valid_0's l2: 0.697991
[56]	valid_0's l2: 0.698016
[57]	valid_0's l2: 0.697487
[58]	valid_0's l2: 0.696206
[59]	valid_0's l2: 0.69619
[60]	valid_0's l2: 0.695404
[61]	valid_0's l2: 0.694171
[62]	valid_0's l2: 0.693438
[63]	valid_0's l2: 0.693584
[64]	valid_0's l2: 0.692399
[65]	valid_0's l2: 0.691994
[66]	valid_0's l2: 0.692421
[67]	valid_0's l2: 0.691399
[68]	valid_0's l2: 0.691757
[69]	valid_0's l2: 0.692146
[70]	valid_0's l2: 0.691961
[71]	valid_0's l2: 0.69215
[72]	valid_0's l2: 0.692097
Early stopping, best iteration is:
[67]	valid_0's l2: 0.691399
	training done: 21.72s
RMSE SCORE: 0.83113
Best score: 0.83113
Best model: {'num_leaves': 17, 'min_data_in_leaf': 10, 'max_depth': -1, 'learning_rate': 0.05, 'feature_fraction': 0.5, 'bagging_fraction': 0.5, 'max_bin': 255, 'boosting_type': 'gbdt', 'objective': 'regression', 'metric': 'l2', 'bagging_freq': 6, 'verbose': -1}
 
--------------------------------------------------
MODEL 1619
{'num_leaves': 51, 'min_data_in_leaf': 30, 'max_depth': 10, 'learning_rate': 0.1, 'feature_fraction': 0.9, 'bagging_fraction': 0.8, 'max_bin': 255, 'boosting_type': 'gbdt', 'objective': 'regression', 'metric': 'l2', 'bagging_freq': 7, 'verbose': -1}


[1]	valid_0's l2: 1.07129
Training until validation scores don't improve for 5 rounds
[2]	valid_0's l2: 1.00838
[3]	valid_0's l2: 0.962023
[4]	valid_0's l2: 0.919852
[5]	valid_0's l2: 0.887095
[6]	valid_0's l2: 0.851199
[7]	valid_0's l2: 0.831776
[8]	valid_0's l2: 0.814751
[9]	valid_0's l2: 0.800856
[10]	valid_0's l2: 0.789847
[11]	valid_0's l2: 0.780962
[12]	valid_0's l2: 0.774846
[13]	valid_0's l2: 0.769069
[14]	valid_0's l2: 0.764315
[15]	valid_0's l2: 0.753459
[16]	valid_0's l2: 0.749205
[17]	valid_0's l2: 0.747357
[18]	valid_0's l2: 0.744728
[19]	valid_0's l2: 0.744139
[20]	valid_0's l2: 0.744054
[21]	valid_0's l2: 0.742659
[22]	valid_0's l2: 0.743116
[23]	valid_0's l2: 0.743458
[24]	valid_0's l2: 0.73827
[25]	valid_0's l2: 0.738553
[26]	valid_0's l2: 0.733934
[27]	valid_0's l2: 0.734115
[28]	valid_0's l2: 0.734221
[29]	valid_0's l2: 0.734035
[30]	valid_0's l2: 0.733784
[31]	valid_0's l2: 0.734618
[32]	valid_0's l2: 0.7356
[33]	valid_0's l2: 0.733096
[34]	valid_0's l2: 0.732815
[35]	valid_0's l2: 0.733961
[36]	valid_0's l2: 0.735807
[37]	valid_0's l2: 0.735931
[38]	valid_0's l2: 0.735966
[39]	valid_0's l2: 0.736026
Early stopping, best iteration is:
[34]	valid_0's l2: 0.732815
	training done: 25.08s
RMSE SCORE: 0.86025
Best score: 0.82441
Best model: {'num_leaves': 51, 'min_data_in_leaf': 30, 'max_depth': 10, 'learning_rate': 0.05, 'feature_fraction': 0.5, 'bagging_fraction': 0.5, 'max_bin': 255, 'boosting_type': 'gbdt', 'objective': 'regression', 'metric': 'l2', 'bagging_freq': 5, 'verbose': -1}
--------------------------------------------------
SUMMARY
Best score: 0.82441
Best model: {'num_leaves': 51, 'min_data_in_leaf': 30, 'max_depth': 10, 'learning_rate': 0.05, 'feature_fraction': 0.5, 'bagging_fraction': 0.5, 'max_bin': 255, 'boosting_type': 'gbdt', 'objective': 'regression', 'metric': 'l2', 'bagging_freq': 5, 'verbose': -1}
</code></pre></div></div>

<h4 id="xgboost">XGBoost</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">best_params</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">learning_rate</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.16</span><span class="p">,</span> <span class="sh">'</span><span class="s">n_estimators</span><span class="sh">'</span><span class="p">:</span> <span class="mi">500</span><span class="p">,</span> 
               <span class="sh">'</span><span class="s">max_depth</span><span class="sh">'</span><span class="p">:</span> <span class="mi">6</span><span class="p">,</span> <span class="sh">'</span><span class="s">min_child_weight</span><span class="sh">'</span><span class="p">:</span> <span class="mi">7</span><span class="p">,</span>
               <span class="sh">'</span><span class="s">subsample</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.9</span><span class="p">,</span> <span class="sh">'</span><span class="s">colsample_bytree</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.7</span><span class="p">,</span> <span class="sh">'</span><span class="s">nthread</span><span class="sh">'</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> 
               <span class="sh">'</span><span class="s">scale_pos_weight</span><span class="sh">'</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span> <span class="sh">'</span><span class="s">random_state</span><span class="sh">'</span><span class="p">:</span> <span class="mi">42</span><span class="p">,</span> <span class="sh">'</span><span class="s">verbose</span><span class="sh">'</span><span class="p">:</span><span class="mi">2</span><span class="p">}</span>

<span class="n">model</span> <span class="o">=</span> <span class="nc">XGBRegressor</span><span class="p">(</span><span class="o">**</span><span class="n">best_params</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">,</span> <span class="n">eval_metric</span><span class="o">=</span><span class="sh">"</span><span class="s">rmse</span><span class="sh">"</span><span class="p">,</span> <span class="n">eval_set</span><span class="o">=</span><span class="p">[(</span><span class="n">X_valid</span><span class="p">,</span> <span class="n">Y_valid</span><span class="p">)],</span> 
          <span class="n">verbose</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span><span class="n">early_stopping_rounds</span> <span class="o">=</span> <span class="mi">50</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[0]	validation_0-rmse:1.03205
Will train until validation_0-rmse hasn't improved in 50 rounds.
[1]	validation_0-rmse:0.980421
[2]	validation_0-rmse:0.94645
[3]	validation_0-rmse:0.913994
[4]	validation_0-rmse:0.891504
[5]	validation_0-rmse:0.874951
[6]	validation_0-rmse:0.862584
[7]	validation_0-rmse:0.853669
[8]	validation_0-rmse:0.847595
[9]	validation_0-rmse:0.839851
[10]	validation_0-rmse:0.837036
[11]	validation_0-rmse:0.834322
[12]	validation_0-rmse:0.83262
[13]	validation_0-rmse:0.83206
[14]	validation_0-rmse:0.830011
[15]	validation_0-rmse:0.828429
[16]	validation_0-rmse:0.827463
[17]	validation_0-rmse:0.826978
[18]	validation_0-rmse:0.825869
[19]	validation_0-rmse:0.824109
[20]	validation_0-rmse:0.823856
[21]	validation_0-rmse:0.823428
[22]	validation_0-rmse:0.822876
[23]	validation_0-rmse:0.821865
[24]	validation_0-rmse:0.821441
[25]	validation_0-rmse:0.821135
[26]	validation_0-rmse:0.820952
[27]	validation_0-rmse:0.820293
[28]	validation_0-rmse:0.819232
[29]	validation_0-rmse:0.821048
[30]	validation_0-rmse:0.821688
[31]	validation_0-rmse:0.82166
[32]	validation_0-rmse:0.82134
[33]	validation_0-rmse:0.821112
[34]	validation_0-rmse:0.82101
[35]	validation_0-rmse:0.82121
[36]	validation_0-rmse:0.821139
[37]	validation_0-rmse:0.821079
[38]	validation_0-rmse:0.82094
[39]	validation_0-rmse:0.821209
[40]	validation_0-rmse:0.820822
[41]	validation_0-rmse:0.821023
[42]	validation_0-rmse:0.820533
[43]	validation_0-rmse:0.820379
[44]	validation_0-rmse:0.819605
[45]	validation_0-rmse:0.819557
[46]	validation_0-rmse:0.819411
[47]	validation_0-rmse:0.819752
[48]	validation_0-rmse:0.820246
[49]	validation_0-rmse:0.820295
[50]	validation_0-rmse:0.820421
[51]	validation_0-rmse:0.820169
[52]	validation_0-rmse:0.819825
[53]	validation_0-rmse:0.819881
[54]	validation_0-rmse:0.819917
[55]	validation_0-rmse:0.819968
[56] . . .
[124]	validation_0-rmse:0.820778
[125]	validation_0-rmse:0.82067
[126]	validation_0-rmse:0.82077
[127]	validation_0-rmse:0.820908
[128]	validation_0-rmse:0.821074
[129]	validation_0-rmse:0.821126
[130]	validation_0-rmse:0.821155
[131]	validation_0-rmse:0.821098
[132]	validation_0-rmse:0.821102
[133]	validation_0-rmse:0.821045
[134]	validation_0-rmse:0.821084
[135]	validation_0-rmse:0.821045
[136]	validation_0-rmse:0.820932
[137]	validation_0-rmse:0.820839
[138]	validation_0-rmse:0.820851
[139]	validation_0-rmse:0.821082
[140]	validation_0-rmse:0.820964
[141]	validation_0-rmse:0.820966
[142]	validation_0-rmse:0.820985
[143]	validation_0-rmse:0.821103
[144]	validation_0-rmse:0.821175
[145]	validation_0-rmse:0.820316
[146]	validation_0-rmse:0.820125
[147]	validation_0-rmse:0.82009
[148]	validation_0-rmse:0.819621
Stopping. Best iteration:
[98]	validation_0-rmse:0.818906


XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
             colsample_bynode=1, colsample_bytree=0.7, gamma=0,
             importance_type='gain', learning_rate=0.16, max_delta_step=0,
             max_depth=6, min_child_weight=7, missing=None, n_estimators=500,
             n_jobs=1, nthread=-1, objective='reg:linear', random_state=42,
             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
             silent=None, subsample=0.9, verbose=2, verbosity=1)
</code></pre></div></div>

<p><a id="Section_92"></a></p>
<h4 id="final-models">Final Models</h4>

<p>Based on the above tuned models, we finally trained the models on months 12 to 27, then we make predictions for months 28 to 34. We then stack the models and trained the stacked model using months 28 to 33. Finally, we make predictions on month 34. Here are the summaries of our tuning process:</p>

<p><strong>Step 1</strong>: Model training</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># combine the X_train and X_train_valid dataframes
</span><span class="n">all_data</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">X_valid</span><span class="p">)</span>
<span class="n">all_target</span> <span class="o">=</span> <span class="n">Y_train</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">Y_valid</span><span class="p">)</span>

<span class="n">all_data_lin</span> <span class="o">=</span> <span class="n">X_train_lin</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">X_valid_lin</span><span class="p">)</span>
<span class="n">all_dates</span> <span class="o">=</span> <span class="n">X_train_dates</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">X_valid_dates</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># we create 2nd level feeature matrix, init it with zeros first
</span><span class="n">X_train_valid_level2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">([</span><span class="n">X_valid_dates</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">6</span><span class="p">])</span>
<span class="n">X_test_level2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">([</span><span class="n">X_valid_meta_dates</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">6</span><span class="p">])</span>
<span class="n">X_submit</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">([</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="mi">6</span><span class="p">])</span>

<span class="c1"># Now fill `X_train_valid_level2` with metafeatures
</span><span class="k">for</span> <span class="n">cur_block_num</span> <span class="ow">in</span> <span class="p">[</span><span class="mi">28</span><span class="p">,</span> <span class="mi">29</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">32</span><span class="p">]:</span>
    
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Testing on month: {}</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">cur_block_num</span><span class="p">))</span>
    
    <span class="sh">'''</span><span class="s">
        1. Split `X_train` into parts
           Remember, that corresponding dates are stored in `dates_train` 
        2. Fit Ridge Regression
        3. Fit Lasso Regression
        4. Fit Bayesian Ridge
        5. Fit Random Forest
        6. Fit LightGBM
        7. Fit XGB
        8. Store predictions from 2. to 7. in the right place of `X_train_valid_level2`. 
           You can use `dates_train_level2` for it
           Make sure the order of the meta-features is the same as in `X_test_level2`
    </span><span class="sh">'''</span>      
    
    <span class="c1"># 1. Split `X_train` into parts
</span>    <span class="c1"># first chunk from month 1 to month cur_block_num-1 (for training)
</span>    <span class="c1"># secondd chunk for month cur_block_num (test) 
</span>    <span class="n">X_train_temp</span> <span class="o">=</span> <span class="n">all_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">all_dates</span> <span class="o">&lt;</span>  <span class="n">cur_block_num</span><span class="p">]</span>
    <span class="n">X_train_lin_temp</span> <span class="o">=</span> <span class="n">all_data_lin</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">all_dates</span> <span class="o">&lt;</span>  <span class="n">cur_block_num</span><span class="p">]</span>
    
    <span class="n">X_test_temp</span> <span class="o">=</span>  <span class="n">all_data</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">all_dates</span> <span class="o">==</span> <span class="n">cur_block_num</span><span class="p">]</span>
    <span class="n">X_test_lin_temp</span> <span class="o">=</span> <span class="n">all_data_lin</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">all_dates</span> <span class="o">==</span>  <span class="n">cur_block_num</span><span class="p">]</span> 
    
    <span class="n">y_train_temp</span> <span class="o">=</span> <span class="n">all_target</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">all_dates</span> <span class="o">&lt;</span>  <span class="n">cur_block_num</span><span class="p">].</span><span class="n">values</span>
    <span class="n">y_test_temp</span> <span class="o">=</span> <span class="n">all_target</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">all_dates</span> <span class="o">==</span> <span class="n">cur_block_num</span><span class="p">].</span><span class="n">values</span>
    
    <span class="c1"># 2. Fit Ridge Regression
</span>    <span class="n">model</span> <span class="o">=</span> <span class="nc">Ridge</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mi">270</span><span class="p">)</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train_lin_temp</span><span class="p">.</span><span class="n">values</span><span class="p">,</span> <span class="n">y_train_temp</span><span class="p">)</span>
    
    <span class="c1"># predict level2
</span>    <span class="n">pred_ridge</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_lin_temp</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
    <span class="c1"># predict month 33
</span>    <span class="n">pred_ridge_33</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_valid_meta_lin</span><span class="p">)</span>
    <span class="c1"># predict month 34
</span>    <span class="n">pred_ridge_34</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_lin</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="s"> done with Ridge</span><span class="sh">'</span><span class="p">)</span>
     
    <span class="c1"># 3. Fit Lasso Regression
</span>    <span class="n">model</span> <span class="o">=</span> <span class="nc">Lasso</span><span class="p">(</span><span class="n">alpha</span><span class="o">=</span><span class="mf">6.309573444801929e-05</span><span class="p">)</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train_lin_temp</span><span class="p">.</span><span class="n">values</span><span class="p">,</span> <span class="n">y_train_temp</span><span class="p">)</span>
    <span class="c1"># predict level 2
</span>    <span class="n">pred_lasso</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_lin_temp</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
    <span class="c1"># predict month 33
</span>    <span class="n">pred_lasso_33</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_valid_meta_lin</span><span class="p">)</span>
    <span class="c1"># predict month 34
</span>    <span class="n">pred_lasso_34</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_lin</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="s"> done with Lasso</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># 4. Fit Bayesian Ridge
</span>    <span class="n">model</span> <span class="o">=</span> <span class="nc">BayesianRidge</span><span class="p">(</span>
        <span class="n">alpha_1</span><span class="o">=</span><span class="mf">10000.0</span><span class="p">,</span> <span class="n">alpha_2</span><span class="o">=</span><span class="mf">1e-07</span><span class="p">,</span>
        <span class="n">lambda_1</span><span class="o">=</span><span class="mf">316227.7660168379</span><span class="p">,</span><span class="n">lambda_2</span><span class="o">=</span><span class="mf">1000.0</span>
    <span class="p">)</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train_lin_temp</span><span class="p">.</span><span class="n">values</span><span class="p">,</span> <span class="n">y_train_temp</span><span class="p">)</span>
    <span class="c1"># predict level 2
</span>    <span class="n">pred_bayesian</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_lin_temp</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
    <span class="c1"># predict month 33
</span>    <span class="n">pred_bayesian_33</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_valid_meta_lin</span><span class="p">)</span>
    <span class="c1"># predict month 34
</span>    <span class="n">pred_bayesian_34</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_lin</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="s"> done with Bayesian</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># 5. Fit Random Forest
</span>    <span class="n">model</span> <span class="o">=</span> <span class="nc">RandomForestRegressor</span><span class="p">(</span>
        <span class="n">max_depth</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> <span class="n">max_features</span><span class="o">=</span><span class="sh">'</span><span class="s">sqrt</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">min_samples_split</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">n_estimators</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train_temp</span><span class="p">,</span> <span class="n">y_train_temp</span><span class="p">)</span>
    <span class="c1"># predict level 2
</span>    <span class="n">pred_rdm</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_temp</span><span class="p">.</span><span class="n">values</span><span class="p">)</span>
    <span class="c1"># predict month 33
</span>    <span class="n">pred_rdm_33</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_valid_meta</span><span class="p">)</span>
    <span class="c1"># predict month 34
</span>    <span class="n">pred_rdm_34</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="s"> done with Random Forest</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># 6. Fit LightGBM
</span>    <span class="c1"># create lbg training and validation set
</span>    <span class="n">lgb_train</span> <span class="o">=</span> <span class="n">lgb</span><span class="p">.</span><span class="nc">Dataset</span><span class="p">(</span>
        <span class="n">data</span><span class="o">=</span><span class="n">X_train_temp</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="n">y_train_temp</span><span class="p">,</span>
        <span class="n">categorical_feature</span><span class="o">=</span><span class="n">indexes_of_categories</span><span class="p">,</span>
        <span class="n">free_raw_data</span><span class="o">=</span><span class="bp">False</span>
    <span class="p">)</span>
    
    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">num_leaves</span><span class="sh">'</span><span class="p">:</span> <span class="mi">51</span><span class="p">,</span> <span class="sh">'</span><span class="s">min_data_in_leaf</span><span class="sh">'</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">max_depth</span><span class="sh">'</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span> <span class="sh">'</span><span class="s">learning_rate</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.05</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">feature_fraction</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="sh">'</span><span class="s">bagging_fraction</span><span class="sh">'</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">max_bin</span><span class="sh">'</span><span class="p">:</span> <span class="mi">255</span><span class="p">,</span> <span class="sh">'</span><span class="s">boosting_type</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">gbdt</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">objective</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">regression</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">metric</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">l2</span><span class="sh">'</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">bagging_freq</span><span class="sh">'</span><span class="p">:</span> <span class="mi">5</span><span class="p">,</span> <span class="sh">'</span><span class="s">verbose</span><span class="sh">'</span><span class="p">:</span> <span class="o">-</span><span class="mi">1</span><span class="p">}</span>
    
    <span class="n">model</span> <span class="o">=</span> <span class="n">lgb</span><span class="p">.</span><span class="nf">train</span><span class="p">(</span><span class="n">params</span><span class="p">,</span>
                <span class="n">lgb_train</span><span class="p">,</span>
                <span class="n">num_boost_round</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
    <span class="c1"># predict level 2
</span>    <span class="n">pred_lgb</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_temp</span><span class="p">)</span>
    <span class="c1"># predict month 33
</span>    <span class="n">pred_lgb_33</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_valid_meta</span><span class="p">)</span>
    <span class="c1"># predict month 34
</span>    <span class="n">pred_lgb_34</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="s"> done with LGBM</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># 7. Fit XGBoost
</span>    <span class="n">model</span> <span class="o">=</span> <span class="nc">XGBRegressor</span><span class="p">(</span>
        <span class="n">learning_rate</span><span class="o">=</span><span class="mf">0.16</span><span class="p">,</span> <span class="n">n_estimators</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span>
        <span class="n">max_depth</span><span class="o">=</span><span class="mi">6</span><span class="p">,</span> <span class="n">min_child_weight</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span>
        <span class="n">subsample</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">colsample_bytree</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
        <span class="n">nthread</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">scale_pos_weight</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span>
        <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> 
    <span class="p">)</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train_temp</span><span class="p">,</span> <span class="n">y_train_temp</span><span class="p">,</span> <span class="n">eval_metric</span><span class="o">=</span><span class="sh">"</span><span class="s">rmse</span><span class="sh">"</span><span class="p">,</span> <span class="n">eval_set</span><span class="o">=</span><span class="p">[(</span><span class="n">X_test_temp</span><span class="p">,</span> <span class="n">y_test_temp</span><span class="p">)],</span> 
          <span class="n">verbose</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">early_stopping_rounds</span> <span class="o">=</span> <span class="mi">50</span><span class="p">)</span>
    <span class="c1"># predict level 2
</span>    <span class="n">pred_xgb</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_temp</span><span class="p">)</span>
    <span class="c1"># predict month 33
</span>    <span class="n">pred_xgb_33</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_valid_meta</span><span class="p">)</span>
    <span class="c1"># predict month 34
</span>    <span class="n">pred_xgb_34</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="s"> done with XGB</span><span class="sh">'</span><span class="p">)</span>

    <span class="c1"># 8. Store predictions from 2. to 7. in the right place of `X_train_valid_level2`. 
</span>    <span class="c1"># You can use `dates_train_level2` for it    
</span>    <span class="n">indexes</span> <span class="o">=</span> <span class="n">X_valid_dates</span><span class="p">.</span><span class="n">index</span><span class="p">[</span><span class="n">X_valid_dates</span> <span class="o">==</span> <span class="n">cur_block_num</span><span class="p">]</span>
    <span class="n">indexes_shift</span> <span class="o">=</span> <span class="n">X_valid_dates</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">min</span><span class="p">()</span>
    <span class="n">indexes</span> <span class="o">=</span> <span class="n">indexes</span> <span class="o">-</span> <span class="n">indexes_shift</span>
    
    <span class="n">X_train_valid_level2</span><span class="p">[</span><span class="n">indexes</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_ridge</span>
    <span class="n">X_train_valid_level2</span><span class="p">[</span><span class="n">indexes</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_lasso</span>
    <span class="n">X_train_valid_level2</span><span class="p">[</span><span class="n">indexes</span><span class="p">,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_bayesian</span>
    <span class="n">X_train_valid_level2</span><span class="p">[</span><span class="n">indexes</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_rdm</span>
    <span class="n">X_train_valid_level2</span><span class="p">[</span><span class="n">indexes</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_lgb</span>
    <span class="n">X_train_valid_level2</span><span class="p">[</span><span class="n">indexes</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_xgb</span>
    
    <span class="n">X_test_level2</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_ridge_33</span>
    <span class="n">X_test_level2</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_lasso_33</span>
    <span class="n">X_test_level2</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_bayesian_33</span>
    <span class="n">X_test_level2</span><span class="p">[:,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_rdm_33</span>
    <span class="n">X_test_level2</span><span class="p">[:,</span> <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_lgb_33</span>
    <span class="n">X_test_level2</span><span class="p">[:,</span> <span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_xgb_33</span>
    
    <span class="n">X_submit</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_ridge_34</span>
    <span class="n">X_submit</span><span class="p">[:,</span> <span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_lasso_34</span>
    <span class="n">X_submit</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_bayesian_34</span>
    <span class="n">X_submit</span><span class="p">[:,</span> <span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_rdm_34</span>
    <span class="n">X_submit</span><span class="p">[:,</span> <span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_lgb_34</span>
    <span class="n">X_submit</span><span class="p">[:,</span> <span class="mi">5</span><span class="p">]</span> <span class="o">=</span> <span class="n">pred_xgb_34</span>
    
    <span class="k">del</span> <span class="n">model</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Testing on month: 28
	 done with Ridge
	 done with Lasso
	 done with Bayesian
	 done with Random Forest
	 done with LGBM
	 done with XGB
Testing on month: 29
	 done with Ridge
	 done with Lasso
	 done with Bayesian
	 done with Random Forest
	 done with LGBM
	 done with XGB
Testing on month: 30
	 done with Ridge
	 done with Lasso
	 done with Bayesian
	 done with Random Forest
	 done with LGBM
	 done with XGB
Testing on month: 31
	 done with Ridge
	 done with Lasso
	 done with Bayesian
	 done with Random Forest
	 done with LGBM
Testing on month: 32
	 done with Ridge
	 done with Lasso
	 done with Bayesian
	 done with Random Forest
	 done with LGBM
	 done with XGB
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># save predictions
</span><span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">X_train_valid_level2</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">X_train_valid_level2.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
<span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">X_test_level2</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">X_test_level2.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
<span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">X_submit</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">X_submit.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">RMSE Scores on months 28 through 32</span><span class="sh">'</span><span class="p">)</span>
<span class="n">X_train_valid_level2_clip</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">X_train_valid_level2</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Ridge Regression: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_train_valid_level2_clip</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">Y_valid</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Lasso Regression: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_train_valid_level2_clip</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> <span class="n">Y_valid</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Bayesian Regression: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_train_valid_level2_clip</span><span class="p">[:,</span><span class="mi">2</span><span class="p">],</span> <span class="n">Y_valid</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Random Forest: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_train_valid_level2_clip</span><span class="p">[:,</span><span class="mi">3</span><span class="p">],</span> <span class="n">Y_valid</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">LGBM: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_train_valid_level2_clip</span><span class="p">[:,</span><span class="mi">4</span><span class="p">],</span> <span class="n">Y_valid</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">XGBM: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_train_valid_level2_clip</span><span class="p">[:,</span><span class="mi">5</span><span class="p">],</span> <span class="n">Y_valid</span><span class="p">))))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ridge Regression: 0.837
Lasso Regression: 0.837
Bayesian Regression: 0.837
Random Forest: 0.801
LGBM: 0.817
XGBM: 0.807
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">RMSE Scores on month 33</span><span class="sh">'</span><span class="p">)</span>
<span class="n">X_test_level2_clip</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">X_test_level2</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Ridge Regression: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_test_level2_clip</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">Y_valid_meta</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Lasso Regression: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_test_level2_clip</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> <span class="n">Y_valid_meta</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Bayesian Regression: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_test_level2_clip</span><span class="p">[:,</span><span class="mi">2</span><span class="p">],</span> <span class="n">Y_valid_meta</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Random Forest: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_test_level2_clip</span><span class="p">[:,</span><span class="mi">3</span><span class="p">],</span> <span class="n">Y_valid_meta</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">LGBM: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_test_level2_clip</span><span class="p">[:,</span><span class="mi">4</span><span class="p">],</span> <span class="n">Y_valid_meta</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">XGBM: {:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">X_test_level2_clip</span><span class="p">[:,</span><span class="mi">5</span><span class="p">],</span> <span class="n">Y_valid_meta</span><span class="p">))))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RMSE Scores on month 33
Ridge Regression: 0.962
Lasso Regression: 0.963
Bayesian Regression: 0.962
Random Forest: 0.921
LGBM: 0.953
XGBM: 0.946
</code></pre></div></div>

<p><a id="Section_92"></a></p>
<h3 id="meta-model">Meta Model</h3>

<p>Two meta models are considered:</p>
<ol>
  <li>In the first scenario, our model is only trained on the predictions of our first-layer models.</li>
  <li>We are also testing a case where our meta model is trained using our full features and the predictions of the first-layer models.</li>
</ol>

<p><a id="Section_92"></a></p>
<h4 id="meta-model-without-existing-features">Meta Model without Existing Features</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">itertools</span> <span class="kn">import</span> <span class="n">combinations</span>

<span class="n">best_rmse</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">best_combo</span> <span class="o">=</span> <span class="p">[]</span>

<span class="k">for</span> <span class="n">combo_len</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">):</span>
    <span class="n">comb</span> <span class="o">=</span> <span class="nf">combinations</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span> <span class="n">combo_len</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">list</span><span class="p">(</span><span class="n">comb</span><span class="p">):</span> 
        
        <span class="c1"># create meta model
</span>        <span class="n">meta</span> <span class="o">=</span> <span class="nc">LinearRegression</span><span class="p">()</span>
        
        <span class="c1"># fit meta model using predictions for months 28 through 32
</span>        <span class="n">meta</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_test_level2</span><span class="p">[:,</span><span class="n">i</span><span class="p">],</span> <span class="n">Y_valid_meta</span><span class="p">)</span>

        <span class="c1"># make predictions using the validation month 33
</span>        <span class="n">y_valid_pred</span> <span class="o">=</span> <span class="n">meta</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_level2</span><span class="p">[:,</span><span class="n">i</span><span class="p">])</span>

        <span class="c1"># compute rmse on validation test
</span>        <span class="n">rmse</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">Y_valid_meta</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">y_valid_pred</span><span class="p">,</span> <span class="mf">0.</span><span class="p">,</span> <span class="mf">20.</span><span class="p">)))</span>
        
        <span class="k">if</span> <span class="n">rmse</span><span class="o">&lt;</span><span class="n">best_rmse</span><span class="p">:</span>
            <span class="n">best_combo</span> <span class="o">=</span> <span class="n">i</span>
            <span class="n">best_rmse</span> <span class="o">=</span> <span class="n">rmse</span>
            
<span class="nf">print</span><span class="p">(</span><span class="n">best_combo</span><span class="p">,</span> <span class="n">best_rmse</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(0, 1, 2, 3, 4, 5) 0.9134753537081098
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create meta model
</span><span class="n">meta</span> <span class="o">=</span> <span class="nc">LinearRegression</span><span class="p">()</span>
<span class="n">meta</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train_valid_level2</span><span class="p">,</span> <span class="n">Y_valid</span><span class="p">)</span>
<span class="n">y_test_pred</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">meta</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_submit</span><span class="p">),</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y_test_pred</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(214200,)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">meta</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">meta.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<p><a id="Section_92"></a></p>
<h4 id="meta-model-with-existing-features">Meta Model with Existing Features</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train_level2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">((</span><span class="n">X_train_valid_level2</span><span class="p">,</span> <span class="n">X_valid_lin</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">X_train_level2</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1118820, 71)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_test_level2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">((</span><span class="n">X_test_level2</span><span class="p">,</span> <span class="n">X_valid_meta_lin</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">X_test_level2</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(238172, 71)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_submit_level2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">((</span><span class="n">X_submit</span><span class="p">,</span> <span class="n">X_test_lin</span><span class="p">),</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">X_submit_level2</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(214200, 71)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create meta model
</span><span class="n">meta_with</span> <span class="o">=</span> <span class="nc">LinearRegression</span><span class="p">()</span>
<span class="n">meta_with</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train_level</span><span class="p">,</span> <span class="n">Y_valid</span><span class="p">)</span>
<span class="n">y_test_pred_with</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">meta_with</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_submit_level2</span><span class="p">),</span> <span class="mf">0.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pickle</span><span class="p">.</span><span class="nf">dump</span><span class="p">(</span><span class="n">meta</span><span class="p">,</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">meta_with_feat.pickle</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">wb</span><span class="sh">'</span><span class="p">))</span>
</code></pre></div></div>

<p><a id="Section_93"></a></p>
<h3 id="submission-and-conclusion">Submission and Conclusion</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">'</span><span class="s">data_before_split</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">infile</span><span class="p">:</span>
    <span class="n">full_data</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">infile</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># test set (predictions)
</span><span class="n">X_test</span> <span class="o">=</span> <span class="n">full_data</span><span class="p">[</span><span class="n">full_data</span><span class="p">[</span><span class="sh">'</span><span class="s">date_block_num</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">34</span><span class="p">].</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">item_cnt_day</span><span class="sh">'</span><span class="p">],</span>
                                                           <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># add prediction to feature before merging
</span><span class="n">X_test</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">y_test_pred</span>

<span class="n">test_submission</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">X_test</span><span class="p">[[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">]],</span> <span class="n">sales_test</span><span class="p">,</span>
                           <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span>
                           <span class="n">right_on</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]).</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">test_submission</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">test_submission</span> <span class="o">=</span> <span class="n">test_submission</span><span class="p">[[</span><span class="sh">'</span><span class="s">ID</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">]]</span>

<span class="c1"># set predictions
</span><span class="n">test_submission</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">stacking_without.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># add prediction to feature before merging
</span><span class="n">X_test</span><span class="p">[</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">y_test_pred_with</span>

<span class="n">test_submission</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">merge</span><span class="p">(</span><span class="n">X_test</span><span class="p">[[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">]],</span> <span class="n">sales_test</span><span class="p">,</span>
                           <span class="n">how</span><span class="o">=</span><span class="sh">'</span><span class="s">right</span><span class="sh">'</span><span class="p">,</span> <span class="n">left_on</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span>
                           <span class="n">right_on</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">]).</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">test_submission</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">shop_id</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">item_id</span><span class="sh">'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">test_submission</span> <span class="o">=</span> <span class="n">test_submission</span><span class="p">[[</span><span class="sh">'</span><span class="s">ID</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">item_cnt_month</span><span class="sh">'</span><span class="p">]]</span>

<span class="c1"># set predictions
</span><span class="n">test_submission</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">stacking_with.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<p>Our final solution obtains 0.938030 and 0.945603 on the public and private leaderboard respectively.</p>]]></content><author><name>Thibault Dody</name></author><category term="Kaggle" /><category term="ML" /><category term="python" /><summary type="html"><![CDATA[A take on the Kaggle competition of the Sales Forecasting Challenge.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/tile.png" /><media:content medium="image" url="https://tdody.github.io/assets/img/2019-11-10-Sales-Forecast/tile.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Kaggle: Housing Price Predictions (Top 5%)</title><link href="http://localhost:4000/Housing-Dataset/" rel="alternate" type="text/html" title="Kaggle: Housing Price Predictions (Top 5%)" /><published>2019-10-03T00:00:00-04:00</published><updated>2019-10-03T00:00:00-04:00</updated><id>http://localhost:4000/Housing-Dataset</id><content type="html" xml:base="http://localhost:4000/Housing-Dataset/"><![CDATA[<footer id="attribution" style="float:right; color:#999; background:#fff;">
Created by Thibault Dody, 09/09/2019.
</footer>

<h1 id="housing-price-dataset">Housing Price Dataset</h1>

<figure>
<img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/banner.jpg" style="height=288px;" />
</figure>

<h2 id="table-of-content">Table of Content</h2>

<p><a href="#Section_1">1. Introduction</a></p>

<p><a href="#Section_2">2. Data Import and EDA</a><br />
    <a href="#Section_21">2.1. Import Libraries</a><br />
    <a href="#Section_22">2.2. Data Import</a><br />
    <a href="#Section_23">2.3. Exploratory Data Analysis</a><br />
      <a href="#Section_231">2.3.1 Interior</a><br />
      <a href="#Section_232">2.3.2 Exterior</a><br />
      <a href="#Section_233">2.3.3 Miscellaneous</a></p>

<p><a href="#Section_3">3. Pre-Processing</a></p>

<p><a href="#Section_4">4. Models</a><br />
    <a href="#Section_41">4.1. Benchmarking</a><br />
    <a href="#Section_42">4.2. Feature Importances</a><br />
    <a href="#Section_43">4.3. Result Correlation and Model Behaviors</a><br />
    <a href="#Section_44">4.4. Ensembling</a><br />
    <a href="#Section_45">4.5. Fine Tuning</a><br />
    <a href="#Section_46">4.6. Predictions</a></p>

<hr />
<p><a id="Section_1"></a></p>
<h2 id="1-introduction">1. Introduction</h2>

<p>Ask a home buyer to describe their dream house, and they probably won’t begin with the height of the basement ceiling or the proximity to an east-west railroad. But this playground competition’s dataset proves that much more influences price negotiations than the number of bedrooms or a white-picket fence.</p>

<p>With 79 explanatory variables describing (almost) every aspect of residential homes in Ames, Iowa, this competition challenges you to predict the final price of each home.</p>

<hr />
<p><a id="Section_2"></a></p>
<h2 id="2-dataset-import-and-eda">2. Dataset Import and EDA</h2>
<p><a id="Section_21"></a></p>
<h3 id="21-import-libraries">2.1 Import Libraries</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># import libraries
</span><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">np</span><span class="p">.</span><span class="nf">set_printoptions</span><span class="p">(</span><span class="n">threshold</span><span class="o">=</span><span class="bp">None</span><span class="p">)</span>
<span class="n">pd</span><span class="p">.</span><span class="nf">set_option</span><span class="p">(</span><span class="sh">'</span><span class="s">display.max_columns</span><span class="sh">'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
<span class="n">pd</span><span class="p">.</span><span class="nf">set_option</span><span class="p">(</span><span class="sh">'</span><span class="s">display.max_rows</span><span class="sh">'</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>

<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">import</span> <span class="n">matplotlib.ticker</span> <span class="k">as</span> <span class="n">plticker</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">set_style</span><span class="p">(</span><span class="sh">"</span><span class="s">whitegrid</span><span class="sh">"</span><span class="p">)</span>
<span class="n">mycols</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">#66c2ff</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">#5cd6d6</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">#00cc99</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">#85e085</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">#ffd966</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">#ffb366</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">#ffb3b3</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">#dab3ff</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">#c2c2d6</span><span class="sh">"</span><span class="p">]</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">set_palette</span><span class="p">(</span><span class="n">palette</span> <span class="o">=</span> <span class="n">mycols</span><span class="p">,</span> <span class="n">n_colors</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>

<span class="kn">from</span> <span class="n">scipy</span> <span class="kn">import</span> <span class="n">stats</span>
<span class="kn">from</span> <span class="n">scipy.stats</span> <span class="kn">import</span> <span class="n">skew</span><span class="p">,</span> <span class="n">norm</span><span class="p">,</span> <span class="n">probplot</span><span class="p">,</span> <span class="n">boxcox_normmax</span>
<span class="kn">from</span> <span class="n">scipy.special</span> <span class="kn">import</span> <span class="n">boxcox1p</span>
<span class="kn">from</span> <span class="n">scipy.stats.stats</span> <span class="kn">import</span> <span class="n">pearsonr</span>

<span class="kn">from</span> <span class="n">sklearn.feature_selection</span> <span class="kn">import</span> <span class="n">SelectFromModel</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span><span class="p">,</span> <span class="n">cross_val_score</span><span class="p">,</span> <span class="n">KFold</span>
<span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">ElasticNet</span><span class="p">,</span> <span class="n">Lasso</span><span class="p">,</span> <span class="n">Ridge</span><span class="p">,</span> <span class="n">RidgeCV</span><span class="p">,</span> <span class="n">LassoCV</span><span class="p">,</span> <span class="n">ElasticNetCV</span><span class="p">,</span> <span class="n">BayesianRidge</span><span class="p">,</span> <span class="n">LinearRegression</span>
<span class="kn">from</span> <span class="n">sklearn.tree</span> <span class="kn">import</span> <span class="n">DecisionTreeRegressor</span>
<span class="kn">from</span> <span class="n">sklearn.svm</span> <span class="kn">import</span> <span class="n">SVR</span>
<span class="kn">from</span> <span class="n">sklearn.ensemble</span> <span class="kn">import</span> <span class="n">RandomForestRegressor</span><span class="p">,</span>  <span class="n">GradientBoostingRegressor</span><span class="p">,</span> <span class="n">ExtraTreesRegressor</span>
<span class="kn">from</span> <span class="n">sklearn.neighbors</span> <span class="kn">import</span> <span class="n">KNeighborsRegressor</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">GridSearchCV</span><span class="p">,</span> <span class="n">ShuffleSplit</span>
<span class="kn">from</span> <span class="n">sklearn.preprocessing</span> <span class="kn">import</span> <span class="n">RobustScaler</span>
<span class="kn">from</span> <span class="n">sklearn.pipeline</span> <span class="kn">import</span> <span class="n">make_pipeline</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">mean_squared_error</span>

<span class="kn">from</span> <span class="n">lightgbm</span> <span class="kn">import</span> <span class="n">LGBMRegressor</span>
<span class="kn">from</span> <span class="n">xgboost</span> <span class="kn">import</span> <span class="n">XGBRegressor</span>

<span class="kn">from</span> <span class="n">mlxtend.regressor</span> <span class="kn">import</span> <span class="n">StackingCVRegressor</span>

<span class="kn">import</span> <span class="n">warnings</span>
<span class="n">warnings</span><span class="p">.</span><span class="nf">simplefilter</span><span class="p">(</span><span class="n">action</span><span class="o">=</span><span class="sh">'</span><span class="s">ignore</span><span class="sh">'</span><span class="p">,</span> <span class="n">category</span><span class="o">=</span><span class="nb">FutureWarning</span><span class="p">)</span>

<span class="n">decimals</span> <span class="o">=</span> <span class="mi">2</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</code></pre></div></div>

<p><a id="Section_22"></a></p>
<h3 id="22-data-import">2.2 Data Import</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load data
</span><span class="n">train</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./data/train.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./data/test.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Datasets are loaded.</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Datasets are loaded.
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print </span><span class="p">(</span><span class="sh">"</span><span class="s">Train: </span><span class="sh">"</span><span class="p">,</span><span class="n">train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="sh">"</span><span class="s">sales and </span><span class="sh">"</span><span class="p">,</span><span class="n">train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="sh">"</span><span class="s">features</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print </span><span class="p">(</span><span class="sh">"</span><span class="s">Test: </span><span class="sh">"</span><span class="p">,</span><span class="n">test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="sh">"</span><span class="s">sales and </span><span class="sh">"</span><span class="p">,</span><span class="n">test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="sh">"</span><span class="s">features</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Train:  1460 sales and  81 features
Test:  1459 sales and  80 features
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># explore data
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Here are a few observations: </span><span class="sh">"</span><span class="p">)</span>
<span class="n">train</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Here are a few observations: 
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Id</th>
      <th>MSSubClass</th>
      <th>MSZoning</th>
      <th>LotFrontage</th>
      <th>LotArea</th>
      <th>Street</th>
      <th>Alley</th>
      <th>LotShape</th>
      <th>LandContour</th>
      <th>Utilities</th>
      <th>LotConfig</th>
      <th>LandSlope</th>
      <th>Neighborhood</th>
      <th>Condition1</th>
      <th>Condition2</th>
      <th>BldgType</th>
      <th>HouseStyle</th>
      <th>OverallQual</th>
      <th>OverallCond</th>
      <th>YearBuilt</th>
      <th>YearRemodAdd</th>
      <th>RoofStyle</th>
      <th>RoofMatl</th>
      <th>Exterior1st</th>
      <th>Exterior2nd</th>
      <th>MasVnrType</th>
      <th>MasVnrArea</th>
      <th>ExterQual</th>
      <th>ExterCond</th>
      <th>Foundation</th>
      <th>BsmtQual</th>
      <th>BsmtCond</th>
      <th>BsmtExposure</th>
      <th>BsmtFinType1</th>
      <th>BsmtFinSF1</th>
      <th>BsmtFinType2</th>
      <th>BsmtFinSF2</th>
      <th>BsmtUnfSF</th>
      <th>TotalBsmtSF</th>
      <th>Heating</th>
      <th>HeatingQC</th>
      <th>CentralAir</th>
      <th>Electrical</th>
      <th>1stFlrSF</th>
      <th>2ndFlrSF</th>
      <th>LowQualFinSF</th>
      <th>GrLivArea</th>
      <th>BsmtFullBath</th>
      <th>BsmtHalfBath</th>
      <th>FullBath</th>
      <th>HalfBath</th>
      <th>BedroomAbvGr</th>
      <th>KitchenAbvGr</th>
      <th>KitchenQual</th>
      <th>TotRmsAbvGrd</th>
      <th>Functional</th>
      <th>Fireplaces</th>
      <th>FireplaceQu</th>
      <th>GarageType</th>
      <th>GarageYrBlt</th>
      <th>GarageFinish</th>
      <th>GarageCars</th>
      <th>GarageArea</th>
      <th>GarageQual</th>
      <th>GarageCond</th>
      <th>PavedDrive</th>
      <th>WoodDeckSF</th>
      <th>OpenPorchSF</th>
      <th>EnclosedPorch</th>
      <th>3SsnPorch</th>
      <th>ScreenPorch</th>
      <th>PoolArea</th>
      <th>PoolQC</th>
      <th>Fence</th>
      <th>MiscFeature</th>
      <th>MiscVal</th>
      <th>MoSold</th>
      <th>YrSold</th>
      <th>SaleType</th>
      <th>SaleCondition</th>
      <th>SalePrice</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1</td>
      <td>60</td>
      <td>RL</td>
      <td>65.0</td>
      <td>8450</td>
      <td>Pave</td>
      <td>NaN</td>
      <td>Reg</td>
      <td>Lvl</td>
      <td>AllPub</td>
      <td>Inside</td>
      <td>Gtl</td>
      <td>CollgCr</td>
      <td>Norm</td>
      <td>Norm</td>
      <td>1Fam</td>
      <td>2Story</td>
      <td>7</td>
      <td>5</td>
      <td>2003</td>
      <td>2003</td>
      <td>Gable</td>
      <td>CompShg</td>
      <td>VinylSd</td>
      <td>VinylSd</td>
      <td>BrkFace</td>
      <td>196.0</td>
      <td>Gd</td>
      <td>TA</td>
      <td>PConc</td>
      <td>Gd</td>
      <td>TA</td>
      <td>No</td>
      <td>GLQ</td>
      <td>706</td>
      <td>Unf</td>
      <td>0</td>
      <td>150</td>
      <td>856</td>
      <td>GasA</td>
      <td>Ex</td>
      <td>Y</td>
      <td>SBrkr</td>
      <td>856</td>
      <td>854</td>
      <td>0</td>
      <td>1710</td>
      <td>1</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>3</td>
      <td>1</td>
      <td>Gd</td>
      <td>8</td>
      <td>Typ</td>
      <td>0</td>
      <td>NaN</td>
      <td>Attchd</td>
      <td>2003.0</td>
      <td>RFn</td>
      <td>2</td>
      <td>548</td>
      <td>TA</td>
      <td>TA</td>
      <td>Y</td>
      <td>0</td>
      <td>61</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>2</td>
      <td>2008</td>
      <td>WD</td>
      <td>Normal</td>
      <td>208500</td>
    </tr>
    <tr>
      <th>1</th>
      <td>2</td>
      <td>20</td>
      <td>RL</td>
      <td>80.0</td>
      <td>9600</td>
      <td>Pave</td>
      <td>NaN</td>
      <td>Reg</td>
      <td>Lvl</td>
      <td>AllPub</td>
      <td>FR2</td>
      <td>Gtl</td>
      <td>Veenker</td>
      <td>Feedr</td>
      <td>Norm</td>
      <td>1Fam</td>
      <td>1Story</td>
      <td>6</td>
      <td>8</td>
      <td>1976</td>
      <td>1976</td>
      <td>Gable</td>
      <td>CompShg</td>
      <td>MetalSd</td>
      <td>MetalSd</td>
      <td>None</td>
      <td>0.0</td>
      <td>TA</td>
      <td>TA</td>
      <td>CBlock</td>
      <td>Gd</td>
      <td>TA</td>
      <td>Gd</td>
      <td>ALQ</td>
      <td>978</td>
      <td>Unf</td>
      <td>0</td>
      <td>284</td>
      <td>1262</td>
      <td>GasA</td>
      <td>Ex</td>
      <td>Y</td>
      <td>SBrkr</td>
      <td>1262</td>
      <td>0</td>
      <td>0</td>
      <td>1262</td>
      <td>0</td>
      <td>1</td>
      <td>2</td>
      <td>0</td>
      <td>3</td>
      <td>1</td>
      <td>TA</td>
      <td>6</td>
      <td>Typ</td>
      <td>1</td>
      <td>TA</td>
      <td>Attchd</td>
      <td>1976.0</td>
      <td>RFn</td>
      <td>2</td>
      <td>460</td>
      <td>TA</td>
      <td>TA</td>
      <td>Y</td>
      <td>298</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>5</td>
      <td>2007</td>
      <td>WD</td>
      <td>Normal</td>
      <td>181500</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3</td>
      <td>60</td>
      <td>RL</td>
      <td>68.0</td>
      <td>11250</td>
      <td>Pave</td>
      <td>NaN</td>
      <td>IR1</td>
      <td>Lvl</td>
      <td>AllPub</td>
      <td>Inside</td>
      <td>Gtl</td>
      <td>CollgCr</td>
      <td>Norm</td>
      <td>Norm</td>
      <td>1Fam</td>
      <td>2Story</td>
      <td>7</td>
      <td>5</td>
      <td>2001</td>
      <td>2002</td>
      <td>Gable</td>
      <td>CompShg</td>
      <td>VinylSd</td>
      <td>VinylSd</td>
      <td>BrkFace</td>
      <td>162.0</td>
      <td>Gd</td>
      <td>TA</td>
      <td>PConc</td>
      <td>Gd</td>
      <td>TA</td>
      <td>Mn</td>
      <td>GLQ</td>
      <td>486</td>
      <td>Unf</td>
      <td>0</td>
      <td>434</td>
      <td>920</td>
      <td>GasA</td>
      <td>Ex</td>
      <td>Y</td>
      <td>SBrkr</td>
      <td>920</td>
      <td>866</td>
      <td>0</td>
      <td>1786</td>
      <td>1</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>3</td>
      <td>1</td>
      <td>Gd</td>
      <td>6</td>
      <td>Typ</td>
      <td>1</td>
      <td>TA</td>
      <td>Attchd</td>
      <td>2001.0</td>
      <td>RFn</td>
      <td>2</td>
      <td>608</td>
      <td>TA</td>
      <td>TA</td>
      <td>Y</td>
      <td>0</td>
      <td>42</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>9</td>
      <td>2008</td>
      <td>WD</td>
      <td>Normal</td>
      <td>223500</td>
    </tr>
    <tr>
      <th>3</th>
      <td>4</td>
      <td>70</td>
      <td>RL</td>
      <td>60.0</td>
      <td>9550</td>
      <td>Pave</td>
      <td>NaN</td>
      <td>IR1</td>
      <td>Lvl</td>
      <td>AllPub</td>
      <td>Corner</td>
      <td>Gtl</td>
      <td>Crawfor</td>
      <td>Norm</td>
      <td>Norm</td>
      <td>1Fam</td>
      <td>2Story</td>
      <td>7</td>
      <td>5</td>
      <td>1915</td>
      <td>1970</td>
      <td>Gable</td>
      <td>CompShg</td>
      <td>Wd Sdng</td>
      <td>Wd Shng</td>
      <td>None</td>
      <td>0.0</td>
      <td>TA</td>
      <td>TA</td>
      <td>BrkTil</td>
      <td>TA</td>
      <td>Gd</td>
      <td>No</td>
      <td>ALQ</td>
      <td>216</td>
      <td>Unf</td>
      <td>0</td>
      <td>540</td>
      <td>756</td>
      <td>GasA</td>
      <td>Gd</td>
      <td>Y</td>
      <td>SBrkr</td>
      <td>961</td>
      <td>756</td>
      <td>0</td>
      <td>1717</td>
      <td>1</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>3</td>
      <td>1</td>
      <td>Gd</td>
      <td>7</td>
      <td>Typ</td>
      <td>1</td>
      <td>Gd</td>
      <td>Detchd</td>
      <td>1998.0</td>
      <td>Unf</td>
      <td>3</td>
      <td>642</td>
      <td>TA</td>
      <td>TA</td>
      <td>Y</td>
      <td>0</td>
      <td>35</td>
      <td>272</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>2</td>
      <td>2006</td>
      <td>WD</td>
      <td>Abnorml</td>
      <td>140000</td>
    </tr>
    <tr>
      <th>4</th>
      <td>5</td>
      <td>60</td>
      <td>RL</td>
      <td>84.0</td>
      <td>14260</td>
      <td>Pave</td>
      <td>NaN</td>
      <td>IR1</td>
      <td>Lvl</td>
      <td>AllPub</td>
      <td>FR2</td>
      <td>Gtl</td>
      <td>NoRidge</td>
      <td>Norm</td>
      <td>Norm</td>
      <td>1Fam</td>
      <td>2Story</td>
      <td>8</td>
      <td>5</td>
      <td>2000</td>
      <td>2000</td>
      <td>Gable</td>
      <td>CompShg</td>
      <td>VinylSd</td>
      <td>VinylSd</td>
      <td>BrkFace</td>
      <td>350.0</td>
      <td>Gd</td>
      <td>TA</td>
      <td>PConc</td>
      <td>Gd</td>
      <td>TA</td>
      <td>Av</td>
      <td>GLQ</td>
      <td>655</td>
      <td>Unf</td>
      <td>0</td>
      <td>490</td>
      <td>1145</td>
      <td>GasA</td>
      <td>Ex</td>
      <td>Y</td>
      <td>SBrkr</td>
      <td>1145</td>
      <td>1053</td>
      <td>0</td>
      <td>2198</td>
      <td>1</td>
      <td>0</td>
      <td>2</td>
      <td>1</td>
      <td>4</td>
      <td>1</td>
      <td>Gd</td>
      <td>9</td>
      <td>Typ</td>
      <td>1</td>
      <td>TA</td>
      <td>Attchd</td>
      <td>2000.0</td>
      <td>RFn</td>
      <td>3</td>
      <td>836</td>
      <td>TA</td>
      <td>TA</td>
      <td>Y</td>
      <td>192</td>
      <td>84</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>0</td>
      <td>12</td>
      <td>2008</td>
      <td>WD</td>
      <td>Normal</td>
      <td>250000</td>
    </tr>
  </tbody>
</table>
</div>

<p><a id="Section_23"></a></p>
<h3 id="23-exploratory-data-analysis">2.3 Exploratory Data Analysis</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># list features
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">List of features:</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">train</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>List of features:
Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',
       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',
       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',
       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',
       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',
       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',
       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',
       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',
       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',
       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',
       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',
       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',
       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',
       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',
       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',
       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',
       'SaleCondition', 'SalePrice'],
      dtype='object')
</code></pre></div></div>

<p>The features are defined as:</p>
<ul>
  <li>Order (Discrete): Observation number</li>
  <li>PID (Nominal): Parcel identification number  - can be used with city web site for parcel review.</li>
  <li>MS SubClass (Nominal): Identifies the type of dwelling involved in the sale.</li>
  <li>MS Zoning (Nominal): Identifies the general zoning classification of the sale.</li>
  <li>Lot Frontage (Continuous): Linear feet of street connected to property</li>
  <li>Lot Area (Continuous): Lot size in square feet</li>
  <li>Street (Nominal): Type of road access to property</li>
  <li>Alley (Nominal): Type of alley access to property</li>
  <li>Lot Shape (Ordinal): General shape of property</li>
  <li>Land Contour (Nominal): Flatness of the property</li>
  <li>Utilities (Ordinal): Type of utilities available</li>
  <li>Lot Config (Nominal): Lot configuration</li>
  <li>Land Slope (Ordinal): Slope of property</li>
  <li>Neighborhood (Nominal): Physical locations within Ames city limits (map available)</li>
  <li>Condition 1 (Nominal): Proximity to various conditions</li>
  <li>Condition 2 (Nominal): Proximity to various conditions (if more than one is present)</li>
  <li>Bldg Type (Nominal): Type of dwelling</li>
  <li>House Style (Nominal): Style of dwelling</li>
  <li>Overall Qual (Ordinal): Rates the overall material and finish of the house</li>
  <li>Overall Cond (Ordinal): Rates the overall condition of the house</li>
  <li>Year Built (Discrete): Original construction date</li>
  <li>Year Remod/Add (Discrete): Remodel date (same as construction date if no remodeling or additions)</li>
  <li>Roof Style (Nominal): Type of roof</li>
  <li>Roof Matl (Nominal): Roof material</li>
  <li>Exterior 1 (Nominal): Exterior covering on house</li>
  <li>Exterior 2 (Nominal): Exterior covering on house (if more than one material)</li>
  <li>Mas Vnr Type (Nominal): Masonry veneer type</li>
  <li>Mas Vnr Area (Continuous): Masonry veneer area in square feet</li>
  <li>Exter Qual (Ordinal): Evaluates the quality of the material on the exterior</li>
  <li>Exter Cond (Ordinal): Evaluates the present condition of the material on the exterior</li>
  <li>Foundation (Nominal): Type of foundation</li>
  <li>Bsmt Qual (Ordinal): Evaluates the height of the basement</li>
  <li>Bsmt Cond (Ordinal): Evaluates the general condition of the basement</li>
  <li>Bsmt Exposure	(Ordinal): Refers to walkout or garden level walls</li>
  <li>BsmtFin Type 1	(Ordinal): Rating of basement finished area</li>
  <li>BsmtFin SF 1 (Continuous): Type 1 finished square feet</li>
  <li>BsmtFinType 2	(Ordinal): Rating of basement finished area (if multiple types)</li>
  <li>BsmtFin SF 2 (Continuous): Type 2 finished square feet</li>
  <li>Bsmt Unf SF (Continuous): Unfinished square feet of basement area</li>
  <li>Total Bsmt SF (Continuous): Total square feet of basement area</li>
  <li>Heating	(Nominal): Type of heating</li>
  <li>HeatingQC (Ordinal): Heating quality and condition</li>
  <li>Central Air (Nominal): Central air conditioning</li>
  <li>Electrical (Ordinal): Electrical system</li>
  <li>1st Flr SF (Continuous): First Floor square feet</li>
  <li>2nd Flr SF (Continuous)	: Second floor square feet</li>
  <li>Low Qual Fin SF (Continuous): Low quality finished square feet (all floors)</li>
  <li>Gr Liv Area (Continuous): Above grade (ground) living area square feet</li>
  <li>Bsmt Full Bath (Discrete): Basement full bathrooms</li>
  <li>Bsmt Half Bath (Discrete): Basement half bathrooms</li>
  <li>Full Bath (Discrete): Full bathrooms above grade</li>
  <li>Half Bath (Discrete): Half baths above grade</li>
  <li>Bedroom (Discrete): Bedrooms above grade (does NOT include basement bedrooms)</li>
  <li>Kitchen (Discrete): Kitchens above grade</li>
  <li>KitchenQual (Ordinal): Kitchen quality</li>
  <li>TotRmsAbvGrd	(Discrete): Total rooms above grade (does not include bathrooms)</li>
  <li>Functional (Ordinal): Home functionality (Assume typical unless deductions are warranted)</li>
  <li>Fireplaces (Discrete): Number of fireplaces</li>
  <li>FireplaceQu (Ordinal): Fireplace quality</li>
  <li>Garage Type (Nominal): Garage location</li>
  <li>Garage Yr Blt (Discrete): Year garage was built</li>
  <li>Garage Finish (Ordinal)	: Interior finish of the garage</li>
  <li>Garage Cars (Discrete): Size of garage in car capacity</li>
  <li>Garage Area (Continuous): Size of garage in square feet</li>
  <li>Garage Qual (Ordinal): Garage quality</li>
  <li>Garage Cond (Ordinal): Garage condition</li>
  <li>Paved Drive (Ordinal): Paved driveway</li>
  <li>Wood Deck SF (Continuous): Wood deck area in square feet</li>
  <li>Open Porch SF (Continuous): Open porch area in square feet</li>
  <li>Enclosed Porch (Continuous): Enclosed porch area in square feet</li>
  <li>3-Ssn Porch (Continuous): Three season porch area in square feet</li>
  <li>Screen Porch (Continuous): Screen porch area in square feet</li>
  <li>Pool Area (Continuous): Pool area in square feet</li>
  <li>Pool QC (Ordinal): Pool quality</li>
  <li>Fence (Ordinal): Fence quality</li>
  <li>Misc Feature (Nominal): Miscellaneous feature not covered in other categories</li>
  <li>Misc Val (Continuous): $$Value of miscellaneous feature</li>
  <li>Mo Sold (Discrete): Month Sold (MM)</li>
  <li>Yr Sold (Discrete): Year Sold (YYYY)</li>
  <li>Sale Type (Nominal): Type of sale</li>
  <li>Sale Condition (Nominal): Condition of sale</li>
  <li>SalePrice (Continuous): Sale price $$</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># explore data
</span><span class="n">train</span><span class="p">.</span><span class="nf">info</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 1460 entries, 0 to 1459
Data columns (total 81 columns):
Id               1460 non-null int64
MSSubClass       1460 non-null int64
MSZoning         1460 non-null object
LotFrontage      1201 non-null float64
LotArea          1460 non-null int64
Street           1460 non-null object
Alley            91 non-null object
LotShape         1460 non-null object
LandContour      1460 non-null object
Utilities        1460 non-null object
LotConfig        1460 non-null object
LandSlope        1460 non-null object
Neighborhood     1460 non-null object
Condition1       1460 non-null object
Condition2       1460 non-null object
BldgType         1460 non-null object
HouseStyle       1460 non-null object
OverallQual      1460 non-null int64
OverallCond      1460 non-null int64
YearBuilt        1460 non-null int64
YearRemodAdd     1460 non-null int64
RoofStyle        1460 non-null object
RoofMatl         1460 non-null object
Exterior1st      1460 non-null object
Exterior2nd      1460 non-null object
MasVnrType       1452 non-null object
MasVnrArea       1452 non-null float64
ExterQual        1460 non-null object
ExterCond        1460 non-null object
Foundation       1460 non-null object
BsmtQual         1423 non-null object
BsmtCond         1423 non-null object
BsmtExposure     1422 non-null object
BsmtFinType1     1423 non-null object
BsmtFinSF1       1460 non-null int64
BsmtFinType2     1422 non-null object
BsmtFinSF2       1460 non-null int64
BsmtUnfSF        1460 non-null int64
TotalBsmtSF      1460 non-null int64
Heating          1460 non-null object
HeatingQC        1460 non-null object
CentralAir       1460 non-null object
Electrical       1459 non-null object
1stFlrSF         1460 non-null int64
2ndFlrSF         1460 non-null int64
LowQualFinSF     1460 non-null int64
GrLivArea        1460 non-null int64
BsmtFullBath     1460 non-null int64
BsmtHalfBath     1460 non-null int64
FullBath         1460 non-null int64
HalfBath         1460 non-null int64
BedroomAbvGr     1460 non-null int64
KitchenAbvGr     1460 non-null int64
KitchenQual      1460 non-null object
TotRmsAbvGrd     1460 non-null int64
Functional       1460 non-null object
Fireplaces       1460 non-null int64
FireplaceQu      770 non-null object
GarageType       1379 non-null object
GarageYrBlt      1379 non-null float64
GarageFinish     1379 non-null object
GarageCars       1460 non-null int64
GarageArea       1460 non-null int64
GarageQual       1379 non-null object
GarageCond       1379 non-null object
PavedDrive       1460 non-null object
WoodDeckSF       1460 non-null int64
OpenPorchSF      1460 non-null int64
EnclosedPorch    1460 non-null int64
3SsnPorch        1460 non-null int64
ScreenPorch      1460 non-null int64
PoolArea         1460 non-null int64
PoolQC           7 non-null object
Fence            281 non-null object
MiscFeature      54 non-null object
MiscVal          1460 non-null int64
MoSold           1460 non-null int64
YrSold           1460 non-null int64
SaleType         1460 non-null object
SaleCondition    1460 non-null object
SalePrice        1460 non-null int64
dtypes: float64(3), int64(35), object(43)
memory usage: 924.0+ KB
</code></pre></div></div>

<p>As listed above, certain features contain outliers. We can plot a bar plot of the proportion of missing values. This inspection will help target the specific features which require some additional work.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># count missing values per features
</span><span class="n">missing_fraction</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">()</span> <span class="o">/</span> <span class="n">train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>

<span class="c1"># filter to keep only features with missing values
</span><span class="n">missing_fraction</span> <span class="o">=</span> <span class="n">missing_fraction</span><span class="p">[</span><span class="n">missing_fraction</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">]</span>

<span class="c1"># sort by highest ratio
</span><span class="n">missing_fraction</span> <span class="o">=</span> <span class="n">missing_fraction</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">()</span>

<span class="c1"># plot
</span><span class="n">missing_fraction</span><span class="p">.</span><span class="n">plot</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Fraction of missing values</span><span class="sh">'</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">There are {} features with missing values.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">missing_fraction</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>There are 19 features with missing values.
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_17_1.png" />
</figure>

<p>We now inspect the distribution of our target feature. Indeed, most machine learning model perform well is the target feature is normally distributed. To check if it is the case, we can plot the distribution of the sale prices against standard distribution (Normal, Log…).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">y</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">]</span>

<span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span> <span class="o">=</span> <span class="n">norm</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">fit</span><span class="o">=</span><span class="n">norm</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Normal distribution ($$\mu=$$ {:.2f} and $$\sigma=$$ {:.2f} )</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)],</span> <span class="n">loc</span> <span class="o">=</span> <span class="sh">'</span><span class="s">best</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Histogram of SalePrice</span><span class="sh">'</span><span class="p">);</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">()</span>
<span class="n">res</span> <span class="o">=</span> <span class="nf">probplot</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">plot</span><span class="o">=</span><span class="n">plt</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_19_0.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_19_1.png" />
</figure>

<p>The above plots show that the sale price does cannot be approximated by a normal distribution. Indeed, the distribution plot and quantile-quantile plots are too different from the ones of a normal distribution.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Normal</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">kde</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fit</span><span class="o">=</span><span class="n">stats</span><span class="p">.</span><span class="n">norm</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Log Normal</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">kde</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fit</span><span class="o">=</span><span class="n">stats</span><span class="p">.</span><span class="n">lognorm</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Johnson SU</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">kde</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fit</span><span class="o">=</span><span class="n">stats</span><span class="p">.</span><span class="n">johnsonsu</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Johnson SB</span><span class="sh">'</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">kde</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">fit</span><span class="o">=</span><span class="n">stats</span><span class="p">.</span><span class="n">johnsonsb</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_21_0.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_21_1.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_21_2.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_21_3.png" />
</figure>

<p>From the above figures, it appears that the sale prices are not normally distributed. Indeed, the log-normal, Johnson SU, and Johnson SB are the best fit. By visual inspection, the best fit is obtained with the <strong>Johnson SU</strong> distribution. We can now modify the target feature accordingly.</p>

<p>We can also test the numerical features to determine if they are approximately normally distributed.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">numerical_features</span> <span class="o">=</span> <span class="p">[</span><span class="n">feature</span> <span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">train</span><span class="p">.</span><span class="n">columns</span> <span class="k">if</span> <span class="n">train</span><span class="p">.</span><span class="n">dtypes</span><span class="p">[</span><span class="n">feature</span><span class="p">]</span><span class="o">!=</span><span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">]</span> 
<span class="n">qualitive_features</span> <span class="o">=</span> <span class="p">[</span><span class="n">feature</span> <span class="k">for</span> <span class="n">feature</span> <span class="ow">in</span> <span class="n">train</span><span class="p">.</span><span class="n">columns</span> <span class="k">if</span> <span class="n">train</span><span class="p">.</span><span class="n">dtypes</span><span class="p">[</span><span class="n">feature</span><span class="p">]</span><span class="o">==</span><span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shapiro_test</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">stats</span><span class="p">.</span><span class="nf">shapiro</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">))[</span><span class="mi">1</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mf">0.05</span>
<span class="n">shapiro_test_results</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="n">numerical_features</span><span class="p">]).</span><span class="nf">apply</span><span class="p">(</span><span class="n">shapiro_test</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">{} feature distributions can be considered as drawn from a normal distribution.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">shapiro_test_results</span><span class="p">.</span><span class="nf">sum</span><span class="p">()))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Shapiro test significance level set to 0.05.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 feature distributions can be considered as drawn from a normal distribution.
Shapiro test significance level set to 0.05.
</code></pre></div></div>

<p>In addition to the target feature, none of the other numerical feature can be considered normally distributed.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compute the correlation matrix
</span><span class="n">corr</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">corr</span><span class="p">()</span>
<span class="n">corr</span> <span class="o">=</span> <span class="n">corr</span><span class="p">.</span><span class="nf">round</span><span class="p">(</span><span class="n">decimals</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="c1"># Generate a mask for the upper triangle
</span><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">bool</span><span class="p">)</span>
<span class="n">mask</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">triu_indices_from</span><span class="p">(</span><span class="n">mask</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">True</span>

<span class="c1"># Set up the matplotlib figure
</span><span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">22</span><span class="p">,</span> <span class="mi">22</span><span class="p">))</span>

<span class="c1"># Generate a custom diverging colormap
</span><span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">220</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">as_cmap</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Draw the heatmap with the mask and correct aspect ratio
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Correlation Map:</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span><span class="n">vmin</span><span class="o">=-</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">linewidths</span><span class="o">=</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span><span class="n">cbar_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">shrink</span><span class="sh">"</span><span class="p">:</span> <span class="p">.</span><span class="mi">3</span><span class="p">},</span><span class="n">annot_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">size</span><span class="sh">"</span><span class="p">:</span><span class="mi">9</span><span class="p">},</span><span class="n">fmt</span><span class="o">=</span><span class="sh">'</span><span class="s">.2g</span><span class="sh">'</span><span class="p">,)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="sh">'</span><span class="s">both</span><span class="sh">'</span><span class="p">,</span> <span class="n">which</span><span class="o">=</span><span class="sh">'</span><span class="s">major</span><span class="sh">'</span><span class="p">,</span> <span class="n">labelsize</span><span class="o">=</span><span class="mi">11</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Correlation Map:
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_27_1.png" />
</figure>

<p><a id="Section_231"></a></p>
<h3 id="231-interior">2.3.1 Interior</h3>
<p>The following variables are assigned to the “Interior” group.</p>
<ul>
  <li>Bsmt Qual (Ordinal): Evaluates the height of the basement</li>
  <li>Bsmt Cond (Ordinal): Evaluates the general condition of the basement</li>
  <li>Bsmt Exposure	(Ordinal): Refers to walkout or garden level walls</li>
  <li>BsmtFin Type 1	(Ordinal): Rating of basement finished area</li>
  <li>BsmtFin SF 1 (Continuous): Type 1 finished square feet</li>
  <li>BsmtFinType 2	(Ordinal): Rating of basement finished area (if multiple types)</li>
  <li>BsmtFin SF 2 (Continuous): Type 2 finished square feet</li>
  <li>Bsmt Unf SF (Continuous): Unfinished square feet of basement area</li>
  <li>Total Bsmt SF (Continuous): Total square feet of basement area</li>
  <li>1st Flr SF (Continuous): First Floor square feet</li>
  <li>2nd Flr SF (Continuous)	: Second floor square feet</li>
  <li>Low Qual Fin SF (Continuous): Low quality finished square feet (all floors)</li>
  <li>Bsmt Full Bath (Discrete): Basement full bathrooms</li>
  <li>Bsmt Half Bath (Discrete): Basement half bathrooms</li>
  <li>Full Bath (Discrete): Full bathrooms above grade</li>
  <li>Half Bath (Discrete): Half baths above grade</li>
  <li>Bedroom (Discrete): Bedrooms above grade (does NOT include basement bedrooms)</li>
  <li>Kitchen (Discrete): Kitchens above grade</li>
  <li>KitchenQual (Ordinal): Kitchen quality</li>
  <li>TotRmsAbvGrd	(Discrete): Total rooms above grade (does not include bathrooms)</li>
  <li>Fireplaces (Discrete): Number of fireplaces</li>
  <li>FireplaceQu (Ordinal): Fireplace quality</li>
  <li>Gr Liv Area (Continuous): Above grade (ground) living area square feet</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="nf">set</span><span class="p">()</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">set_style</span><span class="p">(</span><span class="sh">"</span><span class="s">whitegrid</span><span class="sh">"</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">set_palette</span><span class="p">(</span><span class="n">palette</span> <span class="o">=</span> <span class="n">mycols</span><span class="p">,</span> <span class="n">n_colors</span> <span class="o">=</span> <span class="mi">4</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">featureName</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">axarr</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="n">figsize</span> <span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">8</span><span class="p">),</span><span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="c1"># plot
</span>    <span class="c1">#plt.subplot(1,4,1)
</span>    <span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">featureName</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">order</span><span class="o">=</span><span class="n">order</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>  
    
    <span class="c1">#plt.subplot(1,4,2)
</span>    <span class="n">plot</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">violinplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">featureName</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span> <span class="n">showmeans</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
                          <span class="n">showmedians</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">showextrema</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">order</span><span class="o">=</span><span class="n">order</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>  
    
    <span class="c1">#plt.subplot(1,4,3)
</span>    <span class="n">plot</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">swarmplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">featureName</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">order</span><span class="o">=</span><span class="n">order</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>  
    
    <span class="c1">#plt.subplot(1,4,4)
</span>    <span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">featureName</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span>
                <span class="n">order</span><span class="o">=</span><span class="n">order</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">].</span><span class="nf">max</span><span class="p">()</span><span class="o">*</span><span class="mf">1.05</span><span class="p">)</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axarr</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>  
    <span class="n">plt</span><span class="p">.</span><span class="nf">suptitle</span><span class="p">(</span><span class="n">featureName</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BsmtQual</span><span class="sh">'</span>
<span class="n">order</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Fa</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">TA</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Gd</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Ex</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_31_0.png" />
</figure>

<p><strong>COMMENT</strong>: We found an order of the classes for BsmtQual that produces an increase in the sale price. We will use this to create a ordinal feature. Most of the data is contained within the “TA” and “Gd” groups.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BsmtCond</span><span class="sh">'</span>
<span class="n">order</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Po</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Fa</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">TA</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Gd</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_33_0.png" />
</figure>

<p><strong>COMMENT</strong>: We found an order of the classes for BsmtCond that produces an increase in the sale price. We will use this to create a ordinal feature. Most of the data is contained within the “TA” group.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BsmtExposure</span><span class="sh">'</span>
<span class="n">order</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">No</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Mn</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Av</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Gd</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_35_0.png" />
</figure>

<p><strong>COMMENT</strong>: We found an order of the classes for BsmtExposure that produces an increase in the sale price. We will use this to create a ordinal feature. Most of the data is contained within the “No” group.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BsmtFinType1</span><span class="sh">'</span>
<span class="n">order</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">Unf</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">LwQ</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Rec</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">BLQ</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">ALQ</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">GLQ</span><span class="sh">"</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_37_0.png" />
</figure>

<p><strong>COMMENT</strong>: From the above data, it seems that a house with an unfinished basement has more value than any other type of basement except for the ones with a good quality. Since the order of the categories is not obvious, we will create dummy features.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">featureName</span><span class="p">):</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span> <span class="o">=</span><span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>
    <span class="n">grid</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nc">GridSpec</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">wspace</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">hspace</span><span class="o">=</span><span class="mf">0.15</span><span class="p">)</span>
    
    <span class="c1"># plot
</span>    <span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">])</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">regplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">train</span><span class="p">[</span><span class="n">feature</span><span class="p">],</span> <span class="n">y</span><span class="o">=</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">],</span> <span class="n">fit_reg</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">g</span><span class="p">.</span><span class="n">axes</span><span class="p">.</span><span class="nf">set_xlim</span><span class="p">(</span><span class="mi">0</span><span class="p">,)</span>
    <span class="n">g</span><span class="p">.</span><span class="n">axes</span><span class="p">.</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,)</span>
    
    <span class="c1"># plot
</span>    <span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">:])</span>
    <span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">Neighborhood</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span> <span class="n">palette</span> <span class="o">=</span> <span class="n">mycols</span><span class="p">)</span>
    
    <span class="c1"># plot
</span>    <span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">]);</span>
    <span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">BldgType</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span> <span class="n">palette</span> <span class="o">=</span> <span class="n">mycols</span><span class="p">)</span>
    
    <span class="c1"># plot
</span>    <span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">]);</span>
    <span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">HouseStyle</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span> <span class="n">palette</span> <span class="o">=</span> <span class="n">mycols</span><span class="p">)</span>
    
    <span class="c1"># plot
</span>    <span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="n">grid</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]);</span>
    <span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">LotShape</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span> <span class="n">palette</span> <span class="o">=</span> <span class="n">mycols</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">featureName</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BsmtFinSF1</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BsmtFinSF1
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_40_1.png" />
</figure>

<p><strong>COMMENT</strong>:</p>
<ul>
  <li>From the first plot, we observe a positive correlation between the sale prince and the Type 1 finished sft.</li>
  <li>From the box plot, we notice that the distribution of the sale price as function of the Type 1 finished sft is strongly linked to the neighborhood.</li>
  <li>The last three boxplots also show a strong dependence to the architecture (Building type, house style, and lot shape).</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BsmtFinType2</span><span class="sh">'</span>
<span class="n">order</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Unf</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">BLQ</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">ALQ</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Rec</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">LwQ</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">GLQ</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_42_0.png" />
</figure>

<p><strong>COMMENT</strong>:</p>
<ul>
  <li>Most of the data is contained in the “Unfinished” group.</li>
  <li>The distribution of the data does not indicate that the sale price increases with the quality of the finish for the second basement.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BsmtFinSF2</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BsmtFinSF2
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_44_1.png" />
</figure>

<p><strong>COMMENT</strong>:</p>
<ul>
  <li>A large portion of the data is associated to the value 0.</li>
  <li>There is no clear correlation between the sale price and this feature.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BsmtUnfSF</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>BsmtUnfSF
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_46_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>This feature is positively correlated to the sale price. A fraction of the data is assigned a 0 value.</li>
  <li>The area of unfinished basement varies greatly from one neighborhood to the other.</li>
  <li>The same conclusion can be made when looking at the type of house.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">TotalBsmtSF</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>TotalBsmtSF
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_48_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>This feature is strongly positively correlated to the sale price. A small fraction of the data is assigned a 0 value.</li>
  <li>The area of unfinished basement varies greatly from one neighborhood to the other.</li>
  <li>However, the type of the house does not have a large impact on this feature.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">1stFlrSF</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1stFlrSF
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_50_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>This feature is strongly positively correlated to the sale price.</li>
  <li>The surface of the first floor varies greatly from one neighborhood to the other.</li>
  <li>However, the type of the house does not have a large impact on this feature.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">2ndFlrSF</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2ndFlrSF
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_52_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>This feature is strongly positively correlated to the sale price. Moreover, a large number of data points are assigned to the value 0. This can be explained because a large number of individual houses are only built with one floor.</li>
  <li>The surface of the second floor varies greatly from one neighborhood to the other.</li>
  <li>However, the type of the house does not have a large impact on this feature.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">LowQualFinSF</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LowQualFinSF
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_54_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Most of the data is assigned the value 0.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BedroomAbvGr</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_56_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Most houses have between two and four bedrooms above grade level.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">KitchenAbvGr</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_58_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Most houses have one single kitchen.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">KitchenQual</span><span class="sh">'</span>
<span class="n">order</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Fa</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">TA</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Gd</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Ex</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_60_0.png" />
</figure>

<p><strong>COMMENT</strong>: We found an order of the classes for KitchenQual that produces an increase in the sale price. We will use this to create a ordinal feature.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">TotRmsAbvGrd</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_62_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>There seems to be a positive correlation between the number of rooms and the sale prince.</li>
  <li>The extreme classes (2, 12, and 14) do not have enough data for to be reliable.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Fireplaces</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_64_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>There seems to be a positive correlation between the number of fireplaces and the sale prince.</li>
  <li>The extreme class (3) do not have enough data for to be reliable.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">FireplaceQu</span><span class="sh">'</span><span class="p">].</span><span class="nf">unique</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([nan, 'TA', 'Gd', 'Fa', 'Ex', 'Po'], dtype=object)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">FireplaceQu</span><span class="sh">'</span>
<span class="n">order</span> <span class="o">=</span> <span class="p">[</span><span class="sh">"</span><span class="s">Po</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Fa</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">TA</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Gd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Ex</span><span class="sh">"</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_67_0.png" />
</figure>

<p><strong>COMMENT</strong>: We found an order of the classes for FireplaceQu that produces an increase in the sale price. We will use this to create a ordinal feature.</p>

<p><strong>GrLivArea</strong></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">GrLivArea</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GrLivArea
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_70_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>This feature is strongly positively correlated to the sale price. Moreover, a large number of data points are assigned to the value 0. This can be explained because a large number of individual houses are only built with one floor.</li>
  <li>This feature varies greatly from one neighborhood to the other.</li>
  <li>However, the type of the house does not have a large impact on this feature.</li>
</ul>

<p><a id="Section_232"></a></p>
<h3 id="232-exterior">2.3.2 Exterior</h3>
<p>The following variables are assigned to the “Exterior” group.</p>
<ul>
  <li>MS SubClass (Nominal): Identifies the type of dwelling involved in the sale.</li>
  <li>Bldg Type (Nominal): Type of dwelling</li>
  <li>House Style (Nominal): Style of dwelling</li>
  <li>Overall Qual (Ordinal): Rates the overall material and finish of the house</li>
  <li>Overall Cond (Ordinal): Rates the overall condition of the house</li>
  <li>Year Built (Discrete): Original construction date</li>
  <li>Year Remod/Add (Discrete): Remodel date (same as construction date if no remodeling or additions)</li>
  <li>Foundation (Nominal): Type of foundation</li>
  <li>Functional (Ordinal): Home functionality (Assume typical unless deductions are warranted)</li>
  <li>Roof Style (Nominal): Type of roof</li>
  <li>Roof Matl (Nominal): Roof material</li>
  <li>Exterior 1 (Nominal): Exterior covering on house</li>
  <li>Exterior 2 (Nominal): Exterior covering on house (if more than one material)</li>
  <li>Mas Vnr Type (Nominal): Masonry veneer type</li>
  <li>Mas Vnr Area (Continuous): Masonry veneer area in square feet</li>
  <li>Exter Qual (Ordinal): Evaluates the quality of the material on the exterior</li>
  <li>Exter Cond (Ordinal): Evaluates the present condition of the material on the exterior</li>
  <li>Garage Type (Nominal): Garage location</li>
  <li>Garage Yr Blt (Discrete): Year garage was built</li>
  <li>Garage Finish (Ordinal)	: Interior finish of the garage</li>
  <li>Garage Cars (Discrete): Size of garage in car capacity</li>
  <li>Garage Area (Continuous): Size of garage in square feet</li>
  <li>Garage Qual (Ordinal): Garage quality</li>
  <li>Garage Cond (Ordinal): Garage condition</li>
  <li>Wood Deck SF (Continuous): Wood deck area in square feet</li>
  <li>Open Porch SF (Continuous): Open porch area in square feet</li>
  <li>Enclosed Porch (Continuous): Enclosed porch area in square feet</li>
  <li>3-Ssn Porch (Continuous): Three season porch area in square feet</li>
  <li>Screen Porch (Continuous): Screen porch area in square feet</li>
  <li>Pool Area (Continuous): Pool area in square feet</li>
  <li>Pool QC (Ordinal): Pool quality</li>
  <li>Fence (Ordinal): Fence quality</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">MSSubClass</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_73_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Although this feature contains numerical value, it is meant to describe building style. We therefore turn the data into strings.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">BldgType</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_75_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The feature is transformed using dummies.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">HouseStyle</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_77_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The first two categories present a large number of extremely high values.</li>
  <li>This feature is turned into a set of dummy variables.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">OverallQual</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_79_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>As expected, the overall quality is strongly positively correlated to the sale price.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">OverallCond</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_81_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>As expected, the overall condition is correlated to the sale price. However, the class corresponding to a value of 5 has a higher meadian sale price than the class corresponding to the value 9.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">matplotlib.ticker</span> <span class="k">as</span> <span class="n">ticker</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_date_feature</span><span class="p">(</span><span class="n">featureName</span><span class="p">,</span> <span class="n">stepsize</span><span class="o">=</span><span class="mi">5</span><span class="p">):</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">axarr</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">figsize</span> <span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">20</span><span class="p">))</span>
    
    <span class="c1"># plot
</span>    <span class="c1">#plt.subplot(1,4,1)
</span>    <span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>  
    
    <span class="c1"># plot
</span>    <span class="c1">#plt.subplot(1,4,3)
</span>    <span class="n">plot</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">swarmplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
    
    <span class="c1"># purpose
</span>    <span class="c1">#plt.subplot(1,4,4)
</span>    <span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">].</span><span class="nf">max</span><span class="p">()</span><span class="o">*</span><span class="mf">1.05</span><span class="p">)</span>
    <span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">set_xticklabels</span><span class="p">(</span><span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">(),</span> <span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
    
    <span class="k">for</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">():</span>
        <span class="n">label</span><span class="p">.</span><span class="nf">set_visible</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">label</span><span class="p">.</span><span class="n">_text</span><span class="p">)</span> <span class="o">%</span> <span class="n">stepsize</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">():</span>
        <span class="n">label</span><span class="p">.</span><span class="nf">set_visible</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">label</span><span class="p">.</span><span class="n">_text</span><span class="p">)</span> <span class="o">%</span> <span class="n">stepsize</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">get_xticklabels</span><span class="p">():</span>
        <span class="n">label</span><span class="p">.</span><span class="nf">set_visible</span><span class="p">(</span><span class="nf">float</span><span class="p">(</span><span class="n">label</span><span class="p">.</span><span class="n">_text</span><span class="p">)</span> <span class="o">%</span> <span class="n">stepsize</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="n">plt</span><span class="p">.</span><span class="nf">suptitle</span><span class="p">(</span><span class="n">featureName</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="nf">tight_layout</span><span class="p">();</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">YearRemodAdd</span><span class="sh">'</span>
<span class="nf">plot_date_feature</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_85_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The newer the remodeling the higher the sale price.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">YearBuilt</span><span class="sh">'</span>
<span class="nf">plot_date_feature</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">stepsize</span><span class="o">=</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_87_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The general trend seems to depict a higher sale price for newer constructions.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Foundation</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_89_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The data is mostly gathered into the first three classes.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Functional</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_91_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Most of the data is stored under the “Typ” class.</li>
  <li>From the information about the dataset, we can identify an order with which the classes can be organized. The “Typ” class corresponds to the highest rank within this ordinal feature.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">RoofStyle</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_93_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Most of the data is stored under the “Gable” and “Hip” classes.</li>
  <li>We create dummy variables to store the data.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">RoofMatl</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_95_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Almost the entire dataset is stored under “CompShg” class.</li>
</ul>

<p><strong>Exterior1st and Exterior2nd</strong>
After inspection, it appears that most of the houses have the same class for the exterior features. We will use this to minimize the redundancy of the stored information.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Exterior1st</span><span class="sh">'</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">axarr</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">figsize</span> <span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span><span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># plot
</span><span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="c1"># plot
</span><span class="n">plot</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">swarmplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>

<span class="c1"># purpose
</span><span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
<span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">].</span><span class="nf">max</span><span class="p">()</span><span class="o">*</span><span class="mf">1.05</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_98_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Exterior2nd</span><span class="sh">'</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">axarr</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">figsize</span> <span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span><span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># plot
</span><span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>

<span class="c1"># plot
</span><span class="n">plot</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">swarmplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>

<span class="c1"># purpose
</span><span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
<span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">].</span><span class="nf">max</span><span class="p">()</span><span class="o">*</span><span class="mf">1.05</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_99_0.png" />
</figure>

<p><strong>COMMMENT</strong></p>
<ul>
  <li>Most records have the save value for both exterior features.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">MasVnrType</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_101_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Each class leads to a different average sale price.</li>
  <li>Most of the data is stored in the first three classes.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">MasVnrArea</span><span class="sh">'</span><span class="p">].</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">count</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1460
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">MasVnrArea</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MasVnrArea
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_104_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>There is no clear correlation between this feature and the sale price.</li>
  <li>Most of the data is assigned a value of 0.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">ExterQual</span><span class="sh">'</span>
<span class="n">order</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Fa</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">TA</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Gd</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Ex</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_106_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>This is an ordinal feature. The classes are arrange to create an increase in sale price from one feature to another.</li>
  <li>Most of the data is stored in the two central classes.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">ExterCond</span><span class="sh">'</span>
<span class="n">order</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Po</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Fa</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">TA</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Gd</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Ex</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_108_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>This is an ordinal feature but the sale price does not reflect the feature order.</li>
  <li>Most of the data is stored in the two central classes.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">GarageType</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_110_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>There is no real order within this categorical feature.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">GarageYrBlt</span><span class="sh">'</span>
<span class="nf">plot_date_feature</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_112_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>For recent constructions, it seems that there is an upward trend. For older constructions, the average sale price seems to be fairly constant.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">GarageFinish</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_114_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The data is evenly distributed amongst the three classes.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">GarageCars</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_116_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>There is a clear increase in sale price from class 0 to class 3. However, class 4 does not follow this trend. This can be explained by the low number of records with 4 car spaces.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">GarageArea</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GarageArea
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_118_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The sale price is strongly correlated to this feature (positive correlation).</li>
  <li>There is a high variation of this feature when looking at the neighborhoods.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">GarageQual</span><span class="sh">'</span>
<span class="n">order</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">Po</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Fa</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">TA</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Gd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Ex</span><span class="sh">"</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_120_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>We found a sequence that leads to an increase in sale price. Only the Ex feature does not really match the ranking but the small number of Ex records is the reason for such a behavior.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">GarageCond</span><span class="sh">'</span>
<span class="n">order</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">Po</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Fa</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">TA</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Gd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Ex</span><span class="sh">"</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_122_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>We found a sequence that leads to an increase in sale price. Only the Ex feature does not really match the ranking but the small number of Ex records is the reason for such a behavior.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">WoodDeckSF</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>WoodDeckSF
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_124_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>There is a good positive correlation between the sale price and this feature..</li>
  <li>The neighborhood and location feature have a great impact on this feature.</li>
  <li>A large number of data points are assigned the value 0.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">PoolArea</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PoolArea
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_126_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Most of the data is stored as 0. This feature may be dropped.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Fence</span><span class="sh">'</span>
<span class="n">order</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">MnWw</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">GdWo</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">MnPrv</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">GdPrv</span><span class="sh">'</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_128_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The data is mostly stored in a single class.</li>
  <li>It is possibly to arrange the classes to create an ordinal sequence.</li>
</ul>

<p><a id="Section_233"></a></p>
<h3 id="233-miscellaneous">2.3.3. Miscellaneous</h3>
<p>The following variables are assigned to the “Miscellaneous” group.</p>
<ul>
  <li>Order (Discrete): Observation number</li>
  <li>PID (Nominal): Parcel identification number  - can be used with city web site for parcel review.</li>
  <li>MS Zoning (Nominal): Identifies the general zoning classification of the sale.</li>
  <li>Lot Frontage (Continuous): Linear feet of street connected to property</li>
  <li>Lot Area (Continuous): Lot size in square feet</li>
  <li>Street (Nominal): Type of road access to property</li>
  <li>Alley (Nominal): Type of alley access to property</li>
  <li>Lot Shape (Ordinal): General shape of property</li>
  <li>Land Contour (Nominal): Flatness of the property</li>
  <li>Utilities (Ordinal): Type of utilities available</li>
  <li>Lot Config (Nominal): Lot configuration</li>
  <li>Land Slope (Ordinal): Slope of property</li>
  <li>Neighborhood (Nominal): Physical locations within Ames city limits (map available)</li>
  <li>Condition 1 (Nominal): Proximity to various conditions</li>
  <li>Condition 2 (Nominal): Proximity to various conditions (if more than one is present)</li>
  <li>Heating	(Nominal): Type of heating</li>
  <li>HeatingQC (Ordinal): Heating quality and condition</li>
  <li>Central Air (Nominal): Central air conditioning</li>
  <li>Electrical (Ordinal): Electrical system</li>
  <li>Paved Drive (Ordinal): Paved driveway</li>
  <li>Misc Feature (Nominal): Miscellaneous feature not covered in other categories</li>
  <li>Misc Val (Continuous): $$Value of miscellaneous feature</li>
  <li>Mo Sold (Discrete): Month Sold (MM)</li>
  <li>Yr Sold (Discrete): Year Sold (YYYY)</li>
  <li>Sale Type (Nominal): Type of sale</li>
  <li>Sale Condition (Nominal): Condition of sale</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">MSZoning</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_131_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The data is mostly contained is a single class.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Neighborhood</span><span class="sh">'</span>
<span class="n">order</span><span class="o">=</span><span class="bp">None</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">axarr</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">figsize</span> <span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span><span class="n">sharey</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># plot
</span><span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">order</span><span class="o">=</span><span class="n">order</span><span class="p">)</span>

<span class="c1"># plot
</span><span class="n">plot</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">swarmplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">order</span><span class="o">=</span><span class="n">order</span><span class="p">)</span>
<span class="n">axarr</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>

<span class="c1"># purpose
</span><span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="n">feature</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">,</span><span class="n">data</span><span class="o">=</span><span class="n">train</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="n">order</span><span class="o">=</span><span class="n">order</span><span class="p">)</span>
<span class="n">axarr</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">""</span><span class="p">)</span>
<span class="n">axarr</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">].</span><span class="nf">max</span><span class="p">()</span><span class="o">*</span><span class="mf">1.05</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_133_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The location is obviously a key feature when predicting the price of an estate.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Condition1</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_135_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Condition2</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_136_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>For both features, the data is concentrated into a single class.</li>
  <li>The distribution between the two features is similar.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">LotFrontage</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LotFrontage
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_138_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The original set presents a large number of null values.</li>
  <li>The neighborhoods and the house type do not seem to play a significant role for this feature.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">LotArea</span><span class="sh">'</span>
<span class="nf">plot_num_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LotArea
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_140_1.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>As expected, this feature is strongly positively correlated to the sale price.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">LotShape</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_142_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The data is concentrated into two classes.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">LandContour</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_144_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The data is concentrated into a single class.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">LotConfig</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_146_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The data is concentrated into three classes.</li>
  <li>FR2 and FR3 are merged.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">LandSlope</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_148_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>This feature does not have a clear impact on the sale price.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Street</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_150_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The vast majority of the data is stored under the same class.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Alley</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_152_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>There is a slight difference in the sale price between the two classes.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">PavedDrive</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_154_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Most of the data is contained in the Y class.</li>
  <li>There is a slight difference in the sale price between the three classes.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Heating</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_156_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The vast majority of the data is contained in the GasA class.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">HeatingQC</span><span class="sh">'</span>
<span class="n">order</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">Po</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Fa</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">TA</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Gd</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">Ex</span><span class="sh">"</span><span class="p">]</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">,</span> <span class="n">order</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_158_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>We were able to find a order that corresponds to an increase in sale price.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">CentralAir</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_160_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The data is mostly stored under the “Y” class. Since this feature is a boolean feature, we simply map “Y” to the value 1 and “No” to the value 0.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Utilities</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_162_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The utilities feature can be dropped since the data is mostly assigned to a single class.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">Electrical</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_164_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>As seen before, the date is mostly contained in a single class.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">MiscFeature</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_166_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Only a small fraction of the dataset has a MiscFeature assigned.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">MoSold</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_168_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>The data is mostly homogeneously distributed although a few months (summer) are more proned to sales.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">YrSold</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_170_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>It does not appear to be a large correlation between the year of the sale and the selling price.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">SaleType</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_172_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Most of the sales are contained in the “WD” features.</li>
  <li>The “New” feature has an higher average sale price.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">feature</span> <span class="o">=</span> <span class="sh">'</span><span class="s">SaleCondition</span><span class="sh">'</span>
<span class="nf">plot_cat_feature_eda</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_174_0.png" />
</figure>

<p><strong>COMMENT</strong></p>
<ul>
  <li>Most of the data is contained in the “Normal” class.</li>
  <li>The sale condition seems to have a significant impact on the sale price as the sale price for each class differs from the ones of the other classes.</li>
</ul>

<hr />
<p><a id="Section_3"></a></p>
<h2 id="3-pre-processing">3. Pre-Processing</h2>

<p>The first step consists of isolating the target label from the dataset.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># clean import
</span><span class="n">train</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./data/train.csv</span><span class="sh">'</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">'</span><span class="s">./data/test.csv</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># isolate ID's
</span><span class="n">test_id</span> <span class="o">=</span> <span class="n">test</span><span class="p">[</span><span class="sh">'</span><span class="s">Id</span><span class="sh">'</span><span class="p">]</span>
<span class="n">train_id</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">Id</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># remove ID from sets
</span><span class="n">train</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">Id</span><span class="sh">'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">test</span> <span class="o">=</span> <span class="n">test</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">Id</span><span class="sh">'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Train:</span><span class="sh">"</span><span class="p">,</span> <span class="n">train</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Test</span><span class="sh">"</span><span class="p">,</span> <span class="n">test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Train: (1460, 80)
Test (1459, 79)
</code></pre></div></div>

<p>We have previously seen that the sale price was not normally distributed and that it required a transformation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">log1p</span><span class="p">(</span><span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Deleting outliers
</span><span class="n">train</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="n">train</span><span class="p">.</span><span class="n">GrLivArea</span> <span class="o">&lt;</span> <span class="mi">4500</span><span class="p">]</span>
<span class="n">train_end</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">train</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">y_train</span> <span class="o">=</span> <span class="n">train</span><span class="p">[</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">]</span>
<span class="n">train</span> <span class="o">=</span> <span class="n">train</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">SalePrice</span><span class="sh">'</span><span class="p">],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">full_set</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">concat</span><span class="p">([</span><span class="n">train</span><span class="p">,</span> <span class="n">test</span><span class="p">]).</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Shape of the entire dataset is {}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">full_set</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Shape of the entire dataset is (2917, 79)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot new distribution after transformation
</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span> <span class="o">=</span> <span class="n">norm</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">distplot</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">fit</span><span class="o">=</span><span class="n">norm</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">legend</span><span class="p">([</span><span class="sh">'</span><span class="s">Normal distribution ($$\mu=$$ {:.2f} and $$\sigma=$$ {:.2f} )</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">mu</span><span class="p">,</span> <span class="n">sigma</span><span class="p">)],</span> <span class="n">loc</span> <span class="o">=</span> <span class="sh">'</span><span class="s">best</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Frequency</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Histogram of SalePrice</span><span class="sh">'</span><span class="p">);</span>

<span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">()</span>
<span class="n">res</span> <span class="o">=</span> <span class="nf">probplot</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">plot</span><span class="o">=</span><span class="n">plt</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_183_0.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_183_1.png" />
</figure>

<p>As shown above, the transformed label has a distribution closer to the normal distribution. The tails of the sale price features are still larger but at least, we have a better fit for our model.</p>

<p>Identify the list of features with missing values:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">nulls</span> <span class="o">=</span> <span class="n">full_set</span><span class="p">.</span><span class="nf">isnull</span><span class="p">().</span><span class="nf">sum</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">nulls</span><span class="p">[</span><span class="n">nulls</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">].</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PoolQC          2908
MiscFeature     2812
Alley           2719
Fence           2346
FireplaceQu     1420
LotFrontage      486
GarageFinish     159
GarageYrBlt      159
GarageQual       159
GarageCond       159
GarageType       157
BsmtExposure      82
BsmtCond          82
BsmtQual          81
BsmtFinType2      80
BsmtFinType1      79
MasVnrType        24
MasVnrArea        23
MSZoning           4
BsmtFullBath       2
BsmtHalfBath       2
Utilities          2
Functional         2
Exterior2nd        1
Exterior1st        1
SaleType           1
BsmtFinSF1         1
BsmtFinSF2         1
BsmtUnfSF          1
Electrical         1
KitchenQual        1
GarageCars         1
GarageArea         1
TotalBsmtSF        1
dtype: int64
</code></pre></div></div>

<p>We previously saw that our features have distributions that cannot be approximated by the normal distribution. We compute the skew of each feature to see which ones can be corrected.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Isolate numerical feature names
</span><span class="n">numerical</span> <span class="o">=</span> <span class="n">full_set</span><span class="p">.</span><span class="n">dtypes</span><span class="p">[</span><span class="n">full_set</span><span class="p">.</span><span class="n">dtypes</span> <span class="o">!=</span> <span class="sh">'</span><span class="s">object</span><span class="sh">'</span><span class="p">].</span><span class="n">index</span>

<span class="c1">#compute skew and sort
</span><span class="n">skewness</span> <span class="o">=</span> <span class="n">full_set</span><span class="p">[</span><span class="n">numerical</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nf">skew</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nf">dropna</span><span class="p">())).</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">skewness</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>MiscVal          21.939672
PoolArea         17.688664
LotArea          13.109495
LowQualFinSF     12.084539
3SsnPorch        11.372080
KitchenAbvGr      4.300550
BsmtFinSF2        4.143683
EnclosedPorch     4.002344
ScreenPorch       3.945101
BsmtHalfBath      3.928397
MasVnrArea        2.609358
OpenPorchSF       2.529358
WoodDeckSF        1.844792
MSSubClass        1.375131
1stFlrSF          1.257286
LotFrontage       1.121322
GrLivArea         1.068750
BsmtFinSF1        0.980283
BsmtUnfSF         0.919699
2ndFlrSF          0.861556
TotRmsAbvGrd      0.749232
Fireplaces        0.725278
HalfBath          0.696666
TotalBsmtSF       0.676200
BsmtFullBath      0.621322
OverallCond       0.569314
BedroomAbvGr      0.326568
GarageArea        0.218752
MoSold            0.197345
OverallQual       0.189591
FullBath          0.165514
YrSold            0.131996
GarageCars       -0.217977
GarageYrBlt      -0.380955
YearRemodAdd     -0.450134
YearBuilt        -0.599194
dtype: float64
</code></pre></div></div>

<p>The Box-Cox transformation can be used to adjust feature with high skewness. Several values of the parameter lambda are tested and a threshold of 0.5 is used to determine which feature needs to be transformed.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">FeatureEngineering</span><span class="p">(</span><span class="n">input_df</span><span class="p">,</span> <span class="n">train_df</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mf">0.50</span><span class="p">):</span>
    
    <span class="n">df</span> <span class="o">=</span> <span class="n">input_df</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
    
    <span class="c1"># Change data-type
</span>    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">MSSubClass</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">MSSubClass</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">YrSold</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">YrSold</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">MoSold</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">MoSold</span><span class="sh">'</span><span class="p">].</span><span class="nf">astype</span><span class="p">(</span><span class="nb">str</span><span class="p">)</span>
    
    <span class="c1"># Fill empty records with generic class
</span>    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Functional</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Functional</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">'</span><span class="s">Typ</span><span class="sh">'</span><span class="p">)</span> 
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Electrical</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Electrical</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">"</span><span class="s">SBrkr</span><span class="sh">"</span><span class="p">)</span> 
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">KitchenQual</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">KitchenQual</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">"</span><span class="s">TA</span><span class="sh">"</span><span class="p">)</span> 
    
    <span class="c1"># Fill empty records with new None class
</span>    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">PoolQC</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">PoolQC</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">"</span><span class="s">None</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageType</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageType</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">"</span><span class="s">None</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageFinish</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageFinish</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">"</span><span class="s">None</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageQual</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageQual</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">"</span><span class="s">None</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageCond</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageCond</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">"</span><span class="s">None</span><span class="sh">"</span><span class="p">)</span>
    
    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">BsmtQual</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">BsmtQual</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">"</span><span class="s">None</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">BsmtCond</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">BsmtCond</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">"</span><span class="s">None</span><span class="sh">"</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">BsmtExposure</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">BsmtExposure</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">"</span><span class="s">None</span><span class="sh">"</span><span class="p">)</span>    
    
    <span class="c1"># Fill records with mode
</span>    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Exterior1st</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Exterior1st</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Exterior1st</span><span class="sh">'</span><span class="p">].</span><span class="nf">mode</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span> 
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Exterior2nd</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Exterior2nd</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Exterior2nd</span><span class="sh">'</span><span class="p">].</span><span class="nf">mode</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">SaleType</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">SaleType</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">SaleType</span><span class="sh">'</span><span class="p">].</span><span class="nf">mode</span><span class="p">()[</span><span class="mi">0</span><span class="p">])</span>
    
    <span class="c1"># Fill numerical feature with 0
</span>    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageYrBlt</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageYrBlt</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageArea</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageArea</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageCars</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">"</span><span class="s">GarageCars</span><span class="sh">"</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    
    <span class="c1"># Fill connected features using groups
</span>    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">MSZoning</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">MSSubClass</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">MSZoning</span><span class="sh">'</span><span class="p">].</span><span class="nf">transform</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nf">mode</span><span class="p">()[</span><span class="mi">0</span><span class="p">]))</span>
           
    <span class="c1"># Process remaining features
</span>    <span class="n">objects</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">dtype</span> <span class="o">==</span> <span class="nb">object</span><span class="p">:</span>
            <span class="n">objects</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
    <span class="n">df</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">objects</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="sh">'</span><span class="s">None</span><span class="sh">'</span><span class="p">))</span> 
    
    <span class="c1"># Fill connected features using groups
</span>    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">LotFrontage</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">Neighborhood</span><span class="sh">'</span><span class="p">)[</span><span class="sh">'</span><span class="s">LotFrontage</span><span class="sh">'</span><span class="p">].</span><span class="nf">transform</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="nf">fillna</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nf">median</span><span class="p">()))</span>
    
    <span class="c1"># Process remaining features
</span>    <span class="n">numeric_dtypes</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">int16</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">int32</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">int64</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">float16</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">float32</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">float64</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">numeric_features</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">dtype</span> <span class="ow">in</span> <span class="n">numeric_dtypes</span><span class="p">:</span>
            <span class="n">numeric_features</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>   
    <span class="n">df</span><span class="p">.</span><span class="nf">update</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">numeric_features</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span> 
    
    <span class="c1"># drop features
</span>    <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">drop</span><span class="p">([</span><span class="sh">'</span><span class="s">Utilities</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Street</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">PoolQC</span><span class="sh">'</span><span class="p">,],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        
    <span class="c1"># Use log of data to reduce the impact of outliers
</span>    <span class="n">continuous_features</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">].</span><span class="n">dtype</span> <span class="ow">in</span> <span class="n">numeric_dtypes</span><span class="p">:</span>
            <span class="n">continuous_features</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">col</span><span class="p">)</span>
    
    <span class="n">categorical_features</span> <span class="o">=</span> <span class="p">[</span><span class="n">col</span> <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">columns</span> <span class="k">if</span> <span class="n">col</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">continuous_features</span><span class="p">]</span>
    
    <span class="c1"># Skewness correction
</span>    <span class="n">skewness</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">continuous_features</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="nf">skew</span><span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="nf">dropna</span><span class="p">())).</span><span class="nf">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">boxcox_features</span> <span class="o">=</span> <span class="n">skewness</span><span class="p">[</span><span class="n">skewness</span><span class="o">&gt;</span><span class="n">threshold</span><span class="p">].</span><span class="n">index</span>
    
    <span class="k">for</span> <span class="n">col</span> <span class="ow">in</span> <span class="n">boxcox_features</span><span class="p">:</span>
        <span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">=</span> <span class="nf">boxcox1p</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">],</span> <span class="nf">boxcox_normmax</span><span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="n">col</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>
                
    <span class="c1"># New features
</span>    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">TotalSF</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">TotalBsmtSF</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">1stFlrSF</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">2ndFlrSF</span><span class="sh">'</span><span class="p">]</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">YrBltAndRemod</span><span class="sh">'</span><span class="p">]</span><span class="o">=</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">YearBuilt</span><span class="sh">'</span><span class="p">]</span><span class="o">+</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">YearRemodAdd</span><span class="sh">'</span><span class="p">]</span>
    
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Total_sqr_footage</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">BsmtFinSF1</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">BsmtFinSF2</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span>
                                 <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">1stFlrSF</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">2ndFlrSF</span><span class="sh">'</span><span class="p">])</span>
    
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Total_Bathrooms</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">FullBath</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">HalfBath</span><span class="sh">'</span><span class="p">])</span> <span class="o">+</span>
                               <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">BsmtFullBath</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="p">(</span><span class="mf">0.5</span> <span class="o">*</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">BsmtHalfBath</span><span class="sh">'</span><span class="p">]))</span>
    
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Total_porch_sf</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">OpenPorchSF</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">3SsnPorch</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span>
                              <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">EnclosedPorch</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">ScreenPorch</span><span class="sh">'</span><span class="p">]</span> <span class="o">+</span>
                              <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">WoodDeckSF</span><span class="sh">'</span><span class="p">])</span>
    
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">haspool</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">PoolArea</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">has2ndfloor</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">2ndFlrSF</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">hasgarage</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">GarageArea</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">hasbsmt</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">TotalBsmtSF</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">hasfireplace</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">Fireplaces</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mi">1</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="k">else</span> <span class="mi">0</span><span class="p">)</span>
        
    <span class="c1"># generate dummy features
</span>    <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">get_dummies</span><span class="p">(</span><span class="n">df</span><span class="p">).</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    
    <span class="c1"># filtering data by removing columns made almost entirely of one value
</span>    <span class="n">overfit</span> <span class="o">=</span> <span class="p">[]</span>
    
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">df</span><span class="p">.</span><span class="n">columns</span><span class="p">:</span>
        <span class="n">counts</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="nf">value_counts</span><span class="p">()</span>
        <span class="n">most_common</span> <span class="o">=</span> <span class="n">counts</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">most_common</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span> <span class="o">*</span> <span class="mi">100</span> <span class="o">&gt;</span> <span class="mf">99.94</span><span class="p">:</span>
            <span class="n">overfit</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    
    <span class="n">overfit</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="sh">'</span><span class="s">MSZoning_C (all)</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">overfit</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
        
    <span class="k">return</span> <span class="n">df</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># transform entire dataset
</span><span class="n">transformed_full_set</span> <span class="o">=</span> <span class="nc">FeatureEngineering</span><span class="p">(</span><span class="n">full_set</span><span class="p">,</span> <span class="n">train</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">transformed_full_set</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(2917, 321)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Split full dataset using train and test set
</span><span class="n">train</span> <span class="o">=</span> <span class="n">transformed_full_set</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:</span><span class="n">train_end</span><span class="p">,</span> <span class="p">:]</span>
<span class="n">test</span>  <span class="o">=</span> <span class="n">transformed_full_set</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="n">train_end</span><span class="p">:,</span> <span class="p">:]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">train</span><span class="sh">'</span><span class="p">,</span> <span class="n">train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="sh">'</span><span class="s">y_train</span><span class="sh">'</span><span class="p">,</span> <span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">,</span><span class="n">test</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>train (1458, 321) y_train (1458,) test (1459, 321)
</code></pre></div></div>

<p>The training and test sets are ready to be used to train our models.</p>

<hr />
<p><a id="Section_4"></a></p>
<h2 id="4-models">4. Models</h2>

<p><a id="Section_41"></a></p>
<h3 id="41-benchmarking">4.1. Benchmarking</h3>

<p>The prediction of the sale price is a regression problem. Our strategy will consists of performing a cross-validation on the train model (using a K-fold approach). The initial step consists of training a set of regression models (using default hyper-parameters). The objectives of this first training step are to select and identify models with good performances. These models can then be further trained. <br />
The following models are used during the first training phase:
Ridge Regression</p>
<ul>
  <li>Lasso Regression</li>
  <li>ElasticNet Regression</li>
  <li>KNN Reggressor</li>
  <li>Bayesian Regressor</li>
  <li>Decision Tree</li>
  <li>SVM</li>
  <li>Gradient Boosting</li>
  <li>ExtraTree</li>
  <li>Random Forest</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># scaler
</span><span class="n">robust</span> <span class="o">=</span> <span class="nc">RobustScaler</span><span class="p">()</span>

<span class="c1"># scale training set
</span><span class="n">train_normalized</span> <span class="o">=</span> <span class="n">robust</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">train</span><span class="p">)</span>

<span class="c1"># scalre test set
</span><span class="n">test_normalized</span> <span class="o">=</span> <span class="n">robust</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">test</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_normalized</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1458, 321)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">models</span> <span class="o">=</span> <span class="p">[</span><span class="nc">Lasso</span><span class="p">(),</span> <span class="nc">ElasticNet</span><span class="p">(),</span> <span class="nc">KNeighborsRegressor</span><span class="p">(),</span>
          <span class="nc">BayesianRidge</span><span class="p">(),</span> <span class="nc">DecisionTreeRegressor</span><span class="p">(),</span> <span class="nc">SVR</span><span class="p">(),</span>
          <span class="nc">GradientBoostingRegressor</span><span class="p">(),</span> <span class="nc">ExtraTreesRegressor</span><span class="p">(),</span> <span class="nc">RandomForestRegressor</span><span class="p">(),</span>
          <span class="nc">LGBMRegressor</span><span class="p">(),</span> <span class="nc">XGBRegressor</span><span class="p">(</span><span class="n">objective</span><span class="o">=</span><span class="sh">'</span><span class="s">reg:squarederror</span><span class="sh">'</span><span class="p">)]</span>

<span class="n">kfolds</span> <span class="o">=</span> <span class="nc">KFold</span><span class="p">(</span><span class="n">n_splits</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>

<span class="c1"># results summary
</span><span class="n">summary_cols</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Parameters (Pre)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">CV_results</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">CV_mean</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">CV_std</span><span class="sh">'</span><span class="p">]</span>
<span class="n">summary_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">summary_cols</span><span class="p">)</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">algo</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">models</span><span class="p">):</span>
    
    <span class="c1"># identify the model
</span>    <span class="n">name</span> <span class="o">=</span> <span class="n">algo</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span>
    <span class="n">summary_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">name</span>
    <span class="n">summary_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="sh">'</span><span class="s">Parameters (Pre)</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">algo</span><span class="p">.</span><span class="nf">get_params</span><span class="p">())</span>
      
    <span class="c1"># cross-valudation
</span>    <span class="n">scores</span> <span class="o">=</span> <span class="nf">cross_val_score</span><span class="p">(</span><span class="n">algo</span><span class="p">,</span> <span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">scoring</span><span class="o">=</span><span class="sh">'</span><span class="s">neg_mean_squared_error</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># compute metrics   
</span>    <span class="n">summary_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="sh">'</span><span class="s">CV_results</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="sh">"</span><span class="s">RMSE: %0.2f (+/- %0.3f)</span><span class="sh">"</span> <span class="o">%</span> <span class="p">(</span><span class="n">scores</span><span class="p">.</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">scores</span><span class="p">.</span><span class="nf">std</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span>
    <span class="n">summary_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="sh">'</span><span class="s">CV_mean</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="o">-</span><span class="n">scores</span><span class="p">.</span><span class="nf">mean</span><span class="p">()</span>
    <span class="n">summary_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">idx</span><span class="p">,</span><span class="sh">'</span><span class="s">CV_std</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">scores</span><span class="p">.</span><span class="nf">std</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">algo</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">,</span> <span class="sh">'</span><span class="s">trained...</span><span class="sh">'</span><span class="p">)</span>

<span class="c1">#summary_df['Training accuracy (Pre)'] = summary_df['Training accuracy (Pre)'].apply(lambda x: round(x, decimals))
#summary_df['Testing accuracy (Pre)'] = summary_df['Testing accuracy (Pre)'].apply(lambda x: round(x, decimals))
</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n\n</span><span class="s">Summary without hyper-parameter tuning:</span><span class="sh">"</span><span class="p">)</span>

<span class="n">summary_df</span> <span class="o">=</span> <span class="n">summary_df</span><span class="p">.</span><span class="nf">sort_values</span><span class="p">([</span><span class="sh">'</span><span class="s">CV_mean</span><span class="sh">'</span><span class="p">])</span>
<span class="n">summary_df</span><span class="p">.</span><span class="nf">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Lasso trained...
ElasticNet trained...
KNeighborsRegressor trained...
BayesianRidge trained...
DecisionTreeRegressor trained...
SVR trained...
GradientBoostingRegressor trained...
ExtraTreesRegressor trained...
RandomForestRegressor trained...
LGBMRegressor trained...
XGBRegressor trained...


Summary without hyper-parameter tuning:
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Model</th>
      <th>Parameters (Pre)</th>
      <th>CV_results</th>
      <th>CV_mean</th>
      <th>CV_std</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>BayesianRidge</td>
      <td>{'alpha_1': 1e-06, 'alpha_2': 1e-06, 'compute_...</td>
      <td>RMSE: -0.01 (+/- 0.003)</td>
      <td>0.0128691</td>
      <td>0.00283413</td>
    </tr>
    <tr>
      <th>1</th>
      <td>XGBRegressor</td>
      <td>{'base_score': 0.5, 'booster': 'gbtree', 'cols...</td>
      <td>RMSE: -0.02 (+/- 0.003)</td>
      <td>0.015208</td>
      <td>0.00251774</td>
    </tr>
    <tr>
      <th>2</th>
      <td>GradientBoostingRegressor</td>
      <td>{'alpha': 0.9, 'criterion': 'friedman_mse', 'i...</td>
      <td>RMSE: -0.02 (+/- 0.002)</td>
      <td>0.0153384</td>
      <td>0.00219738</td>
    </tr>
    <tr>
      <th>3</th>
      <td>SVR</td>
      <td>{'C': 1.0, 'cache_size': 200, 'coef0': 0.0, 'd...</td>
      <td>RMSE: -0.02 (+/- 0.004)</td>
      <td>0.0158596</td>
      <td>0.00404555</td>
    </tr>
    <tr>
      <th>4</th>
      <td>LGBMRegressor</td>
      <td>{'boosting_type': 'gbdt', 'class_weight': None...</td>
      <td>RMSE: -0.02 (+/- 0.003)</td>
      <td>0.0158715</td>
      <td>0.00270137</td>
    </tr>
    <tr>
      <th>5</th>
      <td>ExtraTreesRegressor</td>
      <td>{'bootstrap': False, 'criterion': 'mse', 'max_...</td>
      <td>RMSE: -0.02 (+/- 0.006)</td>
      <td>0.0214468</td>
      <td>0.00565928</td>
    </tr>
    <tr>
      <th>6</th>
      <td>RandomForestRegressor</td>
      <td>{'bootstrap': True, 'criterion': 'mse', 'max_d...</td>
      <td>RMSE: -0.02 (+/- 0.004)</td>
      <td>0.0219718</td>
      <td>0.00445915</td>
    </tr>
    <tr>
      <th>7</th>
      <td>KNeighborsRegressor</td>
      <td>{'algorithm': 'auto', 'leaf_size': 30, 'metric...</td>
      <td>RMSE: -0.03 (+/- 0.005)</td>
      <td>0.0333655</td>
      <td>0.00541219</td>
    </tr>
    <tr>
      <th>8</th>
      <td>DecisionTreeRegressor</td>
      <td>{'criterion': 'mse', 'max_depth': None, 'max_f...</td>
      <td>RMSE: -0.04 (+/- 0.010)</td>
      <td>0.038983</td>
      <td>0.0100607</td>
    </tr>
    <tr>
      <th>9</th>
      <td>ElasticNet</td>
      <td>{'alpha': 1.0, 'copy_X': True, 'fit_intercept'...</td>
      <td>RMSE: -0.14 (+/- 0.022)</td>
      <td>0.142879</td>
      <td>0.0217675</td>
    </tr>
    <tr>
      <th>10</th>
      <td>Lasso</td>
      <td>{'alpha': 1.0, 'copy_X': True, 'fit_intercept'...</td>
      <td>RMSE: -0.15 (+/- 0.025)</td>
      <td>0.149546</td>
      <td>0.0248788</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot results
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>
<span class="n">g</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="sh">"</span><span class="s">CV_mean</span><span class="sh">"</span><span class="p">,</span>
                <span class="sh">"</span><span class="s">Model</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">data</span> <span class="o">=</span> <span class="n">summary_df</span><span class="p">,</span>
                <span class="n">palette</span><span class="o">=</span><span class="sh">"</span><span class="s">Set3</span><span class="sh">"</span><span class="p">,</span>
                <span class="n">orient</span> <span class="o">=</span> <span class="sh">"</span><span class="s">h</span><span class="sh">"</span><span class="p">,</span>
                <span class="o">**</span><span class="p">{</span><span class="sh">'</span><span class="s">xerr</span><span class="sh">'</span><span class="p">:</span><span class="n">summary_df</span><span class="p">[</span><span class="sh">'</span><span class="s">CV_std</span><span class="sh">'</span><span class="p">].</span><span class="n">values</span><span class="p">})</span>
<span class="n">g</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">"</span><span class="s">Mean Accuracy</span><span class="sh">"</span><span class="p">)</span>
<span class="n">g</span> <span class="o">=</span> <span class="n">g</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">"</span><span class="s">Cross validation scores</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_201_0.png" />
</figure>

<p>The models tested above are sorted by RMSE on the cross-validation fold. The top 9 lead to relatively low RMSE. We can now inspect feature importances.</p>

<p><a id="Section_42"></a></p>
<h3 id="42-feature-importances">4.2. Feature Importances</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create an DecisionTreeRegressor
</span><span class="n">model</span> <span class="o">=</span> <span class="nc">DecisionTreeRegressor</span><span class="p">()</span>

<span class="c1"># fit the model
</span><span class="n">model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="c1"># sort features by importances
</span><span class="n">indices</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argsort</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">feature_importances_</span><span class="p">)[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
<span class="n">n_feature</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="n">feature_importances_</span><span class="p">[</span><span class="n">model</span><span class="p">.</span><span class="n">feature_importances_</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">])</span>

<span class="nf">print</span><span class="p">(</span><span class="n">n_feature</span><span class="p">,</span><span class="sh">"</span><span class="s"> features are important.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>209  features are important.
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot the feature importances
</span><span class="n">top_n</span> <span class="o">=</span> <span class="mi">20</span>

<span class="n">indices</span> <span class="o">=</span> <span class="n">indices</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">top_n</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">20</span><span class="p">,</span><span class="mi">20</span><span class="p">))</span>

<span class="n">g</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">barplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">train</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="n">indices</span><span class="p">],</span> <span class="n">x</span><span class="o">=</span><span class="n">model</span><span class="p">.</span><span class="n">feature_importances_</span><span class="p">[</span><span class="n">indices</span><span class="p">],</span> <span class="n">palette</span> <span class="o">=</span> <span class="n">mycols</span><span class="p">)</span>
<span class="n">g</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">feature importance</span><span class="sh">'</span><span class="p">)</span>
<span class="n">g</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">feature</span><span class="sh">'</span><span class="p">)</span>
<span class="n">g</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">DecisionTreeRegressor (Top {} features)</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">top_n</span><span class="p">))</span>
<span class="n">g</span><span class="p">.</span><span class="nf">tick_params</span><span class="p">(</span><span class="n">labelsize</span><span class="o">=</span><span class="mi">15</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_205_0.png" />
</figure>

<p>As expected, some of the fundamental real-estate features appear as the most important, such as the overall quality, the size of the living area, the number of bathrooms.</p>

<p><a id="Section_43"></a></p>
<h3 id="43-result-correlation-and-model-behaviors">4.3. Result Correlation and Model Behaviors</h3>

<p>Before performing any ensembling, we must evaluate the correlation between the predictions of our models. Indeed, the ensembling works best when the selected models lead to uncorrelated predictions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">summary_cols</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">Parameters (Pre)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">CV results</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">CV mean</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">CV std</span><span class="sh">'</span><span class="p">]</span>
<span class="n">summary_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="n">summary_cols</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">predictions_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">()</span>

<span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">algo</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">models</span><span class="p">):</span>
    <span class="n">algo</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
    <span class="n">predictions</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">algo</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">))</span>
    
    <span class="n">predictions_df</span><span class="p">[</span><span class="n">algo</span><span class="p">.</span><span class="n">__class__</span><span class="p">.</span><span class="n">__name__</span><span class="p">]</span> <span class="o">=</span> <span class="n">predictions</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Compute the correlation matrix
</span><span class="n">corr</span> <span class="o">=</span> <span class="n">predictions_df</span><span class="p">.</span><span class="nf">corr</span><span class="p">()</span>

<span class="c1"># Generate a mask for the upper triangle
</span><span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros_like</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">bool</span><span class="p">)</span>
<span class="n">mask</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">triu_indices_from</span><span class="p">(</span><span class="n">mask</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">True</span>

<span class="c1"># Set up the matplotlib figure
</span><span class="n">f</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">12</span><span class="p">))</span>

<span class="c1"># Generate a custom diverging colormap
</span><span class="n">cmap</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="nf">diverging_palette</span><span class="p">(</span><span class="mi">220</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="n">as_cmap</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># Draw the heatmap with the mask and correct aspect ratio
</span><span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">corr</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">mask</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span><span class="n">vmin</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">center</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="mf">2.</span><span class="p">,</span><span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">square</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">linewidths</span><span class="o">=</span><span class="p">.</span><span class="mi">5</span><span class="p">,</span> <span class="n">cbar_kws</span><span class="o">=</span><span class="p">{</span><span class="sh">"</span><span class="s">shrink</span><span class="sh">"</span><span class="p">:</span> <span class="p">.</span><span class="mi">4</span><span class="p">});</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_211_0.png" />
</figure>

<p><a id="Section_44"></a></p>
<h3 id="44-ensembling">4.4. Ensembling</h3>

<p>Now that the basic models have been tested and their results assessed, an ensemble of tuned model is created. First, each one of the selected model has its hyperparameters tuned.</p>

<p>Each of the model is trained using a k-fold validation method (using 10 folds).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create k-fold
</span><span class="n">kfolds</span> <span class="o">=</span> <span class="nc">KFold</span><span class="p">(</span><span class="n">n_splits</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
</code></pre></div></div>

<p>In addition, we create a stacking cross-validation regressor. This ensemble technique consists of combining several regressors, train them using CV, add the predictions to the dataset as new features and train a meta-regressor with the new dataset.</p>

<figure>
<img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/stacking_cv_regressor_overview.png" style="height:500px;" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># setup models   
</span>
<span class="c1"># Ridge parameters
</span><span class="n">alphas_alt</span> <span class="o">=</span> <span class="p">[</span><span class="mf">14.5</span><span class="p">,</span> <span class="mf">14.6</span><span class="p">,</span> <span class="mf">14.7</span><span class="p">,</span> <span class="mf">14.8</span><span class="p">,</span> <span class="mf">14.9</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mf">15.1</span><span class="p">,</span> <span class="mf">15.2</span><span class="p">,</span> <span class="mf">15.3</span><span class="p">,</span> <span class="mf">15.4</span><span class="p">,</span> <span class="mf">15.5</span><span class="p">]</span>

<span class="c1"># Lasso parameters
</span><span class="n">alphas2</span> <span class="o">=</span> <span class="p">[</span><span class="mf">5e-05</span><span class="p">,</span> <span class="mf">0.0001</span><span class="p">,</span> <span class="mf">0.0002</span><span class="p">,</span> <span class="mf">0.0003</span><span class="p">,</span> <span class="mf">0.0004</span><span class="p">,</span> <span class="mf">0.0005</span><span class="p">,</span> <span class="mf">0.0006</span><span class="p">,</span> <span class="mf">0.0007</span><span class="p">,</span> <span class="mf">0.0008</span><span class="p">]</span>

<span class="c1"># ElasticNet
</span><span class="n">e_alphas</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.0001</span><span class="p">,</span> <span class="mf">0.0002</span><span class="p">,</span> <span class="mf">0.0003</span><span class="p">,</span> <span class="mf">0.0004</span><span class="p">,</span> <span class="mf">0.0005</span><span class="p">,</span> <span class="mf">0.0006</span><span class="p">,</span> <span class="mf">0.0007</span><span class="p">]</span>
<span class="n">e_l1ratio</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.8</span><span class="p">,</span> <span class="mf">0.85</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.95</span><span class="p">,</span> <span class="mf">0.99</span><span class="p">,</span> <span class="mi">1</span><span class="p">]</span>

<span class="n">ridge</span> <span class="o">=</span> <span class="nc">RidgeCV</span><span class="p">(</span><span class="n">alphas</span><span class="o">=</span><span class="n">alphas_alt</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="n">kfolds</span><span class="p">)</span>

<span class="n">lasso</span> <span class="o">=</span> <span class="nc">LassoCV</span><span class="p">(</span><span class="n">max_iter</span><span class="o">=</span><span class="mf">1e7</span><span class="p">,</span> <span class="n">alphas</span><span class="o">=</span><span class="n">alphas2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="n">kfolds</span><span class="p">)</span>

<span class="n">elasticnet</span> <span class="o">=</span> <span class="nc">ElasticNetCV</span><span class="p">(</span><span class="n">max_iter</span><span class="o">=</span><span class="mf">1e7</span><span class="p">,</span> <span class="n">alphas</span><span class="o">=</span><span class="n">e_alphas</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="n">kfolds</span><span class="p">,</span> <span class="n">l1_ratio</span><span class="o">=</span><span class="n">e_l1ratio</span><span class="p">)</span>
                                        
<span class="n">svr</span> <span class="o">=</span> <span class="nc">SVR</span><span class="p">(</span><span class="n">C</span><span class="o">=</span> <span class="mi">20</span><span class="p">,</span> <span class="n">epsilon</span><span class="o">=</span> <span class="mf">0.008</span><span class="p">,</span> <span class="n">gamma</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">,)</span>


<span class="n">gbr</span> <span class="o">=</span> <span class="nc">GradientBoostingRegressor</span><span class="p">(</span><span class="n">n_estimators</span><span class="o">=</span><span class="mi">3000</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="mf">0.05</span><span class="p">,</span>
                                   <span class="n">max_depth</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">max_features</span><span class="o">=</span><span class="sh">'</span><span class="s">sqrt</span><span class="sh">'</span><span class="p">,</span>
                                   <span class="n">min_samples_leaf</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">min_samples_split</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> 
                                   <span class="n">loss</span><span class="o">=</span><span class="sh">'</span><span class="s">huber</span><span class="sh">'</span><span class="p">,</span> <span class="n">random_state</span> <span class="o">=</span><span class="mi">42</span><span class="p">)</span>
                                   
<span class="n">lightgbm</span> <span class="o">=</span> <span class="nc">LGBMRegressor</span><span class="p">(</span><span class="n">objective</span><span class="o">=</span><span class="sh">'</span><span class="s">regression</span><span class="sh">'</span><span class="p">,</span> 
                                       <span class="n">num_leaves</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span>
                                       <span class="n">learning_rate</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> 
                                       <span class="n">n_estimators</span><span class="o">=</span><span class="mi">5000</span><span class="p">,</span>
                                       <span class="n">max_bin</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> 
                                       <span class="n">bagging_fraction</span><span class="o">=</span><span class="mf">0.75</span><span class="p">,</span>
                                       <span class="n">bagging_freq</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> 
                                       <span class="n">bagging_seed</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span>
                                       <span class="n">feature_fraction</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span>
                                       <span class="n">feature_fraction_seed</span><span class="o">=</span><span class="mi">7</span><span class="p">,</span>
                                       <span class="n">verbose</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span>
                                       
<span class="n">xgboost</span> <span class="o">=</span> <span class="nc">XGBRegressor</span><span class="p">(</span><span class="n">learning_rate</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">n_estimators</span><span class="o">=</span><span class="mi">3460</span><span class="p">,</span>
                                     <span class="n">max_depth</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">min_child_weight</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
                                     <span class="n">gamma</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">subsample</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
                                     <span class="n">colsample_bytree</span><span class="o">=</span><span class="mf">0.7</span><span class="p">,</span>
                                     <span class="n">nthread</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span>
                                     <span class="n">scale_pos_weight</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">seed</span><span class="o">=</span><span class="mi">27</span><span class="p">,</span>
                                     <span class="n">objective</span><span class="o">=</span><span class="sh">'</span><span class="s">reg:squarederror</span><span class="sh">'</span><span class="p">,</span>
                                     <span class="n">reg_alpha</span><span class="o">=</span><span class="mf">0.00006</span><span class="p">)</span>

<span class="n">stack_gen</span> <span class="o">=</span> <span class="nc">StackingCVRegressor</span><span class="p">(</span><span class="n">regressors</span><span class="o">=</span><span class="p">(</span><span class="n">ridge</span><span class="p">,</span> <span class="n">lasso</span><span class="p">,</span> <span class="n">elasticnet</span><span class="p">,</span>
                                            <span class="n">gbr</span><span class="p">,</span> <span class="n">xgboost</span><span class="p">,</span> <span class="n">lightgbm</span><span class="p">),</span>
                                <span class="n">meta_regressor</span><span class="o">=</span><span class="n">xgboost</span><span class="p">,</span>
                                <span class="n">use_features_in_secondary</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>Once the tunable models have been defined, they are trained using the training set.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ridge_model_full_data</span> <span class="o">=</span> <span class="n">ridge</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Ridge trained...</span><span class="sh">'</span><span class="p">)</span>
<span class="n">lasso_model_full_data</span> <span class="o">=</span> <span class="n">lasso</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Lasso trained...</span><span class="sh">'</span><span class="p">)</span>
<span class="n">elastic_model_full_data</span> <span class="o">=</span> <span class="n">elasticnet</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Elastic trained...</span><span class="sh">'</span><span class="p">)</span>
<span class="n">svr_model_full_data</span> <span class="o">=</span> <span class="n">svr</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">SVR trained...</span><span class="sh">'</span><span class="p">)</span>
<span class="n">gbr_model_full_data</span> <span class="o">=</span> <span class="n">gbr</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">GBR trained...</span><span class="sh">'</span><span class="p">)</span>
<span class="n">lgb_model_full_data</span> <span class="o">=</span> <span class="n">lightgbm</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">LGB trained...</span><span class="sh">'</span><span class="p">)</span>
<span class="n">xgb_model_full_data</span> <span class="o">=</span> <span class="n">xgboost</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">XGB trained...</span><span class="sh">'</span><span class="p">)</span>
<span class="n">stack_gen_model</span> <span class="o">=</span> <span class="n">stack_gen</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Stack trained...</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Ridge trained...
Lasso trained...
Elastic trained...
SVR trained...
GBR trained...
LGB trained...
XGB trained...
Stack trained...
</code></pre></div></div>

<p>The Kaggle competition defines the key metric as the root-mean-squared error. Since our data has been transformed using a log function, our corresponding metric is the root-mean-squared logarithmic error (RMSLE).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># rmsle
</span><span class="k">def</span> <span class="nf">rmsle</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">))</span>


<span class="c1"># scoring function
</span><span class="k">def</span> <span class="nf">cv_rmse</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">X</span><span class="o">=</span><span class="n">train_normalized</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="n">y_train</span><span class="p">):</span>
    <span class="n">rmse</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">sqrt</span><span class="p">(</span><span class="o">-</span><span class="nf">cross_val_score</span><span class="p">(</span><span class="n">model</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span>
                                    <span class="n">scoring</span><span class="o">=</span><span class="sh">"</span><span class="s">neg_mean_squared_error</span><span class="sh">"</span><span class="p">,</span>
                                    <span class="n">cv</span><span class="o">=</span><span class="n">kfolds</span><span class="p">))</span>
    <span class="nf">return </span><span class="p">(</span><span class="n">rmse</span><span class="p">)</span>
</code></pre></div></div>

<p>The RMSLE (means and standard deviation) is computed for each of the tuned model.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">score</span> <span class="o">=</span> <span class="nf">cv_rmse</span><span class="p">(</span><span class="n">ridge</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Kernel Ridge score: {:.4f} ({:.4f})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">score</span><span class="p">.</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">score</span><span class="p">.</span><span class="nf">std</span><span class="p">()))</span>

<span class="n">score</span> <span class="o">=</span> <span class="nf">cv_rmse</span><span class="p">(</span><span class="n">lasso</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Lasso score: {:.4f} ({:.4f})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">score</span><span class="p">.</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">score</span><span class="p">.</span><span class="nf">std</span><span class="p">()),)</span>

<span class="n">score</span> <span class="o">=</span> <span class="nf">cv_rmse</span><span class="p">(</span><span class="n">elasticnet</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">ElasticNet score: {:.4f} ({:.4f})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">score</span><span class="p">.</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">score</span><span class="p">.</span><span class="nf">std</span><span class="p">()))</span>

<span class="n">score</span> <span class="o">=</span> <span class="nf">cv_rmse</span><span class="p">(</span><span class="n">svr</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">SVR score: {:.4f} ({:.4f})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">score</span><span class="p">.</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">score</span><span class="p">.</span><span class="nf">std</span><span class="p">()))</span>

<span class="n">score</span> <span class="o">=</span> <span class="nf">cv_rmse</span><span class="p">(</span><span class="n">lightgbm</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Lightgbm score: {:.4f} ({:.4f})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">score</span><span class="p">.</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">score</span><span class="p">.</span><span class="nf">std</span><span class="p">()))</span>

<span class="n">score</span> <span class="o">=</span> <span class="nf">cv_rmse</span><span class="p">(</span><span class="n">gbr</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">GradientBoosting score: {:.4f} ({:.4f})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">score</span><span class="p">.</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">score</span><span class="p">.</span><span class="nf">std</span><span class="p">()))</span>

<span class="n">score</span> <span class="o">=</span> <span class="nf">cv_rmse</span><span class="p">(</span><span class="n">xgboost</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Xgboost score: {:.4f} ({:.4f})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">score</span><span class="p">.</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">score</span><span class="p">.</span><span class="nf">std</span><span class="p">()))</span>

<span class="n">score</span> <span class="o">=</span> <span class="nf">cv_rmse</span><span class="p">(</span><span class="n">stack_gen</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Stack score: {:.4f} ({:.4f})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">score</span><span class="p">.</span><span class="nf">mean</span><span class="p">(),</span> <span class="n">score</span><span class="p">.</span><span class="nf">std</span><span class="p">()))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Kernel Ridge score: 0.1100 (0.0166)
Lasso score: 0.1104 (0.0165)
ElasticNet score: 0.1103 (0.0165)
SVR score: 0.1091 (0.0185)
Lightgbm score: 0.1139 (0.0156)
GradientBoosting score: 0.1135 (0.0152)
Xgboost score: 0.1155 (0.0165)
Stack score: 0.1133 (0.0143)
</code></pre></div></div>

<p>We now create a new stack combining our models. The new model consists of a simple linear combination of the previous model. More emphasis is put on the stack model. This is done by assigning a larger weight to this model. The definition of the weights of the model are based on trial-and-error. We start with 0.1 for all model except for the stack (0.3 weight).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">blend_models_predict</span><span class="p">(</span><span class="n">X</span><span class="p">):</span>
    <span class="nf">return </span><span class="p">(</span>
        <span class="p">(</span><span class="mf">0.15</span> <span class="o">*</span> <span class="n">ridge_model_full_data</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X</span><span class="p">))</span> <span class="o">+</span> \
        <span class="p">(</span><span class="mf">0.1</span> <span class="o">*</span> <span class="n">lasso_model_full_data</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X</span><span class="p">))</span> <span class="o">+</span> \
        
        <span class="p">(</span><span class="mf">0.1</span> <span class="o">*</span> <span class="n">elastic_model_full_data</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X</span><span class="p">))</span> <span class="o">+</span> \
        <span class="p">(</span><span class="mf">0.1</span> <span class="o">*</span> <span class="n">svr_model_full_data</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X</span><span class="p">))</span> <span class="o">+</span> \
            
        <span class="p">(</span><span class="mf">0.1</span> <span class="o">*</span> <span class="n">lgb_model_full_data</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X</span><span class="p">))</span> <span class="o">+</span> \
        <span class="p">(</span><span class="mf">0.1</span> <span class="o">*</span> <span class="n">gbr_model_full_data</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X</span><span class="p">))</span> <span class="o">+</span> \
            
        <span class="p">(</span><span class="mf">0.1</span> <span class="o">*</span> <span class="n">xgb_model_full_data</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X</span><span class="p">))</span> <span class="o">+</span> \
        <span class="p">(</span><span class="mf">0.25</span> <span class="o">*</span> <span class="n">stack_gen_model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">X</span><span class="p">)))</span>
    <span class="p">)</span>
            
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">RMSLE score on train data:</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="nf">rmsle</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="nf">blend_models_predict</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RMSLE score on train data:
0.0660008865648205
</code></pre></div></div>

<p><a id="Section_45"></a></p>
<h3 id="45-fine-tuning">4.5. Fine Tuning</h3>

<p>The final assessment of our model is based on the residual distribution. The sale prices from the training set are compared to the predicted sale prices. The goal is to determine if the outliers of the training set led to a bias error.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># predictions
</span><span class="n">y_pred</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">expm1</span><span class="p">(</span><span class="nf">blend_models_predict</span><span class="p">(</span><span class="n">train_normalized</span><span class="p">)))</span>
<span class="n">y_train_real</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">expm1</span><span class="p">(</span><span class="n">y_train</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create figure
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>

<span class="c1"># set axis labels
</span><span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Sale Price - Real Values</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Sale Price - Predicted Values</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># plot real vs. predicted
</span><span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">y_train_real</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">blend model</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># plot x=y for comparison
</span><span class="n">x_range</span> <span class="o">=</span> <span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="nf">min</span><span class="p">(</span><span class="n">y_train_real</span><span class="p">),</span> <span class="n">np</span><span class="p">.</span><span class="nf">max</span><span class="p">(</span><span class="n">y_train_real</span><span class="p">)]</span>
<span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_range</span><span class="p">,</span> <span class="n">x_range</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">k</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">x=y</span><span class="sh">"</span><span class="p">)</span>
<span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">legend</span><span class="p">()</span>

<span class="c1"># plot residuals
</span><span class="n">axs</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">scatter</span><span class="p">(</span><span class="n">y_train_real</span><span class="p">,</span> <span class="n">y_pred</span><span class="o">-</span><span class="n">y_train_real</span><span class="p">,</span> <span class="n">marker</span><span class="o">=</span><span class="sh">'</span><span class="s">.</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axs</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Sale Price - Real Values</span><span class="sh">'</span><span class="p">)</span>
<span class="n">axs</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Sale Price - Residuals</span><span class="sh">'</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_230_0.png" />
</figure>

<p>From the above plot, it can be seen that the model tends to under-estimate the price of expensive houses.</p>

<p>In order to re-scale these extreme cases, we group the data by quantiles of the real sale prices. We then inspect the ratio between the predicted values and the real values (grouped by quantiles).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create residual dataframe
</span><span class="n">residuals</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">({</span><span class="sh">'</span><span class="s">real_values</span><span class="sh">'</span><span class="p">:</span><span class="n">y_train_real</span><span class="p">,</span> <span class="sh">'</span><span class="s">pred_values</span><span class="sh">'</span><span class="p">:</span><span class="n">y_pred</span><span class="p">,</span> <span class="sh">'</span><span class="s">residuals</span><span class="sh">'</span><span class="p">:</span><span class="n">y_pred</span><span class="o">-</span><span class="n">y_train_real</span><span class="p">})</span>

<span class="c1"># compute residual quantiles
</span><span class="n">residuals</span><span class="p">[</span><span class="sh">'</span><span class="s">quantile_range</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">qcut</span><span class="p">(</span><span class="n">residuals</span><span class="p">[</span><span class="sh">'</span><span class="s">real_values</span><span class="sh">'</span><span class="p">],</span> <span class="n">q</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>

<span class="c1"># compute middle value for each quantile
</span><span class="n">residuals</span><span class="p">[</span><span class="sh">'</span><span class="s">middle</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">residuals</span><span class="p">[</span><span class="sh">'</span><span class="s">quantile_range</span><span class="sh">'</span><span class="p">].</span><span class="nf">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="p">(</span><span class="n">x</span><span class="p">.</span><span class="n">left</span><span class="o">+</span><span class="n">x</span><span class="p">.</span><span class="n">right</span><span class="p">)</span><span class="o">/</span><span class="mf">2.</span><span class="p">).</span><span class="nf">astype</span><span class="p">(</span><span class="nb">float</span><span class="p">)</span>

<span class="c1"># compute ratio between residual value and quantile mid value
</span><span class="n">residuals</span><span class="p">[</span><span class="sh">'</span><span class="s">ratio_res_mid</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">residuals</span><span class="p">[</span><span class="sh">'</span><span class="s">residuals</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">residuals</span><span class="p">[</span><span class="sh">'</span><span class="s">middle</span><span class="sh">'</span><span class="p">]</span>

<span class="c1"># compute the ratio between the predicted value and the quantile mid value 
</span><span class="n">residuals</span><span class="p">[</span><span class="sh">'</span><span class="s">ratio_pred_mid</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">residuals</span><span class="p">[</span><span class="sh">'</span><span class="s">pred_values</span><span class="sh">'</span><span class="p">]</span> <span class="o">/</span> <span class="n">residuals</span><span class="p">[</span><span class="sh">'</span><span class="s">real_values</span><span class="sh">'</span><span class="p">]</span> 

<span class="n">residuals</span><span class="p">.</span><span class="nf">head</span><span class="p">()</span>
</code></pre></div></div>

<div style="overflow-x:auto;">
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>real_values</th>
      <th>pred_values</th>
      <th>residuals</th>
      <th>quantile_range</th>
      <th>middle</th>
      <th>ratio_res_mid</th>
      <th>ratio_pred_mid</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>208499.0</td>
      <td>207203.0</td>
      <td>-1296.0</td>
      <td>(198859.1, 214000.0]</td>
      <td>206429.550</td>
      <td>-0.006278</td>
      <td>0.993784</td>
    </tr>
    <tr>
      <th>1</th>
      <td>181500.0</td>
      <td>187525.0</td>
      <td>6025.0</td>
      <td>(179239.8, 187500.0]</td>
      <td>183369.900</td>
      <td>0.032857</td>
      <td>1.033196</td>
    </tr>
    <tr>
      <th>2</th>
      <td>223500.0</td>
      <td>214092.0</td>
      <td>-9408.0</td>
      <td>(214000.0, 230000.0]</td>
      <td>222000.000</td>
      <td>-0.042378</td>
      <td>0.957906</td>
    </tr>
    <tr>
      <th>3</th>
      <td>139999.0</td>
      <td>157285.0</td>
      <td>17286.0</td>
      <td>(135500.0, 140959.05]</td>
      <td>138229.525</td>
      <td>0.125053</td>
      <td>1.123472</td>
    </tr>
    <tr>
      <th>4</th>
      <td>249999.0</td>
      <td>283155.0</td>
      <td>33156.0</td>
      <td>(230000.0, 249999.0]</td>
      <td>239999.500</td>
      <td>0.138150</td>
      <td>1.132625</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">series</span> <span class="o">=</span> <span class="n">residuals</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">quantile_range</span><span class="sh">'</span><span class="p">]).</span><span class="nf">mean</span><span class="p">()[</span><span class="sh">'</span><span class="s">ratio_pred_mid</span><span class="sh">'</span><span class="p">].</span><span class="nf">sort_index</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">series</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>quantile_range
(34898.999, 87999.0]     1.095946
(87999.0, 106424.0]      1.019554
(106424.0, 114999.0]     1.004174
(114999.0, 124000.0]     1.001567
(124000.0, 129925.0]     0.999571
(129925.0, 135500.0]     1.001819
(135500.0, 140959.05]    0.997909
(140959.05, 146999.0]    1.007797
(146999.0, 155000.0]     0.993213
(155000.0, 162999.0]     0.993089
(162999.0, 172499.0]     0.997316
(172499.0, 179239.8]     0.995843
(179239.8, 187500.0]     1.011027
(187500.0, 198859.1]     1.004864
(198859.1, 214000.0]     1.001532
(214000.0, 230000.0]     0.994265
(230000.0, 249999.0]     0.996978
(249999.0, 278000.0]     0.988132
(278000.0, 326300.0]     0.991095
(326300.0, 755000.0]     0.968056
Name: ratio_pred_mid, dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>
<span class="n">series</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="sh">'</span><span class="s">barh</span><span class="sh">'</span><span class="p">,</span><span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/output_234_0.png" />
</figure>

<p>From the above plot, we can see that the model performs relatively well for the middle 18 quantiles. However, the predictions for cheap houses are over-estimated while the predictions for expensive houses are under-estimated. We make corrections to the predictions</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># quantile adjustment
</span><span class="n">q1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">quantile</span><span class="p">(</span><span class="n">y_pred</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">)</span>
<span class="n">q2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">quantile</span><span class="p">(</span><span class="n">y_pred</span><span class="p">,</span> <span class="mf">0.90</span><span class="p">)</span>

<span class="n">q1_factor</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mf">1.09</span>
<span class="n">q2_factor</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mf">0.95</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Correction
</span><span class="n">f_q1</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">q1</span> <span class="k">else</span> <span class="n">x</span> <span class="o">*</span> <span class="n">q1_factor</span>
<span class="n">f_q2</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">q2</span> <span class="k">else</span> <span class="n">x</span> <span class="o">*</span> <span class="n">q2_factor</span>
</code></pre></div></div>

<p><a id="Section_46"></a></p>
<h3 id="46-predictions">4.6. Predictions</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># make predictions on test set
</span><span class="n">y_test_pred</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">expm1</span><span class="p">(</span><span class="nf">blend_models_predict</span><span class="p">(</span><span class="n">test_normalized</span><span class="p">))</span>

<span class="c1"># correct outliers
</span><span class="n">corrected_y_test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="nf">f_q1</span><span class="p">(</span><span class="n">xi</span><span class="p">)</span> <span class="k">for</span> <span class="n">xi</span> <span class="ow">in</span> <span class="n">y_test_pred</span><span class="p">])</span>
<span class="n">y_test_pred_series</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="nf">f_q2</span><span class="p">(</span><span class="n">xi</span><span class="p">)</span> <span class="k">for</span> <span class="n">xi</span> <span class="ow">in</span> <span class="n">corrected_y_test</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">submission</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">./data/sample_submission.csv</span><span class="sh">"</span><span class="p">)</span>
<span class="n">submission</span><span class="p">.</span><span class="n">iloc</span><span class="p">[:,</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">floor</span><span class="p">(</span><span class="n">y_test_pred_series</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">submission</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">new_submission.csv</span><span class="sh">"</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>
<figure>
<img src="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/Results.png" />
</figure>

<p><strong>Conclusion</strong>: This model ranks in the top 5% at the time of the submittal. This is a really good outcome for a relatively simple model without too much feature engineering.</p>]]></content><author><name>Thibault Dody</name></author><category term="Kaggle" /><category term="ML" /><category term="python" /><summary type="html"><![CDATA[A take on the Kaggle competition of the Boston Housing Dataset.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/tile.png" /><media:content medium="image" url="https://tdody.github.io/assets/img/2019-10-03-Housing-Dataset/tile.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Project: Spam Detection (Accuracy 99.2%)</title><link href="http://localhost:4000/Spam-Detection/" rel="alternate" type="text/html" title="Project: Spam Detection (Accuracy 99.2%)" /><published>2019-09-06T00:00:00-04:00</published><updated>2019-09-06T00:00:00-04:00</updated><id>http://localhost:4000/Spam-Detection</id><content type="html" xml:base="http://localhost:4000/Spam-Detection/"><![CDATA[<footer id="attribution" style="float:right; color:#999; background:#fff;">
Created by Thibault Dody, 08/28/2019.
</footer>

<h1 id="spam-detection">Spam Detection</h1>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-09-06-Spam-Detection/Banner.png" style="width:642px;height=288px;" />
</figure>

<h2 id="table-of-content">Table of Content</h2>

<p><a href="#Section_1"><strong>1. Introduction</strong></a><br />
<a href="#Section_2"><strong>2. Data Import</strong></a><br />
    <a href="#Section_21">2.1. Import Libraries</a><br />
    <a href="#Section_22">2.2. Load Emails and Spams</a><br />
    <a href="#Section_23">2.3. Handle Attachments and Complex Email Structures</a><br />
<a href="#Section_3"><strong>3. Model</strong></a><br />
    <a href="#Section_31">3.1. Data Preparation</a><br />
    <a href="#Section_32">3.2. Classifier</a><br />
    <a href="#Section_33">3.3. Model Tuning</a><br />
<a href="#Section_4"><strong>4. Conclusion</strong></a></p>

<p><a id="Section_1"></a></p>
<h2 id="1-introduction">1. Introduction</h2>

<p>Whether it is to an individual or to a company, spams are typically sent for commercial purpose but can also lead to phishing attacks or scamming. Spams appear in the early 90s and are now accounting for roughly 65% of the email traffic. Companies like Google or Yahoo have developed filtering systems to prevent spams from being listed in their users’ mailbox. In this Notebook, we will go over the implementation of a SPAM detection algorithm.</p>

<hr />
<p><a id="Section_2"></a></p>
<h2 id="2-data-import">2. Data Import</h2>

<p>For this project, we will be using an email dataset containing spams and regular emails. The dataset is hosted by <a href="https://spamassassin.apache.org/">spamassassin</a>. The dataset documentation can be found <a href="http://spamassassin.apache.org/old/publiccorpus/readme.html">here</a>.</p>

<p><a id="Section_21"></a></p>
<h3 id="21-import-libraries">2.1 Import Libraries</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">tarfile</span>
<span class="kn">import</span> <span class="n">urllib</span>
<span class="kn">import</span> <span class="n">email</span>
<span class="kn">import</span> <span class="n">email.policy</span>
<span class="kn">from</span> <span class="n">collections</span> <span class="kn">import</span> <span class="n">Counter</span>

<span class="kn">from</span> <span class="n">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
<span class="kn">from</span> <span class="n">html</span> <span class="kn">import</span> <span class="n">unescape</span>
<span class="kn">import</span> <span class="n">re</span>
<span class="kn">import</span> <span class="n">nltk</span>
<span class="kn">from</span> <span class="n">urlextract</span> <span class="kn">import</span> <span class="n">URLExtract</span>

<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="kn">from</span> <span class="n">TAD_tools_v00</span> <span class="kn">import</span> <span class="o">*</span>

<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">train_test_split</span>
<span class="kn">from</span> <span class="n">sklearn.base</span> <span class="kn">import</span> <span class="n">BaseEstimator</span><span class="p">,</span> <span class="n">TransformerMixin</span>
<span class="kn">from</span> <span class="n">sklearn.pipeline</span> <span class="kn">import</span> <span class="n">Pipeline</span>
<span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">LogisticRegression</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">cross_val_score</span>
<span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">precision_score</span><span class="p">,</span> <span class="n">recall_score</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">GridSearchCV</span>
</code></pre></div></div>

<p><a id="Section_22"></a></p>
<h3 id="22-load-emails-and-spams">2.2 Load Emails and Spams</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># file locations
</span><span class="n">ROOT_SITE</span> <span class="o">=</span> <span class="sh">'</span><span class="s">http://spamassassin.apache.org/old/publiccorpus/</span><span class="sh">'</span>
<span class="n">HAM_URL</span> <span class="o">=</span> <span class="n">ROOT_SITE</span> <span class="o">+</span> <span class="sh">"</span><span class="s">20030228_easy_ham.tar.bz2</span><span class="sh">"</span>   <span class="c1"># set of regular emails
</span><span class="n">SPAM_URL</span> <span class="o">=</span> <span class="n">ROOT_SITE</span> <span class="o">+</span> <span class="sh">"</span><span class="s">20030228_spam.tar.bz2</span><span class="sh">"</span>      <span class="c1"># set of spam emails
</span><span class="n">FOLDER_LOC</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="sh">'</span><span class="s">dataset</span><span class="sh">'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">download_data</span><span class="p">(</span><span class="n">data_path</span><span class="o">=</span><span class="n">FOLDER_LOC</span><span class="p">,</span> <span class="n">spam_url</span><span class="o">=</span><span class="n">SPAM_URL</span><span class="p">,</span> <span class="n">ham_url</span><span class="o">=</span><span class="n">HAM_URL</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">
    Helper function:
        - create folders
        - load data from urls
    </span><span class="sh">'''</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">**LOADING EMAILS AND SPAMS**</span><span class="sh">'</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">   loading data...</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># create folder if necessary
</span>    <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isdir</span><span class="p">(</span><span class="n">data_path</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="nf">mkdir</span><span class="p">(</span><span class="n">data_path</span><span class="p">)</span>
    
    <span class="c1"># download spam and ham data
</span>    <span class="k">for</span> <span class="n">filename</span><span class="p">,</span> <span class="n">url</span> <span class="ow">in</span> <span class="p">[(</span><span class="sh">'</span><span class="s">ham.tar.bz2</span><span class="sh">'</span><span class="p">,</span> <span class="n">ham_url</span><span class="p">),(</span><span class="sh">'</span><span class="s">spam.tar.bz2</span><span class="sh">'</span><span class="p">,</span> <span class="n">spam_url</span><span class="p">)]:</span>
        <span class="c1"># create full path and check if file has been dowloaded
</span>        <span class="n">path</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span> <span class="n">filename</span><span class="p">)</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">isfile</span><span class="p">(</span><span class="n">path</span><span class="p">):</span>
            <span class="c1"># download file
</span>            <span class="n">urllib</span><span class="p">.</span><span class="n">request</span><span class="p">.</span><span class="nf">urlretrieve</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="n">path</span><span class="p">)</span>
        
        <span class="c1"># open tar file and extract content
</span>        <span class="k">with</span> <span class="n">tarfile</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">tar_bz2_file</span><span class="p">:</span>
            <span class="n">tar_bz2_file</span><span class="p">.</span><span class="nf">extractall</span><span class="p">(</span><span class="n">path</span><span class="o">=</span><span class="n">data_path</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">   import completed...</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># download emails (spams and regular) and extract content of tar files
</span><span class="nf">download_data</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>**LOADING EMAILS AND SPAMS**
   loading data...
   import completed...
</code></pre></div></div>

<p>Now that the data has been loaded, we store the spam and non-spam (ham) file names into two separate lists.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># folder paths
</span><span class="n">HAM_DIR</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">FOLDER_LOC</span><span class="p">,</span> <span class="sh">"</span><span class="s">easy_ham</span><span class="sh">"</span><span class="p">)</span>
<span class="n">SPAM_DIR</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">FOLDER_LOC</span><span class="p">,</span> <span class="sh">"</span><span class="s">spam</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># collect spam and ham files (a cmds appears when the content of the tar file are retrieved, this file is not included in collection)
</span><span class="n">ham_filenames</span> <span class="o">=</span> <span class="p">[</span><span class="n">filename</span> <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">HAM_DIR</span><span class="p">))</span> <span class="k">if</span> <span class="n">filename</span><span class="o">!=</span><span class="sh">'</span><span class="s">cmds</span><span class="sh">'</span><span class="p">]</span>
<span class="n">spam_filenames</span> <span class="o">=</span> <span class="p">[</span><span class="n">filename</span> <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="nf">sorted</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="nf">listdir</span><span class="p">(</span><span class="n">SPAM_DIR</span><span class="p">))</span> <span class="k">if</span> <span class="n">filename</span><span class="o">!=</span><span class="sh">'</span><span class="s">cmds</span><span class="sh">'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># count emails and spams
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Dataset contains {} emails.</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">ham_filenames</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Dataset contains {} spams.</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">spam_filenames</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dataset contains 2500 emails.
Dataset contains 500 spams.
</code></pre></div></div>

<p>We can retrieve the content of an email by simply opening the file as read-only and printing its content.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># inspect a file to understand its structure
</span><span class="n">sample_filename</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">HAM_DIR</span><span class="p">,</span> <span class="n">ham_filenames</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="n">sample_file_content</span> <span class="o">=</span> <span class="nf">open</span><span class="p">(</span><span class="n">sample_filename</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">).</span><span class="nf">read</span><span class="p">()</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sample_file_content</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>From timc@2ubh.com  Thu Aug 22 13:52:59 2002
Return-Path: &lt;timc@2ubh.com&gt;
Delivered-To: zzzz@localhost.netnoteinc.com
Received: from localhost (localhost [127.0.0.1])
	by phobos.labs.netnoteinc.com (Postfix) with ESMTP id 0314547C66
	for &lt;zzzz@localhost&gt;; Thu, 22 Aug 2002 08:52:58 -0400 (EDT)
Received: from phobos [127.0.0.1]
	by localhost with IMAP (fetchmail-5.9.0)
	for zzzz@localhost (single-drop); Thu, 22 Aug 2002 13:52:59 +0100 (IST)
Received: from n16.grp.scd.yahoo.com (n16.grp.scd.yahoo.com
    [66.218.66.71]) by dogma.slashnull.org (8.11.6/8.11.6) with SMTP id
    g7MCrdZ07070 for &lt;zzzz@spamassassin.taint.org&gt;; Thu, 22 Aug 2002 13:53:39 +0100
X-Egroups-Return: sentto-2242572-52733-1030020820-zzzz=spamassassin.taint.org@returns.groups.yahoo.com
Received: from [66.218.67.198] by n16.grp.scd.yahoo.com with NNFMP;
    22 Aug 2002 12:53:40 -0000
X-Sender: timc@2ubh.com
X-Apparently-To: zzzzteana@yahoogroups.com
Received: (EGP: mail-8_1_0_1); 22 Aug 2002 12:53:39 -0000
Received: (qmail 76099 invoked from network); 22 Aug 2002 12:53:39 -0000
Received: from unknown (66.218.66.218) by m5.grp.scd.yahoo.com with QMQP;
    22 Aug 2002 12:53:39 -0000
Received: from unknown (HELO rhenium.btinternet.com) (194.73.73.93) by
    mta3.grp.scd.yahoo.com with SMTP; 22 Aug 2002 12:53:39 -0000
Received: from host217-36-23-185.in-addr.btopenworld.com ([217.36.23.185])
    by rhenium.btinternet.com with esmtp (Exim 3.22 #8) id 17hrT0-0004gj-00
    for forteana@yahoogroups.com; Thu, 22 Aug 2002 13:53:38 +0100
X-Mailer: Microsoft Outlook Express Macintosh Edition - 4.5 (0410)
To: zzzzteana &lt;zzzzteana@yahoogroups.com&gt;
X-Priority: 3
Message-Id: &lt;E17hrT0-0004gj-00@rhenium.btinternet.com&gt;
From: "Tim Chapman" &lt;timc@2ubh.com&gt;
X-Yahoo-Profile: tim2ubh
MIME-Version: 1.0
Mailing-List: list zzzzteana@yahoogroups.com; contact
    forteana-owner@yahoogroups.com
Delivered-To: mailing list zzzzteana@yahoogroups.com
Precedence: bulk
List-Unsubscribe: &lt;mailto:zzzzteana-unsubscribe@yahoogroups.com&gt;
Date: Thu, 22 Aug 2002 13:52:38 +0100
Subject: [zzzzteana] Moscow bomber
Reply-To: zzzzteana@yahoogroups.com
Content-Type: text/plain; charset=US-ASCII
Content-Transfer-Encoding: 7bit

Man Threatens Explosion In Moscow 

Thursday August 22, 2002 1:40 PM
MOSCOW (AP) - Security officers on Thursday seized an unidentified man who
said he was armed with explosives and threatened to blow up his truck in
front of Russia's Federal Security Services headquarters in Moscow, NTV
television reported.
The officers seized an automatic rifle the man was carrying, then the man
got out of the truck and was taken into custody, NTV said. No other details
were immediately available.
The man had demanded talks with high government officials, the Interfax and
ITAR-Tass news agencies said. Ekho Moskvy radio reported that he wanted to
talk with Russian President Vladimir Putin.
Police and security forces rushed to the Security Service building, within
blocks of the Kremlin, Red Square and the Bolshoi Ballet, and surrounded the
man, who claimed to have one and a half tons of explosives, the news
agencies said. Negotiations continued for about one and a half hours outside
the building, ITAR-Tass and Interfax reported, citing witnesses.
The man later drove away from the building, under police escort, and drove
to a street near Moscow's Olympic Penta Hotel, where authorities held
further negotiations with him, the Moscow police press service said. The
move appeared to be an attempt by security services to get him to a more
secure location. 

------------------------ Yahoo! Groups Sponsor ---------------------~--&gt;
4 DVDs Free +s&amp;p Join Now
http://us.click.yahoo.com/pt6YBB/NXiEAA/mG3HAA/7gSolB/TM
---------------------------------------------------------------------~-&gt;

To unsubscribe from this group, send an email to:
forteana-unsubscribe@egroups.com

 

Your use of Yahoo! Groups is subject to http://docs.yahoo.com/info/terms/ 
</code></pre></div></div>

<p><strong>NOTE</strong><br />
As shown above, there are a few important features that can be identified from the email content:</p>
<ol>
  <li>Sender address, date, and time</li>
  <li>Receiver address</li>
  <li>Metadata</li>
  <li>Content data type information</li>
  <li>Title</li>
  <li>Content</li>
</ol>

<p>Fortunately, there are a few libraries which can be used to handle email content. We will use the most common one to extract specific portion of the email which are relevant to its content.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">load_email</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="n">is_spam</span><span class="p">,</span> <span class="n">data_path</span><span class="o">=</span><span class="n">FOLDER_LOC</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">
    Helper function:
        - read email file and convert it into email object
    </span><span class="sh">'''</span>
    <span class="n">subdirectory</span> <span class="o">=</span> <span class="sh">'</span><span class="s">spam</span><span class="sh">'</span> <span class="k">if</span> <span class="n">is_spam</span> <span class="k">else</span> <span class="sh">'</span><span class="s">easy_ham</span><span class="sh">'</span>
    
    <span class="c1"># open file (read binary)
</span>    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">data_path</span><span class="p">,</span> <span class="n">subdirectory</span><span class="p">,</span> <span class="n">filename</span><span class="p">),</span> <span class="sh">'</span><span class="s">rb</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">mail</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">email</span><span class="p">.</span><span class="n">parser</span><span class="p">.</span><span class="nc">BytesParser</span><span class="p">(</span><span class="n">policy</span><span class="o">=</span><span class="n">email</span><span class="p">.</span><span class="n">policy</span><span class="p">.</span><span class="n">default</span><span class="p">).</span><span class="nf">parse</span><span class="p">(</span><span class="n">mail</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load all files
</span><span class="n">ham_files</span> <span class="o">=</span> <span class="p">[</span><span class="nf">load_email</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span> <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">ham_filenames</span><span class="p">]</span>
<span class="n">spam_files</span> <span class="o">=</span> <span class="p">[</span><span class="nf">load_email</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span> <span class="k">for</span> <span class="n">filename</span> <span class="ow">in</span> <span class="n">spam_filenames</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># verify that the extraction worked
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Dataset contains {} emails.</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">ham_files</span><span class="p">)))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Dataset contains {} spams.</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">spam_files</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Dataset contains 2500 emails.
Dataset contains 500 spams.
</code></pre></div></div>

<p>Now that our files have been extracted and turned into mail object, we can easily access specific fields using get functions.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># check sender information
</span><span class="nf">print</span><span class="p">(</span><span class="n">spam_files</span><span class="p">[</span><span class="mi">10</span><span class="p">].</span><span class="nf">get_unixfrom</span><span class="p">().</span><span class="nf">strip</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="o">*</span><span class="mi">80</span><span class="p">)</span>
<span class="nf">print</span><span class="p">()</span>
<span class="c1"># check file content
</span><span class="nf">print</span><span class="p">(</span><span class="n">spam_files</span><span class="p">[</span><span class="mi">10</span><span class="p">].</span><span class="nf">get_content</span><span class="p">().</span><span class="nf">strip</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>From hurst@missouri.co.jp  Fri Aug 23 11:03:04 2002
--------------------------------------------------------------------------------

Cellular Phone Accessories All At Below Wholesale Prices!

http://202.101.163.34:81/sites/merchant/sales/

Hands Free Ear Buds 1.99! 
Phone Holsters 1.98! 
Booster Antennas Only $$0.99
Phone Cases 1.98! 
Car Chargers 1.98! 
Face Plates As Low As 0.99! 
Lithium Ion Batteries As Low As 6.94! 

http://202.101.163.34:81/sites/merchant/sales/

Click Below For Accessories On All NOKIA, MOTOROLA LG, NEXTEL, 
SAMSUNG, QUALCOMM, ERICSSON, AUDIOVOX PHONES At Below 
WHOLESALE PRICES!

http://202.101.163.34:81/sites/merchant/sales/

***If You Need Assistance Please Call Us (732) 751-1457***


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
To be removed from future mailings please send your remove 
request to: removemenow68994@btamail.net.cn 
Thank You and have a super day :)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># check sender information
</span><span class="nf">print</span><span class="p">(</span><span class="n">ham_files</span><span class="p">[</span><span class="mi">10</span><span class="p">].</span><span class="nf">get_unixfrom</span><span class="p">().</span><span class="nf">strip</span><span class="p">())</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">-</span><span class="sh">'</span><span class="o">*</span><span class="mi">80</span><span class="p">)</span>
<span class="nf">print</span><span class="p">()</span>
<span class="c1"># check file content
</span><span class="nf">print</span><span class="p">(</span><span class="n">ham_files</span><span class="p">[</span><span class="mi">10</span><span class="p">].</span><span class="nf">get_content</span><span class="p">().</span><span class="nf">strip</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>From spamassassin-devel-admin@lists.sourceforge.net  Thu Aug 22 15:25:29 2002
--------------------------------------------------------------------------------

Hello, have you seen and discussed this article and his approach?

Thank you

http://www.paulgraham.com/spam.html
-- "Hell, there are no rules here-- we're trying to accomplish something."
-- Thomas Alva Edison




-------------------------------------------------------
This sf.net email is sponsored by: OSDN - Tired of that same old
cell phone?  Get a new here for FREE!
https://www.inphonic.com/r.asp?r=sourceforge1&amp;refcode1=vs3390
_______________________________________________
Spamassassin-devel mailing list
Spamassassin-devel@lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/spamassassin-devel
</code></pre></div></div>

<p><a id="Section_23"></a></p>
<h3 id="23-handle-attachments-and-complex-email-structures">2.3 Handle Attachments and Complex Email Structures</h3>

<p>Before processing the email data, the structure of the emails must be inspected for consistency. Indeed, emails can have a variety of structure (no attachements, attachements, attachements with attachements…).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">multipart_ham</span><span class="p">,</span> <span class="n">multipart_spam</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">email</span> <span class="ow">in</span> <span class="n">ham_files</span><span class="p">:</span>
    <span class="n">multipart_ham</span><span class="o">+=</span><span class="n">email</span><span class="p">.</span><span class="nf">is_multipart</span><span class="p">()</span>
    
<span class="k">for</span> <span class="n">email</span> <span class="ow">in</span> <span class="n">spam_files</span><span class="p">:</span>
    <span class="n">multipart_spam</span><span class="o">+=</span><span class="n">email</span><span class="p">.</span><span class="nf">is_multipart</span><span class="p">()</span>
    
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">{} hams contain multiparts.</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">multipart_ham</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">{} spams contain multiparts.</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">multipart_spam</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>92 hams contain multiparts.
98 spams contain multiparts.
</code></pre></div></div>

<p>The next step consists of inspecting the email structures. The goal is to understand what structures are contained in our dataset and identify if further post-processing is required.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_email_structure</span><span class="p">(</span><span class="n">mail</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">
    Recursive function used to retrieve email content
    </span><span class="sh">'''</span>
    <span class="c1"># for multipart email, recursion on each part
</span>    <span class="k">if</span> <span class="n">mail</span><span class="p">.</span><span class="nf">is_multipart</span><span class="p">():</span>
        <span class="n">payload</span> <span class="o">=</span> <span class="n">mail</span><span class="p">.</span><span class="nf">get_payload</span><span class="p">()</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">multipart({})</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="nf">get_email_structure</span><span class="p">(</span><span class="n">sub_mail</span><span class="p">)</span> <span class="k">for</span> <span class="n">sub_mail</span> <span class="ow">in</span> <span class="n">payload</span><span class="p">]))</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">mail</span><span class="p">.</span><span class="nf">get_content_type</span><span class="p">()</span>
    
<span class="k">def</span> <span class="nf">structures_counter</span><span class="p">(</span><span class="n">emails</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">
    Return counter containing key: email structure, value: count
    </span><span class="sh">'''</span>
    <span class="c1"># use counter instead of dictionary to handle key initialization
</span>    <span class="n">structures</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
    
    <span class="c1"># loop over email -&gt; get structure -&gt; update counter
</span>    <span class="k">for</span> <span class="n">email</span> <span class="ow">in</span> <span class="n">emails</span><span class="p">:</span>
        <span class="n">structure</span> <span class="o">=</span> <span class="nf">get_email_structure</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
        <span class="n">structures</span><span class="p">[</span><span class="n">structure</span><span class="p">]</span> <span class="o">+=</span> <span class="mi">1</span>
    <span class="k">return</span> <span class="n">structures</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">structures_counter</span><span class="p">(</span><span class="n">ham_files</span><span class="p">).</span><span class="nf">most_common</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[('text/plain', 2408),
 ('multipart(text/plain, application/pgp-signature)', 66),
 ('multipart(text/plain, text/html)', 8),
 ('multipart(text/plain, text/plain)', 4),
 ('multipart(text/plain)', 3),
 ('multipart(text/plain, application/octet-stream)', 2),
 ('multipart(text/plain, text/enriched)', 1),
 ('multipart(text/plain, application/ms-tnef, text/plain)', 1),
 ('multipart(multipart(text/plain, text/plain, text/plain), application/pgp-signature)',
  1),
 ('multipart(text/plain, video/mng)', 1),
 ('multipart(text/plain, multipart(text/plain))', 1),
 ('multipart(text/plain, application/x-pkcs7-signature)', 1),
 ('multipart(text/plain, multipart(text/plain, text/plain), text/rfc822-headers)',
  1),
 ('multipart(text/plain, multipart(text/plain, text/plain), multipart(multipart(text/plain, application/x-pkcs7-signature)))',
  1),
 ('multipart(text/plain, application/x-java-applet)', 1)]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">structures_counter</span><span class="p">(</span><span class="n">spam_files</span><span class="p">).</span><span class="nf">most_common</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[('text/plain', 218),
 ('text/html', 183),
 ('multipart(text/plain, text/html)', 45),
 ('multipart(text/html)', 20),
 ('multipart(text/plain)', 19),
 ('multipart(multipart(text/html))', 5),
 ('multipart(text/plain, image/jpeg)', 3),
 ('multipart(text/html, application/octet-stream)', 2),
 ('multipart(text/plain, application/octet-stream)', 1),
 ('multipart(text/html, text/plain)', 1),
 ('multipart(multipart(text/html), application/octet-stream, image/jpeg)', 1),
 ('multipart(multipart(text/plain, text/html), image/gif)', 1),
 ('multipart/alternative', 1)]
</code></pre></div></div>

<p><strong>Note</strong>:<br />
The most common structures are the text/plain and text/html structures. A glance at the structures show that the text/html strcuture is fairly common for spams but not for regular emails.</p>

<hr />
<p><a id="Section_3"></a></p>
<h2 id="3-model">3. Model</h2>
<p><a id="Section_31"></a></p>
<h3 id="31-data-preparation">3.1. Data Preparation</h3>

<p>Before diving into the dataset, it is important to split it into a training and test sets.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create y array containing binary classification
</span><span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">ham_files</span> <span class="o">+</span> <span class="n">spam_files</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">ham_files</span><span class="p">)</span> <span class="o">+</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="nf">len</span><span class="p">(</span><span class="n">spam_files</span><span class="p">))</span>

<span class="c1"># split dataset
</span><span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.2</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Training set size: </span><span class="se">\t</span><span class="s">{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Test set size: </span><span class="se">\t\t</span><span class="s">{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Target train set size: </span><span class="se">\t</span><span class="s">{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Target test set size: </span><span class="se">\t</span><span class="s">{}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">y_test</span><span class="p">.</span><span class="n">shape</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training set size: 	(2400,)
Test set size: 		(600,)
Target train set size: 	(2400,)
Target test set size: 	(600,)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># helper function: retrieve text content from html content
</span>
<span class="k">def</span> <span class="nf">html_to_plain_text</span><span class="p">(</span><span class="n">htlm</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">
    Return plain text from html content.
    </span><span class="sh">'''</span>
    
    <span class="c1"># replace hyperlink
</span>    <span class="c1"># flags
</span>    <span class="c1"># re.I: ignore case
</span>    <span class="c1"># re.M: multiline
</span>    <span class="c1"># re.S: make / match newline
</span>    <span class="n">htlm</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sh">'</span><span class="s">&lt;a\s.*?&gt;</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s"> HYPERLINK </span><span class="sh">'</span><span class="p">,</span> <span class="n">htlm</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="p">.</span><span class="n">M</span> <span class="o">|</span> <span class="n">re</span><span class="p">.</span><span class="n">S</span> <span class="o">|</span> <span class="n">re</span><span class="p">.</span><span class="n">I</span><span class="p">)</span>
    
    <span class="n">soup</span> <span class="o">=</span> <span class="nc">BeautifulSoup</span><span class="p">(</span><span class="n">htlm</span><span class="p">,</span> <span class="sh">'</span><span class="s">html.parser</span><span class="sh">'</span><span class="p">)</span>
    
    <span class="c1"># kill all script and style elements
</span>    <span class="k">for</span> <span class="n">script</span> <span class="ow">in</span> <span class="nf">soup</span><span class="p">([</span><span class="sh">"</span><span class="s">script</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">style</span><span class="sh">"</span><span class="p">]):</span>
        <span class="n">script</span><span class="p">.</span><span class="nf">extract</span><span class="p">()</span>    <span class="c1"># rip it out
</span>
    <span class="c1"># get text
</span>    <span class="n">text</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="nf">get_text</span><span class="p">()</span>
    
    <span class="c1"># break into lines and remove leading and trailing space on each
</span>    <span class="n">lines</span> <span class="o">=</span> <span class="p">(</span><span class="n">line</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">text</span><span class="p">.</span><span class="nf">splitlines</span><span class="p">())</span>
    
    <span class="c1"># break multi-headlines into a line each
</span>    <span class="n">chunks</span> <span class="o">=</span> <span class="p">(</span><span class="n">phrase</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span> <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span> <span class="k">for</span> <span class="n">phrase</span> <span class="ow">in</span> <span class="n">line</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">  </span><span class="sh">"</span><span class="p">))</span>
    
    <span class="c1"># drop blank lines
</span>    <span class="n">text</span> <span class="o">=</span> <span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">chunk</span> <span class="k">for</span> <span class="n">chunk</span> <span class="ow">in</span> <span class="n">chunks</span> <span class="k">if</span> <span class="n">chunk</span><span class="p">)</span>
    
    <span class="k">return</span> <span class="nf">unescape</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</code></pre></div></div>

<p>Let’s try if our script works on some html content. Note that based on our inspection of the email structures, the html strucutre is only used for spams.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># find spam with the text/html structure
</span><span class="n">html_spam_emails</span> <span class="o">=</span> <span class="p">[</span><span class="n">email</span> <span class="k">for</span> <span class="n">email</span> <span class="ow">in</span> <span class="n">X_train</span><span class="p">[</span><span class="n">y_train</span><span class="o">==</span><span class="mi">1</span><span class="p">]</span>
                    <span class="k">if</span> <span class="nf">get_email_structure</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="o">==</span> <span class="sh">"</span><span class="s">text/html</span><span class="sh">"</span><span class="p">]</span>

<span class="c1"># select a candidate
</span><span class="n">sample_html_spam</span> <span class="o">=</span> <span class="n">html_spam_emails</span><span class="p">[</span><span class="mi">24</span><span class="p">]</span>
<span class="nf">print</span><span class="p">(</span><span class="n">sample_html_spam</span><span class="p">.</span><span class="nf">get_content</span><span class="p">().</span><span class="nf">strip</span><span class="p">()[</span><span class="mi">0</span><span class="p">:</span><span class="mi">5000</span><span class="p">],</span><span class="sh">'</span><span class="s">.....</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;html&gt;
&lt;head&gt;
&lt;meta http-equiv="Content-Type" content="text/html; 
charset=iso-8859-1"&gt;
&lt;/head&gt;

&lt;body bgcolor="#FFFFFF"&gt;
&lt;table width="58%" height="257"&gt;
  &lt;tr valign="top"&gt; 
    &lt;td height="253"&gt; 
      &lt;p&gt;&lt;font size="3"&gt;&lt;b&gt;Fortunes are literally being made in this new marketplace.&lt;/b&gt;&lt;/font&gt; 
      &lt;/p&gt;
      &lt;p&gt;O&lt;font size="3"&gt;&lt;/font&gt;&lt;font size="3"&gt;ver &lt;b&gt;$$9 Billion&lt;/b&gt; in merchandise 
        was sold on &lt;b&gt;eBay&lt;/b&gt; in 2001 by people just like you - &lt;u&gt;right from 
        their homes&lt;/u&gt;! &lt;/font&gt;&lt;/p&gt;
      &lt;p&gt;&lt;font size="3"&gt;Now you too can learn the secrets of &lt;b&gt;successful selling 
        &lt;/b&gt;on&lt;b&gt; eBay&lt;/b&gt; and &lt;b&gt;make a staggering income&lt;/b&gt; from the comfort 
        of &lt;b&gt;your own home&lt;/b&gt;. If you are &lt;b&gt;motivated&lt;/b&gt;, capable of having 
        an&lt;b&gt; open mind&lt;/b&gt;, and can follow simple directions, then &lt;a href="http://www.nationalbizcorp.com/ebooks"&gt;visit 
        us here&lt;/a&gt;. If server busy - &lt;a href="http://www.generaledu.com/ebooks"&gt;alternate.&lt;/a&gt;&lt;/font&gt;&lt;/p&gt;
      &lt;p&gt;&lt;font size="2"&gt;You received this offer as a result of an affiliate relationship 
        with one of our marketing partners. If you are not interested in future 
        offers &lt;a href="http://www.nationalbizcorp.com/remove.html"&gt;go here.&lt;/a&gt;&lt;/font&gt;&lt;/p&gt;
      &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &lt;/p&gt;
&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &lt;/p&gt;
&lt;/body&gt;
&lt;/html&gt; .....
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="nf">html_to_plain_text</span><span class="p">(</span><span class="n">sample_html_spam</span><span class="p">.</span><span class="nf">get_content</span><span class="p">())[:</span><span class="mi">5000</span><span class="p">],</span> <span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fortunes are literally being made in this new marketplace.
Over $$9 Billion in merchandise
was sold on eBay in 2001 by people just like you - right from
their homes!
Now you too can learn the secrets of successful selling
on eBay and make a staggering income from the comfort
of your own home. If you are motivated, capable of having
an open mind, and can follow simple directions, then
HYPERLINK visit
us here. If server busy -
HYPERLINK alternate.
You received this offer as a result of an affiliate relationship
with one of our marketing partners. If you are not interested in future
offers
HYPERLINK go here. ...
</code></pre></div></div>

<p>We now have a conversion function for html content, we now need a tool to process any email regardless its content and return a string.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">email_to_text</span><span class="p">(</span><span class="n">email</span><span class="p">):</span>
    <span class="sh">'''</span><span class="s">
    Return text/plain email structure or converted html structure.
    </span><span class="sh">'''</span>
    
    <span class="c1"># loop over email content to find text/plain or text/html
</span>    <span class="k">for</span> <span class="n">part</span> <span class="ow">in</span> <span class="n">email</span><span class="p">.</span><span class="nf">walk</span><span class="p">():</span>
        
        <span class="c1"># retrieve content type
</span>        <span class="n">content_type</span> <span class="o">=</span> <span class="n">part</span><span class="p">.</span><span class="nf">get_content_type</span><span class="p">()</span>
        
        <span class="c1"># skip content if type is not text/plain or text/html
</span>        <span class="k">if</span> <span class="ow">not</span> <span class="n">content_type</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">'</span><span class="s">text/plain</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">text/html</span><span class="sh">'</span><span class="p">):</span>
            <span class="k">continue</span>
        
        <span class="c1"># try to extract content (error with encoding)
</span>        <span class="k">try</span><span class="p">:</span>
            <span class="n">content</span> <span class="o">=</span> <span class="n">part</span><span class="p">.</span><span class="nf">get_content</span><span class="p">()</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">content</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">part</span><span class="p">.</span><span class="nf">get_payload</span><span class="p">())</span>
        
        <span class="c1"># return plain text or converted html
</span>        <span class="k">if</span> <span class="n">content_type</span> <span class="o">==</span> <span class="sh">'</span><span class="s">text/plain</span><span class="sh">'</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">content</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">html</span> <span class="o">=</span> <span class="n">content</span>
            <span class="k">return</span> <span class="nf">html_to_plain_text</span><span class="p">(</span><span class="n">html</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="nf">email_to_text</span><span class="p">(</span><span class="n">sample_html_spam</span><span class="p">)[:</span><span class="mi">200</span><span class="p">],</span> <span class="sh">"</span><span class="s">...</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Fortunes are literally being made in this new marketplace.
Over $$9 Billion in merchandise
was sold on eBay in 2001 by people just like you - right from
their homes!
Now you too can learn the secrets o ...
</code></pre></div></div>

<p>In order to generalize the prediction of our model, we are going to use a stemmer (from nltk). A stemmer replaces a word by its root word. Let’s look at an example.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">stemmer</span> <span class="o">=</span> <span class="n">nltk</span><span class="p">.</span><span class="nc">PorterStemmer</span><span class="p">()</span>

<span class="k">for</span> <span class="n">w</span> <span class="ow">in</span> <span class="p">(</span><span class="sh">'</span><span class="s">association</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">associated</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">associates</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">company</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">corporation</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">incorporated</span><span class="sh">'</span><span class="p">):</span>
    <span class="nf">print </span><span class="p">(</span><span class="sh">'</span><span class="s">{0}: {1}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">w</span><span class="p">,</span><span class="n">stemmer</span><span class="p">.</span><span class="nf">stem</span><span class="p">(</span><span class="n">w</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>association: associ
associated: associ
associates: associ
company: compani
corporation: corpor
incorporated: incorpor
</code></pre></div></div>

<p>One of the typical transformation when dealing with texts is to remove stop words (most common english words). Thankfully, the NLTK library contains a list of stopwords.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">nltk.corpus</span> <span class="kn">import</span> <span class="n">stopwords</span> 
<span class="kn">from</span> <span class="n">nltk.tokenize</span> <span class="kn">import</span> <span class="n">word_tokenize</span> 
<span class="n">nltk</span><span class="p">.</span><span class="nf">download</span><span class="p">(</span><span class="sh">'</span><span class="s">stopwords</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[nltk_data] Downloading package stopwords to
[nltk_data]     /Users/thibault.dody/nltk_data...
[nltk_data]   Unzipping corpora/stopwords.zip.





True
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">emailToWordCount</span><span class="p">(</span><span class="n">BaseEstimator</span><span class="p">,</span> <span class="n">TransformerMixin</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">replace_urls</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">stemming</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">replace_numbers</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">lower_case</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">remove_punctuation</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">remove_stop_words</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">replace_urls</span> <span class="o">=</span> <span class="n">replace_urls</span>
        <span class="n">self</span><span class="p">.</span><span class="n">stemming</span> <span class="o">=</span> <span class="n">stemming</span>
        <span class="n">self</span><span class="p">.</span><span class="n">replace_numbers</span> <span class="o">=</span> <span class="n">replace_numbers</span>
        <span class="n">self</span><span class="p">.</span><span class="n">lower_case</span> <span class="o">=</span> <span class="n">lower_case</span>
        <span class="n">self</span><span class="p">.</span><span class="n">remove_punctuation</span> <span class="o">=</span> <span class="n">remove_punctuation</span>
        <span class="n">self</span><span class="p">.</span><span class="n">remove_stop_words</span> <span class="o">=</span> <span class="n">remove_stop_words</span>
        
    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span>
        
    <span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">X_transformed</span> <span class="o">=</span> <span class="p">[]</span>
        
        <span class="k">for</span> <span class="n">email</span> <span class="ow">in</span> <span class="n">X</span><span class="p">:</span>
            
            <span class="c1"># retrieve text content
</span>            <span class="n">text</span> <span class="o">=</span> <span class="nf">email_to_text</span><span class="p">(</span><span class="n">email</span><span class="p">)</span> <span class="ow">or</span> <span class="sh">""</span>
            
            <span class="c1"># convert url to token
</span>            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">replace_urls</span><span class="p">:</span>
                <span class="n">extractor</span> <span class="o">=</span> <span class="nc">URLExtract</span><span class="p">()</span>
                <span class="k">for</span> <span class="n">url</span> <span class="ow">in</span> <span class="nf">list</span><span class="p">(</span><span class="nf">set</span><span class="p">(</span><span class="n">extractor</span><span class="p">.</span><span class="nf">find_urls</span><span class="p">(</span><span class="n">text</span><span class="p">))):</span>
                    <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="sh">'</span><span class="s"> URL </span><span class="sh">'</span><span class="p">)</span>
            
            <span class="c1"># replace float, integers, scientific notation, and percent
</span>            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">replace_numbers</span><span class="p">:</span>
                <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">([-+]?\d*\.?\d+[eE]?[+-]?\d*[%]?)</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">NUMBER</span><span class="sh">'</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
                
            <span class="c1"># switch content to lower case
</span>            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">lower_case</span><span class="p">:</span>
                <span class="n">text</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">lower</span><span class="p">()</span>
                
            <span class="c1"># remove punctuation
</span>            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">remove_punctuation</span><span class="p">:</span>
                <span class="n">text</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nf">sub</span><span class="p">(</span><span class="sa">r</span><span class="sh">'</span><span class="s">\W+</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">flags</span><span class="o">=</span><span class="n">re</span><span class="p">.</span><span class="n">M</span><span class="p">)</span>
                
            <span class="c1"># split email
</span>            <span class="n">email_spilt</span> <span class="o">=</span> <span class="n">text</span><span class="p">.</span><span class="nf">split</span><span class="p">()</span>
            
            <span class="c1"># remove stop words (english)
</span>            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">remove_stop_words</span><span class="p">:</span>
                <span class="n">stop_words</span> <span class="o">=</span> <span class="nf">set</span><span class="p">(</span><span class="n">stopwords</span><span class="p">.</span><span class="nf">words</span><span class="p">(</span><span class="sh">'</span><span class="s">english</span><span class="sh">'</span><span class="p">))</span> 
                <span class="n">email_split_clean</span> <span class="o">=</span> <span class="p">[]</span>
                <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">email_spilt</span><span class="p">:</span>
                    <span class="k">if</span> <span class="ow">not</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">stop_words</span><span class="p">:</span>
                        <span class="n">email_split_clean</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
                <span class="n">email_spilt</span> <span class="o">=</span> <span class="n">email_split_clean</span>
            
            <span class="n">word_counts</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">(</span><span class="n">email_spilt</span><span class="p">)</span>
            
            <span class="c1"># replace words using stemming
</span>            <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">stemming</span><span class="p">:</span>
                <span class="n">stemmed_word_count</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
                <span class="k">for</span> <span class="n">word</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">word_counts</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                    <span class="n">stemmed_word</span> <span class="o">=</span> <span class="n">stemmer</span><span class="p">.</span><span class="nf">stem</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
                    <span class="n">stemmed_word_count</span><span class="p">[</span><span class="n">stemmed_word</span><span class="p">]</span> <span class="o">+=</span> <span class="n">count</span>
                
                <span class="n">word_counts</span> <span class="o">=</span> <span class="n">stemmed_word_count</span>
            
            <span class="n">X_transformed</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">word_counts</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">X_transformed</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_sample</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">2</span><span class="p">]</span>
<span class="n">X_sample_wordcounts</span> <span class="o">=</span> <span class="nf">emailToWordCount</span><span class="p">().</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X_sample</span><span class="p">)</span>
<span class="n">X_sample_wordcounts</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([Counter({'chuck': 1, 'murcko': 1, 'wrote': 1, 'stuff': 1, 'yawn': 1, 'r': 1}),
       Counter({'christian': 3, 'jefferson': 2, 'superstit': 2, 'one': 2, 'half': 2, 'rogueri': 2, 'teach': 2, 'jesu': 2, 'interest': 1, 'quot': 1, 'url': 1, 'thoma': 1, 'examin': 1, 'known': 1, 'word': 1, 'find': 1, 'particular': 1, 'redeem': 1, 'featur': 1, 'alik': 1, 'found': 1, 'fabl': 1, 'mytholog': 1, 'million': 1, 'innoc': 1, 'men': 1, 'women': 1, 'children': 1, 'sinc': 1, 'introduct': 1, 'burnt': 1, 'tortur': 1, 'fine': 1, 'imprison': 1, 'effect': 1, 'coercion': 1, 'make': 1, 'world': 1, 'fool': 1, 'hypocrit': 1, 'support': 1, 'error': 1, 'earth': 1, 'six': 1, 'histor': 1, 'american': 1, 'john': 1, 'e': 1, 'remsburg': 1, 'letter': 1, 'william': 1, 'short': 1, 'becom': 1, 'pervert': 1, 'system': 1, 'ever': 1, 'shone': 1, 'man': 1, 'absurd': 1, 'untruth': 1, 'perpetr': 1, 'upon': 1, 'larg': 1, 'band': 1, 'dupe': 1, 'import': 1, 'led': 1, 'paul': 1, 'first': 1, 'great': 1, 'corrupt': 1})],
      dtype=object)
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">emailToWordCount</code> is the first segment of the full transformation pipeline. The second stage consists of a vectorizer. The goal is to convert the counter generated for each email into a vector of size \(N\) where \(N\) is the size of our vocabulary. The <code class="language-plaintext highlighter-rouge">fit</code> function will use the content of the train set to define what are the most frequent words.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">scipy.sparse</span> <span class="kn">import</span> <span class="n">csr_matrix</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">WordCountToVector</span><span class="p">(</span><span class="n">BaseEstimator</span><span class="p">,</span> <span class="n">TransformerMixin</span><span class="p">):</span>
    
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">vocabulary_size</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span> <span class="n">cap_size</span><span class="o">=</span><span class="mi">10</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vocabulary_size</span> <span class="o">=</span> <span class="n">vocabulary_size</span>
        <span class="n">self</span><span class="p">.</span><span class="n">cap_size</span> <span class="o">=</span> <span class="n">cap_size</span>
        
    <span class="k">def</span> <span class="nf">fit</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="n">total_count</span> <span class="o">=</span> <span class="nc">Counter</span><span class="p">()</span>
        <span class="k">for</span> <span class="n">word_count</span> <span class="ow">in</span> <span class="n">X</span><span class="p">:</span>
            <span class="k">for</span> <span class="n">word</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">word_count</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                <span class="n">total_count</span><span class="p">[</span><span class="n">word</span><span class="p">]</span> <span class="o">+=</span> <span class="nf">min</span><span class="p">(</span><span class="n">count</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">cap_size</span><span class="p">)</span>
                
        <span class="n">most_common</span> <span class="o">=</span> <span class="n">total_count</span><span class="p">.</span><span class="nf">most_common</span><span class="p">()[:</span><span class="n">self</span><span class="p">.</span><span class="n">vocabulary_size</span><span class="p">]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">most_common</span> <span class="o">=</span> <span class="n">most_common</span>
        <span class="n">self</span><span class="p">.</span><span class="n">vocabulary_</span> <span class="o">=</span> <span class="p">{</span><span class="n">word</span><span class="p">:</span><span class="n">index</span><span class="o">+</span><span class="mi">1</span> <span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">count</span><span class="p">)</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">most_common</span><span class="p">)}</span>
        <span class="k">return</span> <span class="n">self</span>
        
    <span class="k">def</span> <span class="nf">transform</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
        <span class="c1"># array mapping: rows, cols, data
</span>        <span class="c1"># then create array using the mapping
</span>        <span class="n">rows</span> <span class="o">=</span> <span class="p">[]</span>   <span class="c1"># one row per email
</span>        <span class="n">cols</span> <span class="o">=</span> <span class="p">[]</span>   <span class="c1"># one col per word
</span>        <span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>   <span class="c1"># word counter
</span>        <span class="k">for</span> <span class="n">row</span><span class="p">,</span> <span class="n">word_count</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">X</span><span class="p">):</span>
            <span class="k">for</span> <span class="n">word</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">word_count</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
                <span class="n">rows</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
                <span class="n">cols</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">vocabulary_</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">word</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span>  <span class="c1"># &lt;OOV&gt; is index 0 (key is not found)
</span>                <span class="n">data</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">count</span><span class="p">)</span>
        
        <span class="c1"># csr_matrix((data, ij), [shape=(M, N)]
</span>        <span class="k">return</span> <span class="nf">csr_matrix</span><span class="p">((</span><span class="n">data</span><span class="p">,</span> <span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">cols</span><span class="p">)),</span> <span class="n">shape</span><span class="o">=</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">X</span><span class="p">),</span> <span class="n">self</span><span class="p">.</span><span class="n">vocabulary_size</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<p>A small sample of email is used to test the transformation.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vocab_transformer</span> <span class="o">=</span> <span class="nc">WordCountToVector</span><span class="p">(</span><span class="n">vocabulary_size</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">cap_size</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
<span class="n">X_sample_vectors</span> <span class="o">=</span> <span class="n">vocab_transformer</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X_sample_wordcounts</span><span class="p">)</span>
<span class="n">X_sample_vectors</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;2x11 sparse matrix of type '&lt;class 'numpy.int64'&gt;'
	with 12 stored elements in Compressed Sparse Row format&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_sample_vectors</span><span class="p">.</span><span class="nf">toarray</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array([[ 4,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1],
       [63,  3,  2,  2,  2,  2,  2,  2,  2,  0,  0]], dtype=int64)
</code></pre></div></div>

<p>As shown above, each email is converted into a sparse vector. The weights of the vector correspond to the number of occurrence of the specific word. The index 0 corresponds to words not contained in the vocabulary.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">vocab_transformer</span><span class="p">.</span><span class="n">vocabulary_</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{'christian': 1,
 'jefferson': 2,
 'superstit': 3,
 'one': 4,
 'half': 5,
 'rogueri': 6,
 'teach': 7,
 'jesu': 8,
 'chuck': 9,
 'murcko': 10}
</code></pre></div></div>

<p>The mapping between the model vocabulary and the weight index in the \(X\) matrix is stored in a dictionary.</p>

<p><a id="Section_32"></a></p>
<h3 id="32-classifier">3.2. Classifier</h3>

<p>Let’s start to make predictions with a simple model, a logistic regression. It is common to assess the potential of a model by simply training a model using its default hyperparameters. If the results are promising, time can then be invested to tune the model.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create full pipeline email -&gt; wordCount -&gt; countVector
</span><span class="n">preprocess_pipeline</span> <span class="o">=</span> <span class="nc">Pipeline</span><span class="p">([</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">email_to_wordcount</span><span class="sh">"</span><span class="p">,</span> <span class="nf">emailToWordCount</span><span class="p">()),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">wordcount_to_vector</span><span class="sh">"</span><span class="p">,</span> <span class="nc">WordCountToVector</span><span class="p">()),</span>
<span class="p">])</span>

<span class="c1"># transform the data
</span><span class="n">X_train_transformed</span> <span class="o">=</span> <span class="n">preprocess_pipeline</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create model and perform cross-validation
</span><span class="n">log_clf</span> <span class="o">=</span> <span class="nc">LogisticRegression</span><span class="p">(</span><span class="n">solver</span><span class="o">=</span><span class="sh">"</span><span class="s">liblinear</span><span class="sh">"</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">)</span>
<span class="n">score</span> <span class="o">=</span> <span class="nf">cross_val_score</span><span class="p">(</span><span class="n">log_clf</span><span class="p">,</span> <span class="n">X_train_transformed</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.
[Parallel(n_jobs=4)]: Done   3 out of   3 | elapsed:    1.6s finished
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Mean accuracy over {0} folds: {1:.2f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">score</span><span class="p">),</span><span class="n">score</span><span class="p">.</span><span class="nf">mean</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Standard deviation accuracy over {0} folds: {1:.2f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">score</span><span class="p">),</span><span class="n">score</span><span class="p">.</span><span class="nf">std</span><span class="p">()</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mean accuracy over 3 folds: 98.96%
Standard deviation accuracy over 3 folds: 0.21%
</code></pre></div></div>

<p>Based on the above, it appears that the logistic regression performs relatively well. With a mean accuracy of 98.96% on a three-fold cross validation, this simple model yields promising results.</p>

<p><a id="Section_33"></a></p>
<h3 id="33-model-tuning">3.3. Model Tuning</h3>

<p>Now that we have identified a promising model, we are going to tune its hyperparameters. To do so, let’s create a pipeline containing three stages.</p>
<ol>
  <li>Email to Word Count: we will tune the stemming (True or False) and the use of stop words (True or False)</li>
  <li>Word Count to Vector: we will tune the cap size used to define the most used words</li>
  <li>Logistic Regression: we will tune the regularization parameter (C) and the penalty type (L1 or L2)</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create full pipeline
</span><span class="n">full_pipeline</span> <span class="o">=</span> <span class="nc">Pipeline</span><span class="p">([</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">email_to_wordcount</span><span class="sh">"</span><span class="p">,</span> <span class="nf">emailToWordCount</span><span class="p">()),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">wordcount_to_vector</span><span class="sh">"</span><span class="p">,</span> <span class="nc">WordCountToVector</span><span class="p">()),</span>
    <span class="p">(</span><span class="sh">"</span><span class="s">clf_log_reg</span><span class="sh">"</span><span class="p">,</span><span class="nc">LogisticRegression</span><span class="p">())</span>
<span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create candidates value for hyperparameters
</span><span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">email_to_wordcount__stemming</span><span class="sh">"</span><span class="p">:[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">email_to_wordcount__remove_stop_words</span><span class="sh">"</span><span class="p">:[</span><span class="bp">True</span><span class="p">,</span> <span class="bp">False</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">wordcount_to_vector__cap_size</span><span class="sh">"</span><span class="p">:[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">25</span><span class="p">,</span> <span class="mi">50</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">clf_log_reg__penalty</span><span class="sh">"</span><span class="p">:[</span><span class="sh">'</span><span class="s">l1</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">l2</span><span class="sh">'</span><span class="p">],</span>
    <span class="sh">"</span><span class="s">clf_log_reg__C</span><span class="sh">"</span><span class="p">:</span><span class="n">np</span><span class="p">.</span><span class="nf">logspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1"># create grid-search
</span><span class="n">clf</span> <span class="o">=</span> <span class="nc">GridSearchCV</span><span class="p">(</span><span class="n">full_pipeline</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

<span class="c1"># fit grid-search
</span><span class="n">best_model</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Parallel(n_jobs=4)]: Using backend LokyBackend with 4 concurrent workers.


Fitting 3 folds for each of 120 candidates, totalling 360 fits


[Parallel(n_jobs=4)]: Done  24 tasks      | elapsed: 15.7min
[Parallel(n_jobs=4)]: Done 120 tasks      | elapsed: 82.0min
[Parallel(n_jobs=4)]: Done 280 tasks      | elapsed: 172.9min
[Parallel(n_jobs=4)]: Done 360 out of 360 | elapsed: 210.7min finished
/anaconda3/lib/python3.6/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.
  FutureWarning)
</code></pre></div></div>

<p>Once the tuning has been performed, we can inspect what model obtained the best accuracy on the test fold and we can also print the best combination of hyperparameters.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Grid Search best accuracy: {:.2f}%</span><span class="se">\n</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">clf</span><span class="p">.</span><span class="n">best_score_</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Grid Search best parameters:</span><span class="sh">'</span><span class="p">)</span>
<span class="k">for</span> <span class="n">param</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">clf</span><span class="p">.</span><span class="n">best_params_</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">  </span><span class="sh">'</span><span class="p">,</span><span class="n">param</span><span class="p">,</span><span class="sh">'</span><span class="s">=</span><span class="sh">'</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Grid Search best accuracy: 99.21%

Grid Search best parameters:
   clf_log_reg__C = 1.0
   clf_log_reg__penalty = l2
   email_to_wordcount__remove_stop_words = True
   email_to_wordcount__stemming = True
   wordcount_to_vector__cap_size = 50
</code></pre></div></div>

<p>As shown above, our model reached an accuracy of 99.21% on the test fold. This is a slight improve compared to our previous model.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create a model based on the best combination of parameters
</span><span class="n">best_clf</span> <span class="o">=</span> <span class="nc">LogisticRegression</span><span class="p">(</span><span class="n">solver</span><span class="o">=</span><span class="sh">"</span><span class="s">liblinear</span><span class="sh">"</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">42</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">penalty</span><span class="o">=</span><span class="sh">'</span><span class="s">l2</span><span class="sh">'</span><span class="p">)</span>
<span class="n">best_clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train_transformed</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=100,
                   multi_class='warn', n_jobs=None, penalty='l2',
                   random_state=42, solver='liblinear', tol=0.0001, verbose=0,
                   warm_start=False)
</code></pre></div></div>

<hr />
<p><a id="Section_4"></a></p>
<h2 id="4-conclusion">4. Conclusion</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># make prediction on training set
</span><span class="n">y_train_pred</span> <span class="o">=</span> <span class="n">best_clf</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_train_transformed</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Results on training set</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">y_train_pred</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]),</span> <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Results on train set</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Precision: {:.2f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">precision_score</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">y_train_pred</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Recall: {:.2f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">recall_score</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">y_train_pred</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Results on training set

Precision: 100.00%
Recall: 99.01%
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-09-06-Spam-Detection/output_71_1.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># make prediction on test set
</span><span class="n">X_test_transformed</span> <span class="o">=</span> <span class="n">preprocess_pipeline</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="n">y_test_pred</span> <span class="o">=</span> <span class="n">best_clf</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_transformed</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Results on test set</span><span class="se">\n</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_test_pred</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]),</span> <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Results on test set</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Precision: {:.2f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">precision_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_test_pred</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Recall: {:.2f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">recall_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">y_test_pred</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Results on test set

Precision: 98.89%
Recall: 93.68%
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-09-06-Spam-Detection/output_72_1.png" />
</figure>

<p><strong>Note on the metrics</strong>:<br />
The basic metric for this problem is the accuracy (i.e. the ratio of the number of correct predictions and the number of total predictions). However, for cases such as email spam, one can decide to look at the problem from a different angle. Indeed, should we be concern about the type of errors the model is making? For the case of spam detection, do we care more if an email is incorrectly specified as a spam or if a spam is incorrectly specified as a normal email. It seems that the misclassification of emails as spams can cause the most harm to a user (professionally or personally). Indeed, users tend to never look into their spam folder. So if an important email is classified as spam, our users may be more impacted than having one spam in his folder. One additional aspect of this problem is human performance. Even if a spam is incorrectly filtered and ends up in the user’s mailbox, human are good at identifying text content and therefore detect spam content. In conclusion, for two models leading to the same accuracy, the model with the highest <strong>Precision</strong> (TP / [TP+FP] ) is to be chosen.</p>

<p>One of the benefits of using linear models such as linear regressions or logistic regressions lies in their interpretability. We can now look at the model weights and relate them to the vocabulary words they stand for.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Extract vocabulary from pipeline
</span><span class="n">word_to_index_vocab</span> <span class="o">=</span> <span class="n">preprocess_pipeline</span><span class="p">.</span><span class="n">named_steps</span><span class="p">[</span><span class="sh">'</span><span class="s">wordcount_to_vector</span><span class="sh">'</span><span class="p">].</span><span class="n">vocabulary_</span>
<span class="n">index_to_word_vocab</span> <span class="o">=</span> <span class="nf">dict</span><span class="p">(</span><span class="nf">zip</span><span class="p">(</span><span class="n">word_to_index_vocab</span><span class="p">.</span><span class="nf">values</span><span class="p">(),</span> <span class="n">word_to_index_vocab</span><span class="p">.</span><span class="nf">keys</span><span class="p">()))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sorted_weights</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">argsort</span><span class="p">(</span><span class="n">best_clf</span><span class="p">.</span><span class="n">coef_</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># print the 20 words with the largest weights leading to the 'ham' classification
</span><span class="k">for</span> <span class="n">loc</span> <span class="ow">in</span> <span class="n">sorted_weights</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">20</span><span class="p">:]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">index: {0}, word: {1}, coeff: {2:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">loc</span><span class="p">,</span> <span class="n">index_to_word_vocab</span><span class="p">[</span><span class="n">loc</span><span class="p">],</span> <span class="n">best_clf</span><span class="p">.</span><span class="n">coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="n">loc</span><span class="p">]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>index: 413, word: repli, coeff: 0.413
index: 3283, word: vip, coeff: 0.430
index: 411, word: card, coeff: 0.433
index: 96, word: site, coeff: 0.435
index: 128, word: offer, coeff: 0.437
index: 137, word: today, coeff: 0.466
index: 987, word: adult, coeff: 0.468
index: 37, word: receiv, coeff: 0.469
index: 1474, word: freebsd, coeff: 0.483
index: 474, word: guarante, coeff: 0.514
index: 12, word: email, coeff: 0.524
index: 235, word: access, coeff: 0.529
index: 9687, word: 全球email地址销售网, coeff: 0.530
index: 18, word: free, coeff: 0.634
index: 62, word: remov, coeff: 0.717
index: 4982, word: webmak, coeff: 0.744
index: 512, word: visit, coeff: 1.006
index: 55, word: pleas, coeff: 1.067
index: 40, word: hyperlink, coeff: 1.366
index: 81, word: click, coeff: 1.801
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># print the 20 words with the largest weights leading to the 'spam' classification
</span><span class="k">for</span> <span class="n">loc</span> <span class="ow">in</span> <span class="n">sorted_weights</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">:</span><span class="mi">20</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">index: {0}, word: {1}, coeff: {2:.3f}</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">loc</span><span class="p">,</span> <span class="n">index_to_word_vocab</span><span class="p">[</span><span class="n">loc</span><span class="p">],</span> <span class="n">best_clf</span><span class="p">.</span><span class="n">coef_</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="n">loc</span><span class="p">]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>index: 23, word: date, coeff: -1.836
index: 22, word: wrote, coeff: -1.253
index: 139, word: numbernumbertnumb, coeff: -1.149
index: 4, word: use, coeff: -0.727
index: 27, word: spamassassin, coeff: -0.653
index: 210, word: suppli, coeff: -0.614
index: 34, word: group, coeff: -0.570
index: 21, word: rpm, coeff: -0.514
index: 31, word: think, coeff: -0.511
index: 47, word: said, coeff: -0.509
index: 124, word: sep, coeff: -0.489
index: 50, word: say, coeff: -0.489
index: 2, word: url, coeff: -0.471
index: 19, word: user, coeff: -0.434
index: 48, word: could, coeff: -0.422
index: 46, word: spam, coeff: -0.408
index: 41, word: _______________________________________________, coeff: -0.408
index: 106, word: write, coeff: -0.399
index: 11, word: messag, coeff: -0.394
index: 35, word: tri, coeff: -0.389
</code></pre></div></div>]]></content><author><name>Thibault Dody</name></author><category term="regex" /><category term="LinearModel" /><category term="python" /><summary type="html"><![CDATA[This project contains the implementation of a SPAM detector.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tdody.github.io/assets/img/2019-09-06-Spam-Detection/tile.png" /><media:content medium="image" url="https://tdody.github.io/assets/img/2019-09-06-Spam-Detection/tile.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A take on the famous MNIST dataset (Accuracy 99.5%)</title><link href="http://localhost:4000/MNIST/" rel="alternate" type="text/html" title="A take on the famous MNIST dataset (Accuracy 99.5%)" /><published>2019-08-27T00:00:00-04:00</published><updated>2019-08-27T00:00:00-04:00</updated><id>http://localhost:4000/MNIST</id><content type="html" xml:base="http://localhost:4000/MNIST/"><![CDATA[<footer id="attribution" style="float:right; color:#999; background:#fff;">
Created by Thibault Dody, 08/26/2019.
</footer>

<h1 id="a-take-on-mnist">A Take on MNIST</h1>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/MnistExamples.png" />
</figure>

<hr />

<p>In this Notebook, we will built a progressively more complex model to predict hand-written digits stored in the famous MNIST dataset. The goal is to understand the effects of our modeling choices and how the performances of our models can be optimized. We will start by building the simplest model (mutinomial logistic regression) and incrementally increase the complexity the approach in order to improve the accuracy of our predictions.</p>

<p><a href="#Section_0"><strong>0. Load data</strong></a><br />
<a href="#Section_1"><strong>1. Exploratory Analysis</strong></a><br />
    <a href="#Section_1a"><strong>1.a. Classes to predict</strong></a><br />
    <a href="#Section_1b"><strong>1.b. Input features</strong></a><br />
    <a href="#Section_1c"><strong>1.c Dataset Size</strong></a><br />
<a href="#Section_2"><strong>2. Logistic Regression</strong></a><br />
    <a href="#Section_2a"><strong>2.a Theory</strong></a><br />
    <a href="#Section_2b"><strong>2.b Simple example</strong></a><br />
    <a href="#Section_2c"><strong>2.c Logistic Regression on MNIST (no normalization)</strong></a><br />
    <a href="#Section_2d"><strong>2.d Logistic Regression on MNIST (Lasso and Ridge regularizations)</strong></a><br />
<a href="#Section_3"><strong>3. Deep Neural Networks (DNN)</strong></a><br />
<a href="#Section_4"><strong>4. Convolutional Networks (CNN)</strong></a><br />
<a href="#Section_5"><strong>5. Convolutional Networks (CNN) with data augmentation</strong></a><br />
<a href="#Section_6"><strong>6. Conclusion and Kaggle Submittal</strong></a></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load libraries
</span><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="c1"># plotting tools
</span><span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="n">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="n">plt</span><span class="p">.</span><span class="n">style</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="sh">'</span><span class="s">ggplot</span><span class="sh">'</span><span class="p">)</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="kn">import</span> <span class="n">tensorflow</span> <span class="k">as</span> <span class="n">tf</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Tensforflow:</span><span class="sh">'</span><span class="p">,</span><span class="n">tf</span><span class="p">.</span><span class="n">__version__</span><span class="p">)</span>
<span class="kn">from</span> <span class="n">tensorflow</span> <span class="kn">import</span> <span class="n">keras</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Keras:</span><span class="sh">'</span><span class="p">,</span> <span class="n">keras</span><span class="p">.</span><span class="n">__version__</span><span class="p">)</span>
<span class="kn">from</span> <span class="n">keras.utils.np_utils</span> <span class="kn">import</span> <span class="n">to_categorical</span>
<span class="kn">from</span> <span class="n">tensorflow.keras.optimizers</span> <span class="kn">import</span> <span class="n">RMSprop</span>
<span class="kn">from</span> <span class="n">tensorflow.keras.callbacks</span> <span class="kn">import</span> <span class="n">ReduceLROnPlateau</span>

<span class="c1"># models
</span><span class="kn">import</span> <span class="n">sklearn</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">scikit-learn</span><span class="sh">'</span><span class="p">,</span><span class="n">sklearn</span><span class="p">.</span><span class="n">__version__</span><span class="p">)</span>
<span class="kn">from</span> <span class="n">sklearn.linear_model</span> <span class="kn">import</span> <span class="n">SGDClassifier</span><span class="p">,</span> <span class="n">LogisticRegression</span>
<span class="kn">from</span> <span class="n">sklearn.model_selection</span> <span class="kn">import</span> <span class="n">GridSearchCV</span>

<span class="c1"># metrics
</span><span class="kn">from</span> <span class="n">sklearn.metrics</span> <span class="kn">import</span> <span class="n">accuracy_score</span><span class="p">,</span> <span class="n">confusion_matrix</span>
<span class="kn">from</span> <span class="n">sklearn.utils.multiclass</span> <span class="kn">import</span> <span class="n">unique_labels</span>

<span class="c1"># tools
</span><span class="kn">import</span> <span class="n">TAD_tools</span> <span class="c1"># personal tools and functions
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Tensforflow: 1.14.0
Keras: 2.2.4-tf
scikit-learn 0.21.2
   
Using TensorFlow backend. 
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># store results
</span><span class="n">df_results</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Training accuracy</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s">Testing accuracy</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<hr />
<p><a id="Section_0"></a></p>
<h2 id="0-load-data">0. Load data</h2>

<p>The MNIST is a famous dataset. It can be retrieved directly from the keras library. The dataset will be divided into two sets. A training set will be used to train our model while the test set will be used to evaluate the performance of the model when subjected to unknown data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load data
</span><span class="n">mnist</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">datasets</span><span class="p">.</span><span class="n">mnist</span>

<span class="c1"># create a train and a test set
</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">),(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">)</span> <span class="o">=</span> <span class="n">mnist</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>
</code></pre></div></div>

<hr />
<p><a id="Section_1"></a></p>
<h2 id="1-exploratory-analysis">1. Exploratory Analysis</h2>

<p>Before rushing to the modeling aspect of this problem, it is essential to explore the dataset. During this step, we are primarily focused on the followings:</p>

<p>a. What are the classes to predict?<br />
b. What does the input data look like?<br />
c. How big is the dataset?<br />
d. Are there any missing values or outliers?</p>

<h3 id="1a-classes-to-predict">1.a. Classes to predict</h3>

<p>As previously stated, the MNIST dataset consists of a collection of images of single hand-written digits (0 through 9).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># number of classes and unique classes
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The model consists of {} classes. They are labeled as:</span><span class="se">\n</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">unique</span><span class="p">(</span><span class="n">Y_train</span><span class="p">))))</span>
<span class="nf">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">unique</span><span class="p">(</span><span class="n">Y_train</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The model consists of 10 classes. They are labeled as:

[0 1 2 3 4 5 6 7 8 9]
</code></pre></div></div>

<hr />
<p><a id="Section_1b"></a></p>
<h3 id="1b-input-features">1.b. Input features</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Each of the input image is {} by {} pixels.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">X_train</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">The grayscale varies from {} to {}.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="nf">min</span><span class="p">(),</span><span class="n">X_train</span><span class="p">.</span><span class="nf">max</span><span class="p">()))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Each of the input image is 28 by 28 pixels.
The grayscale varies from 0 to 255.
</code></pre></div></div>

<p>Let’s now plot a few images of each classes to understand what we are dealing with.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># unique classes
</span><span class="n">unique_classes</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">unique</span><span class="p">(</span><span class="n">Y_train</span><span class="p">)</span>

<span class="c1"># create plot figure
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>


<span class="c1"># loop over the classes and plots a few randomly selected images
</span><span class="k">for</span> <span class="n">idx</span><span class="p">,</span> <span class="n">digit</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">unique_classes</span><span class="p">):</span>
    <span class="n">selected_images</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">[</span><span class="n">Y_train</span><span class="o">==</span><span class="n">digit</span><span class="p">][</span><span class="mi">0</span><span class="p">:</span><span class="mi">10</span><span class="p">]</span>
    
    <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">):</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">digit</span><span class="p">,</span><span class="n">k</span><span class="p">].</span><span class="nf">imshow</span><span class="p">(</span><span class="n">selected_images</span><span class="p">[</span><span class="n">k</span><span class="p">],</span><span class="n">cmap</span><span class="o">=</span><span class="sh">'</span><span class="s">Greys</span><span class="sh">'</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">255</span><span class="p">)</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">digit</span><span class="p">,</span><span class="n">k</span><span class="p">].</span><span class="nf">axis</span><span class="p">(</span><span class="sh">'</span><span class="s">off</span><span class="sh">'</span><span class="p">)</span>
    
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_13_0.png" />
</figure>

<hr />
<p><a id="Section_1c"></a></p>
<h3 id="1c-dataset-size">1.c Dataset Size</h3>
<p>When working on a classification problem, it is essential to know if our training data is well distributed amongst the different classes.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">There are {} training examples and {} test examples.</span><span class="sh">"</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>There are 60000 training examples and 10000 test examples.
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># plot histogram of digit class distribution
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">hist</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span><span class="n">density</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span><span class="n">rwidth</span><span class="o">=</span><span class="mf">0.5</span><span class="p">,</span><span class="n">align</span><span class="o">=</span><span class="sh">'</span><span class="s">left</span><span class="sh">'</span><span class="p">,</span><span class="n">bins</span><span class="o">=</span><span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="mi">11</span><span class="p">)))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticks</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="nf">unique</span><span class="p">(</span><span class="n">Y_train</span><span class="p">)])</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xticklabels</span><span class="p">([</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">np</span><span class="p">.</span><span class="nf">unique</span><span class="p">(</span><span class="n">Y_train</span><span class="p">)])</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Class distribution</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Classes</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Count</span><span class="sh">'</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_16_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># list class distributions
</span><span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Class distribution in dataset (%):</span><span class="sh">'</span><span class="p">)</span>
<span class="n">pd</span><span class="p">.</span><span class="nc">Series</span><span class="p">(</span><span class="n">Y_train</span><span class="p">).</span><span class="nf">value_counts</span><span class="p">().</span><span class="nf">sort_index</span><span class="p">()</span> <span class="o">/</span> <span class="n">Y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">*</span> <span class="mf">100.0</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Class distribution in dataset (%):

0     9.871667
1    11.236667
2     9.930000
3    10.218333
4     9.736667
5     9.035000
6     9.863333
7    10.441667
8     9.751667
9     9.915000
dtype: float64
</code></pre></div></div>

<p>The class distribution is even enough to consider the dataset ready for use. It is essential to establish how classes are distributed in order to define our accuracy baseline. For instance, let’s consider a model used to predict if a coin will land on head or tail. If our dataset contains 10% heads and 90% tails then a dummy model predicting “tail” for any input will have an accuracy of 90%.</p>

<p><strong>NORMALIZATION</strong>:</p>

<p>In order to improve the performance of our models, we will normalized the pixel values so they fall between 0 and 1.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># normalize pixel value to range between 0 and 1 instead of ranging between 0 and 255
</span><span class="n">X_train</span> <span class="o">=</span> <span class="n">X_train</span> <span class="o">/</span> <span class="mf">255.0</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">X_test</span> <span class="o">/</span> <span class="mf">255.0</span>
</code></pre></div></div>

<hr />
<p><a id="Section_2"></a></p>
<h2 id="2-logistic-regression">2. Logistic Regression</h2>

<p><a id="Section_2a"></a></p>
<h3 id="2a-theory">2.a Theory</h3>

<p>The first model will consist of a simple logistic regression. The logistic regression takes its origins from the linear regression. The linear regression (\(L\)) is coupled with the sigmoid function (\(\sigma\)). They are defined as:</p>

\[L(x) = \beta_{0} + \sum_{n=1}^{N} \beta_{n} * x_{n}\]

<p>and</p>

\[\sigma(x) = \frac{1}{1+e^{-x}}\]

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create sigmoid function 
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="n">np</span><span class="p">.</span><span class="nf">exp</span><span class="p">(</span><span class="o">-</span><span class="n">x</span><span class="p">))</span>

<span class="c1"># plot sigmoid
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>

<span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">x</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Sigmoid function: $$\sigma(x)=1/(1+e^{-x})$$</span><span class="sh">'</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_23_0.png" />
</figure>

<hr />
<p><a id="Section_2b"></a></p>
<h3 id="2b-simple-example">2.b Simple example</h3>

<p>Let’s consider a simple example. In a class of 20 students, we asked how many hours were spent studying on a test. We collect the data along with the results of the test. For each of the 20 students, we have a record containing the number of hours spent studying and whether the student pass the test.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># data
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">0.50</span><span class="p">,</span><span class="mf">0.75</span><span class="p">,</span><span class="mf">1.00</span><span class="p">,</span><span class="mf">1.25</span><span class="p">,</span><span class="mf">1.50</span><span class="p">,</span><span class="mf">1.75</span><span class="p">,</span><span class="mf">1.75</span><span class="p">,</span><span class="mf">2.00</span><span class="p">,</span><span class="mf">2.25</span><span class="p">,</span>
              <span class="mf">2.50</span><span class="p">,</span><span class="mf">2.75</span><span class="p">,</span><span class="mf">3.00</span><span class="p">,</span><span class="mf">3.25</span><span class="p">,</span><span class="mf">3.50</span><span class="p">,</span><span class="mf">4.00</span><span class="p">,</span><span class="mf">4.25</span><span class="p">,</span><span class="mf">4.50</span><span class="p">,</span><span class="mf">4.75</span><span class="p">,</span><span class="mf">5.00</span><span class="p">,</span><span class="mf">5.50</span><span class="p">]).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>

<span class="c1"># create logistic regression
</span><span class="n">lr</span> <span class="o">=</span> <span class="nc">LogisticRegression</span><span class="p">(</span><span class="n">penalty</span><span class="o">=</span><span class="sh">'</span><span class="s">l2</span><span class="sh">'</span><span class="p">,</span><span class="n">C</span><span class="o">=</span><span class="mi">10</span><span class="o">**</span><span class="mi">6</span><span class="p">,</span><span class="n">solver</span><span class="o">=</span><span class="sh">'</span><span class="s">lbfgs</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># train model on original data
</span><span class="n">lr</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">)</span>

<span class="c1"># generate new test data
</span><span class="n">x_test</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mf">0.1</span><span class="p">).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># predict the probability of passing the test
</span><span class="n">y_test_pred</span> <span class="o">=</span> <span class="n">lr</span><span class="p">.</span><span class="nf">predict_proba</span><span class="p">(</span><span class="n">x_test</span><span class="p">)[:,</span><span class="mi">1</span><span class="p">]</span>

<span class="c1"># plot data
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">data</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_xlabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Hours of study</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_ylabel</span><span class="p">(</span><span class="sh">'</span><span class="s">Probability of passing the exam</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_title</span><span class="p">(</span><span class="sh">'</span><span class="s">Probability of passing the exam versus hours of studying</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_test</span><span class="p">,</span><span class="n">y_test_pred</span><span class="p">,</span><span class="n">c</span><span class="o">=</span><span class="sh">'</span><span class="s">blue</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">logistic regression</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">set_yticks</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.25</span><span class="p">,</span><span class="mf">0.50</span><span class="p">,</span><span class="mf">0.75</span><span class="p">,</span><span class="mf">1.0</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="mi">7</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_26_0.png" />
</figure>

<p><strong>Conclusion</strong>:</p>

<p>From the above plot, the logistic regression will predict a student will pass the test if he/she studied for more than ~2.6h with a probability greater than 0.5.</p>

<hr />
<p><a id="Section_2c"></a></p>
<h3 id="2c-logistic-regression-on-mnist--no-regularization">2.c Logistic Regression on MNIST  (no regularization)</h3>

<p>The main difference between the example previously presented and the MNIST dataset is that the test studying example was a binary classification problem. Since the MNIST dataset contains 10 classes, the algorithm needs to be adjusted. The model used for such cases is called <strong>multinomial logistic regression</strong>. To put it simply, this problem can be solved by dividing it into K-1 regressions where K is the number of classes. Each regression will compute a score which defines the probability of one example to belong to class k. In order to make the predictions, the results obtained by the K-1 models are combined and the one giving the highest score is used to defined the predicted class.</p>

<p>The <strong>\(softmax\)</strong> function is used to compute the probability of belonging to each class. It is defined as:</p>

\[\sigma(z_{i}) = \frac{e^{z_{i}}}{\sum_{i=1}^{K}e^{z_{i}}}\]

<p><strong>Note</strong>: The Logistic Regression model computes the analytical solution by inverting matrices. Due to the large size of our training matrix, the analytical solution requires a lot of computing power to be run quickly. Instead, we will use the Stochastic Gradient Descent (SGD) method to approach the analytical solution. The SGD computes the partial derivatives of the cost function with respect to the model parameters. For each iteration, the parameters are updated based on these partial derivatives.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create model
</span><span class="n">sgd_clf</span> <span class="o">=</span> <span class="nc">SGDClassifier</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="sh">'</span><span class="s">log</span><span class="sh">'</span><span class="p">,</span> <span class="n">penalty</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">20000</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="sh">'</span><span class="s">optimal</span><span class="sh">'</span><span class="p">,</span> <span class="n">eta0</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span>

<span class="c1"># train the model
</span><span class="n">sgd_clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">Y_train</span><span class="p">)</span>

<span class="c1"># make predictions and compute accuracies
</span><span class="n">Y_train_pred</span> <span class="o">=</span> <span class="n">sgd_clf</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="n">Y_test_pred</span> <span class="o">=</span> <span class="n">sgd_clf</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>

<span class="n">acc_train</span> <span class="o">=</span> <span class="nf">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span><span class="n">Y_train_pred</span><span class="p">)</span>
<span class="n">acc_test</span> <span class="o">=</span> <span class="nf">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span><span class="n">Y_test_pred</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">The accuracy on the training set is: </span><span class="se">\t</span><span class="s">{:.3f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">acc_train</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">The accuracy on the test set is: </span><span class="se">\t</span><span class="s">{:.3f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">acc_test</span> <span class="o">*</span> <span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The accuracy on the training set is: 	91.145%
The accuracy on the test set is: 	89.870%
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># store results
</span><span class="n">df_results</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">:</span><span class="sh">"</span><span class="s">Log Reg</span><span class="sh">"</span><span class="p">,</span><span class="sh">'</span><span class="s">Training accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">acc_train</span><span class="p">,</span><span class="sh">'</span><span class="s">Testing accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">acc_test</span><span class="p">},</span><span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<hr />
<p><a id="Section_2d"></a></p>
<h3 id="2d-logistic-regression-on-mnist--lasso-and-ridge-regularizations">2.d Logistic Regression on MNIST  (Lasso and Ridge regularizations)</h3>

<p>In order to avoid overfitting, we will now incorporate some regularization in our model. There are two types of regularizations:</p>

<ol>
  <li>\(l1\) type (Lasso)</li>
  <li>\(l2\) type (Ridge)</li>
</ol>

<p>The idea behind these two methods is the same, avoid large coefficients in the regression and distribute the predictive power of the model over a larger subset of coefficients. The Lasso normalization for a simple linear regression can be defined as the following problem to minimize:</p>

\[\min_{ \beta_0, \beta } \left\{ \frac{1}{N} \sum_{i=1}^N (y_i)*log(\beta_0 - x_i^T \beta) \right\} \text{ subject to } \sum_{j=1}^p |\beta_j| \leq t.\]

<p>It because of the nature of the absolute value, the Lasso regularization tends to drop the coefficients of the model to 0.</p>

<p>The Ridge normalization for a simple linear regression can be defined as the following problem to minimize:</p>

\[\min_{ \beta_0, \beta } \left\{ \frac{1}{N} \sum_{i=1}^N (y_i)*log(\beta_0 - x_i^T \beta) \right\} \text{ subject to } \sum_{j=1}^p \beta_j^{2} \leq t.\]

<p>Note that both of these methods are defined using a parameter \(t\) where \(t\) is the regularization parameter. Smaller values of \(t\) will leads to more regularization.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Lasso
</span>
<span class="c1"># create model
</span><span class="n">lasso</span> <span class="o">=</span> <span class="nc">SGDClassifier</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="sh">'</span><span class="s">log</span><span class="sh">'</span><span class="p">,</span> <span class="n">penalty</span><span class="o">=</span><span class="sh">'</span><span class="s">l1</span><span class="sh">'</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">20000</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="sh">'</span><span class="s">optimal</span><span class="sh">'</span><span class="p">,</span> <span class="n">eta0</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.0001</span><span class="p">)</span>

<span class="c1"># train the model
</span><span class="n">lasso</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">Y_train</span><span class="p">)</span>

<span class="c1"># make predictions and compute accuracies
</span><span class="n">Y_train_pred</span> <span class="o">=</span> <span class="n">lasso</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="n">Y_test_pred</span> <span class="o">=</span> <span class="n">lasso</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>

<span class="n">acc_train</span> <span class="o">=</span> <span class="nf">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span><span class="n">Y_train_pred</span><span class="p">)</span>
<span class="n">acc_test</span> <span class="o">=</span> <span class="nf">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span><span class="n">Y_test_pred</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">The accuracy on the training set is: </span><span class="se">\t</span><span class="s">{:.3f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">acc_train</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">The accuracy on the test set is: </span><span class="se">\t</span><span class="s">{:.3f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">acc_test</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The accuracy on the training set is: 	91.390%
The accuracy on the test set is: 	90.700%
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># store results
</span><span class="n">df_results</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">:</span><span class="sh">"</span><span class="s">Lasso</span><span class="sh">"</span><span class="p">,</span><span class="sh">'</span><span class="s">Training accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">acc_train</span><span class="p">,</span><span class="sh">'</span><span class="s">Testing accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">acc_test</span><span class="p">},</span><span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Ridge
</span>
<span class="c1"># create model
</span><span class="n">ridge</span> <span class="o">=</span> <span class="nc">SGDClassifier</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="sh">'</span><span class="s">log</span><span class="sh">'</span><span class="p">,</span> <span class="n">penalty</span><span class="o">=</span><span class="sh">'</span><span class="s">l2</span><span class="sh">'</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">20000</span><span class="p">,</span> <span class="n">learning_rate</span><span class="o">=</span><span class="sh">'</span><span class="s">optimal</span><span class="sh">'</span><span class="p">,</span> <span class="n">eta0</span><span class="o">=</span><span class="mf">0.01</span><span class="p">,</span> <span class="n">n_jobs</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.0001</span><span class="p">)</span>

<span class="c1"># train the model
</span><span class="n">ridge</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="n">Y_train</span><span class="p">)</span>

<span class="c1"># make predictions and compute accuracies
</span><span class="n">Y_train_pred</span> <span class="o">=</span> <span class="n">ridge</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
<span class="n">Y_test_pred</span> <span class="o">=</span> <span class="n">ridge</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="nf">reshape</span><span class="p">(</span><span class="n">X_test</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>

<span class="n">acc_train</span> <span class="o">=</span> <span class="nf">accuracy_score</span><span class="p">(</span><span class="n">Y_train</span><span class="p">,</span><span class="n">Y_train_pred</span><span class="p">)</span>
<span class="n">acc_test</span> <span class="o">=</span> <span class="nf">accuracy_score</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span><span class="n">Y_test_pred</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">The accuracy on the training set is: </span><span class="se">\t</span><span class="s">{:.3f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">acc_train</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">The accuracy on the test set is: </span><span class="se">\t</span><span class="s">{:.3f}%</span><span class="sh">'</span><span class="p">.</span><span class="nf">format</span><span class="p">(</span><span class="n">acc_test</span><span class="o">*</span><span class="mi">100</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The accuracy on the training set is: 	92.040%
The accuracy on the test set is: 	91.520%
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># store results
</span><span class="n">df_results</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">:</span><span class="sh">"</span><span class="s">Ridge</span><span class="sh">"</span><span class="p">,</span><span class="sh">'</span><span class="s">Training accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">acc_train</span><span class="p">,</span><span class="sh">'</span><span class="s">Testing accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">acc_test</span><span class="p">},</span><span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_results</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Model</th>
      <th>Training accuracy</th>
      <th>Testing accuracy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Log Reg</td>
      <td>0.91145</td>
      <td>0.8987</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Lasso</td>
      <td>0.91390</td>
      <td>0.9070</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Ridge</td>
      <td>0.92040</td>
      <td>0.9152</td>
    </tr>
  </tbody>
</table>
</div>

<hr />
<p><a id="Section_3"></a></p>
<h2 id="3-deep-neural-networks-dnn">3. Deep Neural Networks (DNN)</h2>

<p>Neural Networks combine the simplicity of simple regression and the power of model combination. A neural network is an ensemble of neurons. Each neuron can be seen as a linear functions. The network is made of neurons arranged in layers. The last layer of the neural network is used to predict the output classes. We begin by creating a neural network of three fully connected layers.</p>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/Deep-learning-ai-machine-matrix2.gif" />
</figure>
<p>Source: www.kookycoder.com</p>

<p>The architecture of a neural networks is made of three different types of layers. The input layer consists of the properly formatted input data. In our case, we flatten the 28x28 images into a 784-component vector. The output layer consists of a set of neurons (1 neuron for each output class). Finally, the body of the network consists of hidden layers. Each neuron of each layer is connected to each neuron of the next layer.</p>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/Calculations_in_Neural_Networkgh5w.gif" />
</figure>
<p>Source: https://cloud.google.com</p>

<p>Each neuro is definedd with a set of weights (\(w_ij\)) and an activation function. The role of the activation function is to increase the complexity of the model to capture non-linear behaviors. The most common activation function of the hidden layers is called “Rectified Linear Unit” (RELU) and is defined as \(f(x)=max(x,0)\).</p>

<p><strong>Note</strong>: as part of the regularization effort, dropouts are included in the model. The idea behind the use of dropout is to prevent the model from relying too heavily on the same neurons. To do so, a random subset of neurons is deactivated (coefficients set to 0) at each iteration.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load data
</span><span class="n">mnist</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">datasets</span><span class="p">.</span><span class="n">mnist</span>

<span class="c1"># create a train and a test set
</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">),(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">)</span> <span class="o">=</span> <span class="n">mnist</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train</span> <span class="o">=</span> <span class="n">X_train</span> <span class="o">/</span> <span class="mf">255.0</span>
<span class="n">X_test</span> <span class="o">=</span> <span class="n">X_test</span> <span class="o">/</span> <span class="mf">255.0</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create nn (128-&gt;64-&gt;32-&gt;10)
</span><span class="n">model_dnn_no_drop</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">([</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Flatten</span><span class="p">(),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">softmax</span><span class="sh">'</span><span class="p">)</span>
        <span class="p">])</span>

<span class="n">model_dnn_drop</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">([</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Flatten</span><span class="p">(),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">128</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.20</span><span class="p">),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.20</span><span class="p">),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.20</span><span class="p">),</span>
        <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">softmax</span><span class="sh">'</span><span class="p">)</span>
        <span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># compile model
</span><span class="n">model_dnn_no_drop</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span>
        <span class="n">optimizer</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">optimizers</span><span class="p">.</span><span class="nc">Adam</span><span class="p">(),</span>
        <span class="n">loss</span><span class="o">=</span><span class="sh">'</span><span class="s">sparse_categorical_crossentropy</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">],</span>
        <span class="n">lr</span><span class="o">=</span><span class="mf">0.001</span>
        <span class="p">)</span>

<span class="n">model_dnn_drop</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span>
        <span class="n">optimizer</span><span class="o">=</span><span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">optimizers</span><span class="p">.</span><span class="nc">Adam</span><span class="p">(),</span>
        <span class="n">loss</span><span class="o">=</span><span class="sh">'</span><span class="s">sparse_categorical_crossentropy</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">metrics</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">],</span>
        <span class="n">lr</span><span class="o">=</span><span class="mf">0.001</span>
        <span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># train model
</span><span class="n">history_dnn_no_drop</span> <span class="o">=</span> <span class="n">model_dnn_no_drop</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span>
        <span class="n">X_train</span><span class="p">,</span>
        <span class="n">Y_train</span><span class="p">,</span>
        <span class="n">epochs</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
        <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">)</span>
        <span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Train on 60000 samples, validate on 10000 samples
Epoch 1/50
60000/60000 [==============================] - 3s 43us/sample - loss: 0.2561 - acc: 0.9246 - val_loss: 0.1324 - val_acc: 0.9583
Epoch 2/50
60000/60000 [==============================] - 2s 41us/sample - loss: 0.1047 - acc: 0.9678 - val_loss: 0.0972 - val_acc: 0.9714
Epoch 3/50
60000/60000 [==============================] - 2s 41us/sample - loss: 0.0724 - acc: 0.9777 - val_loss: 0.0959 - val_acc: 0.9709
Epoch 4/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0570 - acc: 0.9820 - val_loss: 0.0846 - val_acc: 0.9732
Epoch 5/50
60000/60000 [==============================] - 2s 41us/sample - loss: 0.0473 - acc: 0.9848 - val_loss: 0.0918 - val_acc: 0.9739
Epoch 6/50
60000/60000 [==============================] - 2s 42us/sample - loss: 0.0370 - acc: 0.9878 - val_loss: 0.0894 - val_acc: 0.9738
Epoch 7/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0316 - acc: 0.9891 - val_loss: 0.0942 - val_acc: 0.9733
Epoch 8/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0282 - acc: 0.9904 - val_loss: 0.0915 - val_acc: 0.9756
Epoch 9/50
60000/60000 [==============================] - 2s 41us/sample - loss: 0.0252 - acc: 0.9918 - val_loss: 0.0899 - val_acc: 0.9776
Epoch 10/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0234 - acc: 0.9922 - val_loss: 0.0812 - val_acc: 0.9801
Epoch 11/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0201 - acc: 0.9933 - val_loss: 0.1076 - val_acc: 0.9744
Epoch 12/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0192 - acc: 0.9934 - val_loss: 0.0968 - val_acc: 0.9789
Epoch 13/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0162 - acc: 0.9948 - val_loss: 0.0971 - val_acc: 0.9771
Epoch 14/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0160 - acc: 0.9947 - val_loss: 0.1052 - val_acc: 0.9769
Epoch 15/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0144 - acc: 0.9952 - val_loss: 0.1085 - val_acc: 0.9768
Epoch 16/50
60000/60000 [==============================] - 2s 39us/sample - loss: 0.0148 - acc: 0.9952 - val_loss: 0.0906 - val_acc: 0.9811
Epoch 17/50
60000/60000 [==============================] - 2s 41us/sample - loss: 0.0142 - acc: 0.9956 - val_loss: 0.0995 - val_acc: 0.9782
Epoch 18/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0103 - acc: 0.9966 - val_loss: 0.1406 - val_acc: 0.9736
Epoch 19/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0145 - acc: 0.9955 - val_loss: 0.1084 - val_acc: 0.9788
Epoch 20/50
60000/60000 [==============================] - 3s 43us/sample - loss: 0.0098 - acc: 0.9964 - val_loss: 0.1224 - val_acc: 0.9760
Epoch 21/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0131 - acc: 0.9958 - val_loss: 0.1064 - val_acc: 0.9793
Epoch 22/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0094 - acc: 0.9972 - val_loss: 0.1337 - val_acc: 0.9769
Epoch 23/50
60000/60000 [==============================] - 2s 41us/sample - loss: 0.0129 - acc: 0.9959 - val_loss: 0.1373 - val_acc: 0.9759
Epoch 24/50
60000/60000 [==============================] - 3s 43us/sample - loss: 0.0079 - acc: 0.9975 - val_loss: 0.1371 - val_acc: 0.9773
Epoch 25/50
60000/60000 [==============================] - 3s 46us/sample - loss: 0.0114 - acc: 0.9964 - val_loss: 0.1081 - val_acc: 0.9793
Epoch 26/50
60000/60000 [==============================] - 3s 45us/sample - loss: 0.0090 - acc: 0.9970 - val_loss: 0.1165 - val_acc: 0.9808
Epoch 27/50
60000/60000 [==============================] - 3s 47us/sample - loss: 0.0095 - acc: 0.9971 - val_loss: 0.1255 - val_acc: 0.9790
Epoch 28/50
60000/60000 [==============================] - 2s 41us/sample - loss: 0.0100 - acc: 0.9970 - val_loss: 0.1080 - val_acc: 0.9800
Epoch 29/50
60000/60000 [==============================] - 3s 43us/sample - loss: 0.0075 - acc: 0.9976 - val_loss: 0.1395 - val_acc: 0.9756
Epoch 30/50
60000/60000 [==============================] - 3s 43us/sample - loss: 0.0079 - acc: 0.9974 - val_loss: 0.1352 - val_acc: 0.9775
Epoch 31/50
60000/60000 [==============================] - 3s 43us/sample - loss: 0.0057 - acc: 0.9981 - val_loss: 0.1216 - val_acc: 0.9792
Epoch 32/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0098 - acc: 0.9974 - val_loss: 0.1379 - val_acc: 0.9774
Epoch 33/50
60000/60000 [==============================] - 3s 45us/sample - loss: 0.0089 - acc: 0.9974 - val_loss: 0.1203 - val_acc: 0.9799
Epoch 34/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0073 - acc: 0.9976 - val_loss: 0.1350 - val_acc: 0.9792
Epoch 35/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0068 - acc: 0.9980 - val_loss: 0.1311 - val_acc: 0.9797
Epoch 36/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0079 - acc: 0.9979 - val_loss: 0.1257 - val_acc: 0.9803
Epoch 37/50
60000/60000 [==============================] - 3s 46us/sample - loss: 0.0066 - acc: 0.9981 - val_loss: 0.1276 - val_acc: 0.9798
Epoch 38/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0063 - acc: 0.9983 - val_loss: 0.1328 - val_acc: 0.9798
Epoch 39/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0073 - acc: 0.9982 - val_loss: 0.1420 - val_acc: 0.9780
Epoch 40/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0062 - acc: 0.9981 - val_loss: 0.1264 - val_acc: 0.9793
Epoch 41/50
60000/60000 [==============================] - 2s 42us/sample - loss: 0.0077 - acc: 0.9978 - val_loss: 0.1293 - val_acc: 0.9812
Epoch 42/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0067 - acc: 0.9984 - val_loss: 0.1491 - val_acc: 0.9768
Epoch 43/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0052 - acc: 0.9984 - val_loss: 0.1205 - val_acc: 0.9824
Epoch 44/50
60000/60000 [==============================] - 3s 44us/sample - loss: 0.0080 - acc: 0.9980 - val_loss: 0.1248 - val_acc: 0.9810
Epoch 45/50
60000/60000 [==============================] - 2s 40us/sample - loss: 0.0055 - acc: 0.9984 - val_loss: 0.1478 - val_acc: 0.9791
Epoch 46/50
60000/60000 [==============================] - 3s 45us/sample - loss: 0.0090 - acc: 0.9977 - val_loss: 0.1304 - val_acc: 0.9784
Epoch 47/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0037 - acc: 0.9987 - val_loss: 0.1472 - val_acc: 0.9800
Epoch 48/50
60000/60000 [==============================] - 3s 43us/sample - loss: 0.0071 - acc: 0.9979 - val_loss: 0.1191 - val_acc: 0.9814
Epoch 49/50
60000/60000 [==============================] - 2s 39us/sample - loss: 0.0044 - acc: 0.9987 - val_loss: 0.1547 - val_acc: 0.9773
Epoch 50/50
60000/60000 [==============================] - 3s 42us/sample - loss: 0.0071 - acc: 0.9979 - val_loss: 0.1536 - val_acc: 0.9786
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">history_dnn_drop</span> <span class="o">=</span> <span class="n">model_dnn_drop</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span>
        <span class="n">X_train</span><span class="p">,</span>
        <span class="n">Y_train</span><span class="p">,</span>
        <span class="n">epochs</span><span class="o">=</span><span class="mi">50</span><span class="p">,</span>
        <span class="n">validation_data</span><span class="o">=</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">)</span>
        <span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Train on 60000 samples, validate on 10000 samples
Epoch 1/50
60000/60000 [==============================] - 4s 58us/sample - loss: 0.4191 - acc: 0.8747 - val_loss: 0.1423 - val_acc: 0.9564
Epoch 2/50
60000/60000 [==============================] - 3s 55us/sample - loss: 0.2001 - acc: 0.9453 - val_loss: 0.1186 - val_acc: 0.9643
Epoch 3/50
60000/60000 [==============================] - 3s 58us/sample - loss: 0.1560 - acc: 0.9569 - val_loss: 0.0952 - val_acc: 0.9728
Epoch 4/50
60000/60000 [==============================] - 3s 55us/sample - loss: 0.1311 - acc: 0.9626 - val_loss: 0.0917 - val_acc: 0.9742
Epoch 5/50
60000/60000 [==============================] - 3s 53us/sample - loss: 0.1143 - acc: 0.9681 - val_loss: 0.0838 - val_acc: 0.9742
Epoch 6/50
60000/60000 [==============================] - 3s 56us/sample - loss: 0.1029 - acc: 0.9708 - val_loss: 0.0851 - val_acc: 0.9780
Epoch 7/50
60000/60000 [==============================] - 3s 55us/sample - loss: 0.0967 - acc: 0.9724 - val_loss: 0.0788 - val_acc: 0.9802
Epoch 8/50
60000/60000 [==============================] - 3s 57us/sample - loss: 0.0914 - acc: 0.9745 - val_loss: 0.0798 - val_acc: 0.9798
Epoch 9/50
60000/60000 [==============================] - 3s 50us/sample - loss: 0.0854 - acc: 0.9750 - val_loss: 0.0759 - val_acc: 0.9790
Epoch 10/50
60000/60000 [==============================] - 3s 51us/sample - loss: 0.0756 - acc: 0.9783 - val_loss: 0.0793 - val_acc: 0.9781
Epoch 11/50
60000/60000 [==============================] - 3s 54us/sample - loss: 0.0759 - acc: 0.9777 - val_loss: 0.0763 - val_acc: 0.9801
Epoch 12/50
60000/60000 [==============================] - 3s 53us/sample - loss: 0.0689 - acc: 0.9796 - val_loss: 0.0795 - val_acc: 0.9787
Epoch 13/50
60000/60000 [==============================] - 3s 54us/sample - loss: 0.0687 - acc: 0.9796 - val_loss: 0.0854 - val_acc: 0.9801
Epoch 14/50
60000/60000 [==============================] - 3s 52us/sample - loss: 0.0623 - acc: 0.9814 - val_loss: 0.0737 - val_acc: 0.9821
Epoch 15/50
60000/60000 [==============================] - 3s 51us/sample - loss: 0.0629 - acc: 0.9818 - val_loss: 0.0789 - val_acc: 0.9814
Epoch 16/50
60000/60000 [==============================] - 3s 53us/sample - loss: 0.0595 - acc: 0.9825 - val_loss: 0.0899 - val_acc: 0.9799
Epoch 17/50
60000/60000 [==============================] - 3s 54us/sample - loss: 0.0572 - acc: 0.9829 - val_loss: 0.0767 - val_acc: 0.9815
Epoch 18/50
60000/60000 [==============================] - 3s 50us/sample - loss: 0.0563 - acc: 0.9828 - val_loss: 0.0820 - val_acc: 0.9818
Epoch 19/50
60000/60000 [==============================] - 3s 51us/sample - loss: 0.0544 - acc: 0.9837 - val_loss: 0.0834 - val_acc: 0.9813
Epoch 20/50
60000/60000 [==============================] - 3s 52us/sample - loss: 0.0517 - acc: 0.9846 - val_loss: 0.0878 - val_acc: 0.9817
Epoch 21/50
60000/60000 [==============================] - 3s 51us/sample - loss: 0.0488 - acc: 0.9848 - val_loss: 0.0806 - val_acc: 0.9821
Epoch 22/50
60000/60000 [==============================] - 3s 52us/sample - loss: 0.0471 - acc: 0.9860 - val_loss: 0.0836 - val_acc: 0.9820
Epoch 23/50
60000/60000 [==============================] - 3s 51us/sample - loss: 0.0511 - acc: 0.9847 - val_loss: 0.0907 - val_acc: 0.9810
Epoch 24/50
60000/60000 [==============================] - 3s 52us/sample - loss: 0.0472 - acc: 0.9863 - val_loss: 0.0844 - val_acc: 0.9812
Epoch 25/50
60000/60000 [==============================] - 3s 52us/sample - loss: 0.0438 - acc: 0.9867 - val_loss: 0.0926 - val_acc: 0.9797
Epoch 26/50
60000/60000 [==============================] - 3s 52us/sample - loss: 0.0462 - acc: 0.9865 - val_loss: 0.0956 - val_acc: 0.9801
Epoch 27/50
60000/60000 [==============================] - 3s 55us/sample - loss: 0.0464 - acc: 0.9865 - val_loss: 0.0882 - val_acc: 0.9811
Epoch 28/50
60000/60000 [==============================] - 3s 52us/sample - loss: 0.0419 - acc: 0.9876 - val_loss: 0.0905 - val_acc: 0.9814
Epoch 29/50
60000/60000 [==============================] - 3s 52us/sample - loss: 0.0434 - acc: 0.9861 - val_loss: 0.0871 - val_acc: 0.9819
Epoch 30/50
60000/60000 [==============================] - 3s 50us/sample - loss: 0.0407 - acc: 0.9876 - val_loss: 0.0967 - val_acc: 0.9819
Epoch 31/50
60000/60000 [==============================] - 3s 50us/sample - loss: 0.0391 - acc: 0.9885 - val_loss: 0.0879 - val_acc: 0.9815
Epoch 32/50
60000/60000 [==============================] - 3s 50us/sample - loss: 0.0412 - acc: 0.9874 - val_loss: 0.0829 - val_acc: 0.9816
Epoch 33/50
60000/60000 [==============================] - 3s 50us/sample - loss: 0.0419 - acc: 0.9877 - val_loss: 0.0850 - val_acc: 0.9823
Epoch 34/50
60000/60000 [==============================] - 3s 50us/sample - loss: 0.0399 - acc: 0.9880 - val_loss: 0.0894 - val_acc: 0.9830
Epoch 35/50
60000/60000 [==============================] - 3s 52us/sample - loss: 0.0391 - acc: 0.9882 - val_loss: 0.0937 - val_acc: 0.9818
Epoch 36/50
60000/60000 [==============================] - 3s 53us/sample - loss: 0.0359 - acc: 0.9891 - val_loss: 0.0942 - val_acc: 0.9820
Epoch 37/50
60000/60000 [==============================] - 3s 54us/sample - loss: 0.0373 - acc: 0.9888 - val_loss: 0.0989 - val_acc: 0.9815
Epoch 38/50
60000/60000 [==============================] - 3s 56us/sample - loss: 0.0368 - acc: 0.9893 - val_loss: 0.0880 - val_acc: 0.9829
Epoch 39/50
60000/60000 [==============================] - 3s 53us/sample - loss: 0.0335 - acc: 0.9899 - val_loss: 0.0923 - val_acc: 0.9806
Epoch 40/50
60000/60000 [==============================] - 3s 53us/sample - loss: 0.0349 - acc: 0.9896 - val_loss: 0.0900 - val_acc: 0.9827
Epoch 41/50
60000/60000 [==============================] - 3s 56us/sample - loss: 0.0356 - acc: 0.9897 - val_loss: 0.0900 - val_acc: 0.9828
Epoch 42/50
60000/60000 [==============================] - 3s 53us/sample - loss: 0.0353 - acc: 0.9900 - val_loss: 0.0995 - val_acc: 0.9814
Epoch 43/50
60000/60000 [==============================] - 4s 64us/sample - loss: 0.0360 - acc: 0.9899 - val_loss: 0.0911 - val_acc: 0.9822
Epoch 44/50
60000/60000 [==============================] - 4s 65us/sample - loss: 0.0316 - acc: 0.9906 - val_loss: 0.0916 - val_acc: 0.9817
Epoch 45/50
60000/60000 [==============================] - 3s 51us/sample - loss: 0.0333 - acc: 0.9900 - val_loss: 0.1072 - val_acc: 0.9812
Epoch 46/50
60000/60000 [==============================] - 4s 59us/sample - loss: 0.0330 - acc: 0.9903 - val_loss: 0.0960 - val_acc: 0.9824
Epoch 47/50
60000/60000 [==============================] - 3s 54us/sample - loss: 0.0334 - acc: 0.9900 - val_loss: 0.1060 - val_acc: 0.9808
Epoch 48/50
60000/60000 [==============================] - 3s 55us/sample - loss: 0.0337 - acc: 0.9901 - val_loss: 0.0992 - val_acc: 0.9818
Epoch 49/50
60000/60000 [==============================] - 3s 54us/sample - loss: 0.0298 - acc: 0.9910 - val_loss: 0.1046 - val_acc: 0.9831
Epoch 50/50
60000/60000 [==============================] - 3s 56us/sample - loss: 0.0311 - acc: 0.9909 - val_loss: 0.1033 - val_acc: 0.9829
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># evaluate performance
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Training without dropout = </span><span class="sh">"</span><span class="p">)</span>
<span class="n">model_dnn_no_drop</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Test without dropout = </span><span class="sh">"</span><span class="p">)</span>
<span class="n">model_dnn_no_drop</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training without dropout = 
60000/60000 [==============================] - 1s 21us/sample - loss: 0.0091 - acc: 0.9975

Test without dropout = 
10000/10000 [==============================] - 0s 22us/sample - loss: 0.1536 - acc: 0.9786


[0.15362604289185866, 0.9786]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># evaluate performance
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Training with dropout = </span><span class="sh">"</span><span class="p">)</span>
<span class="n">model_dnn_drop</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">Y_train</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Test with dropout = </span><span class="sh">"</span><span class="p">)</span>
<span class="n">model_dnn_drop</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">Y_test</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training with dropout = 
60000/60000 [==============================] - 1s 22us/sample - loss: 0.0055 - acc: 0.9984

Test with dropout = 
10000/10000 [==============================] - 0s 21us/sample - loss: 0.1033 - acc: 0.9829

[0.10325850226903108, 0.9829]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># summary
</span><span class="n">model_dnn_drop</span><span class="p">.</span><span class="nf">summary</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Model: "sequential_1"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
flatten_1 (Flatten)          multiple                  0         
_________________________________________________________________
dense_4 (Dense)              multiple                  100480    
_________________________________________________________________
dropout (Dropout)            multiple                  0         
_________________________________________________________________
dense_5 (Dense)              multiple                  8256      
_________________________________________________________________
dropout_1 (Dropout)          multiple                  0         
_________________________________________________________________
dense_6 (Dense)              multiple                  2080      
_________________________________________________________________
dropout_2 (Dropout)          multiple                  0         
_________________________________________________________________
dense_7 (Dense)              multiple                  330       
=================================================================
Total params: 111,146
Trainable params: 111,146
Non-trainable params: 0
_________________________________________________________________
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the loss and accuracy curves for training and validation 
</span><span class="n">x_values</span> <span class="o">=</span> <span class="nf">list</span><span class="p">(</span><span class="nf">range</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">history_dnn_drop</span><span class="p">.</span><span class="n">epoch</span><span class="p">)))</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_values</span><span class="p">,</span><span class="n">history_dnn_no_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Training loss (no dropout)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_values</span><span class="p">,</span><span class="n">history_dnn_no_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Validation loss (no dropout)</span><span class="sh">"</span><span class="p">,</span><span class="n">axes</span> <span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_values</span><span class="p">,</span><span class="n">history_dnn_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">g</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Training loss (dropout)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_values</span><span class="p">,</span><span class="n">history_dnn_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Validation loss (dropout)</span><span class="sh">"</span><span class="p">,</span><span class="n">axes</span> <span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">legend</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">best</span><span class="sh">'</span><span class="p">,</span> <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_xlim</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nf">max</span><span class="p">(</span><span class="n">x_values</span><span class="p">))</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,)</span>

<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_values</span><span class="p">,</span><span class="n">history_dnn_no_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Training accuracy (no dropout)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_values</span><span class="p">,</span><span class="n">history_dnn_no_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Validation accuracy (no dropout)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_values</span><span class="p">,</span><span class="n">history_dnn_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">g</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Training accuracy (dropout)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">x_values</span><span class="p">,</span><span class="n">history_dnn_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">y</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Validation accuracy (dropout)</span><span class="sh">"</span><span class="p">)</span>
<span class="n">legend</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">best</span><span class="sh">'</span><span class="p">,</span> <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_xlim</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nf">max</span><span class="p">(</span><span class="n">x_values</span><span class="p">))</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mf">0.9</span><span class="p">,);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_52_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot non-normalized confusion matrix
</span><span class="n">Y_test_pred</span> <span class="o">=</span> <span class="n">model_dnn_drop</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test</span><span class="p">)</span>
<span class="n">Y_test_pred</span> <span class="o">=</span> <span class="n">Y_test_pred</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">TAD_tools</span><span class="p">.</span><span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">Y_test</span><span class="p">,</span> <span class="n">Y_test_pred</span><span class="p">,</span> <span class="n">classes</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="nf">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">11</span><span class="p">)]),</span>
                     <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Confusion matrix, without normalization</span><span class="sh">'</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_53_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TAD_tools</span><span class="p">.</span><span class="nf">plot_worst_predictions</span><span class="p">(</span><span class="n">model_dnn_drop</span><span class="p">,</span><span class="n">X_test</span><span class="p">,</span><span class="n">Y_test</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_54_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_results</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">:</span><span class="sh">"</span><span class="s">DNN No dropout</span><span class="sh">"</span><span class="p">,</span>
                                <span class="sh">'</span><span class="s">Training accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">history_dnn_no_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
                                <span class="sh">'</span><span class="s">Testing accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">history_dnn_no_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]},</span><span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">df_results</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">:</span><span class="sh">"</span><span class="s">DNN Dropout</span><span class="sh">"</span><span class="p">,</span>
                                <span class="sh">'</span><span class="s">Training accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">history_dnn_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
                                <span class="sh">'</span><span class="s">Testing accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">history_dnn_drop</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]},</span><span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<p>From the plot shown above, we can conclude that our model behaves as expected. Indeed, the prediction errors are made for ambiguous digits.</p>

<hr />
<p><a id="Section_4"></a></p>
<h2 id="4-convolutional-networks-cnn">4. Convolutional Networks (CNN)</h2>

<p>Convolutional Neural Networks were developed with the idea to mimic the human vision. In order to identify objects, our brain first focuses on the overall shape (edges, curves) then the details of the objects are considered. CNN are made of layers, each processes the image to detect pattern. The first layer of the network will detect simple patterns like vertical, horizontal lines, or diagonals. As the transformed images progresses through the network, more complex patterns are identified. The main difference between CNN and DNN is that DNN treats each pixel individually while CNN captures patterns.</p>

<p>The two main types of hidden layers in a CNN are called <strong>Convolution</strong> and <strong>Pooling</strong>.<br />
Convolution layers detects pattern while pooling shrink the information. The animation below shows the convolution. A filter (in this case 3x3) travels over the original image. An element wise operation is performed as each elements of the filter is multiplied by the corresponding pixel value and these values are summed together. Without any additional modification, the original 5x5 image is shrunk into a 3x3 image.</p>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/1_ZCjPUFrB6eHPRi4eyP6aaA.gif" />
</figure>
<p>Source: https://cdn-images-1.medium.com</p>

<p>The second operation is performed using a pooling layer. The most common pooling layer is the max pooling. Similar to the convolution, the pooling is performed across the image. In the animation below, the pooling consists of a 2x2 pixel group converted into a single value using the maximum function.</p>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/maxpool_animation.gif" />
</figure>
<p>Source: https://developers.google.com</p>

<p>The network architecture shown below depicts a complete network. First the image goes through two sequence of convolution+pooling. The resulting image is then flatten and injected into a neural network.</p>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/1_NQQiyYqJJj4PSYAeWvxutg.png" />
</figure>
<p>Source: https://cdn-images-1.medium.com</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load data
</span><span class="n">mnist</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">datasets</span><span class="p">.</span><span class="n">mnist</span>
<span class="p">(</span><span class="n">training_images</span><span class="p">,</span> <span class="n">training_labels</span><span class="p">),</span> <span class="p">(</span><span class="n">testing_images</span><span class="p">,</span> <span class="n">testing_labels</span><span class="p">)</span> <span class="o">=</span> <span class="n">mnist</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>

<span class="n">training_images</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">expand_dims</span><span class="p">(</span><span class="n">training_images</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="n">testing_images</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">expand_dims</span><span class="p">(</span><span class="n">testing_images</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>

<span class="c1"># Shapes
</span><span class="nf">print</span><span class="p">(</span><span class="n">training_images</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">training_labels</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">testing_images</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">testing_labels</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(60000, 28, 28, 1)
(60000,)
(10000, 28, 28, 1)
(10000,)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Import Image Generator
</span><span class="kn">from</span> <span class="n">tensorflow.keras.preprocessing.image</span> <span class="kn">import</span> <span class="n">ImageDataGenerator</span>

<span class="c1"># Create an ImageDataGenerator and do Image Augmentation
</span><span class="n">train_datagen</span> <span class="o">=</span> <span class="nc">ImageDataGenerator</span><span class="p">(</span>
    <span class="n">rescale</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mf">255.0</span>
    <span class="p">)</span>

<span class="n">validation_datagen</span> <span class="o">=</span> <span class="nc">ImageDataGenerator</span><span class="p">(</span>
    <span class="n">rescale</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mf">255.0</span>
    <span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create CNN Conv2D_64 -&gt; MaxPooling_2 -&gt; Conv2D_64 -&gt; MaxPooling_2 -&gt; NN_128 -&gt; NN_10
</span><span class="n">model_cnn</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">([</span>
    
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="sh">'</span><span class="s">same</span><span class="sh">'</span><span class="p">),</span>
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">MaxPooling2D</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.25</span><span class="p">),</span>
    
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="sh">'</span><span class="s">same</span><span class="sh">'</span><span class="p">),</span>
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">MaxPooling2D</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span>
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.25</span><span class="p">),</span>
    
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Flatten</span><span class="p">(),</span>
    
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">),</span>
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>
    
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">softmax</span><span class="sh">'</span><span class="p">)</span>
<span class="p">])</span>
</code></pre></div></div>

<p>The role of the optimizer is to adjust internal parameters (weights, bias,…) in order to help minimizing the loss.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># compile model
</span><span class="n">model_cnn</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span>
    <span class="n">optimizer</span> <span class="o">=</span> <span class="sh">'</span><span class="s">adam</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">loss</span> <span class="o">=</span> <span class="sh">'</span><span class="s">sparse_categorical_crossentropy</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">metrics</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">accuracy</span><span class="sh">'</span><span class="p">]</span>
    <span class="p">)</span>
</code></pre></div></div>

<p>Before training the model, we also implement a change into the learning rate. The learning rate of the model describes how fast the model moves toward a minimim. As the loss function gets closer to its minimum, we want the learning rate to slow down in order to improve the convergence.</p>

<p>We will keep a “large” initial learning rate to speed up the first iterations and the learning rate will be reduced during the training process.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># summary
</span><span class="n">model_cnn</span><span class="p">.</span><span class="nf">summary</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Model: "sequential_2"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d (Conv2D)              (None, 28, 28, 32)        832       
_________________________________________________________________
max_pooling2d (MaxPooling2D) (None, 14, 14, 32)        0         
_________________________________________________________________
dropout_3 (Dropout)          (None, 14, 14, 32)        0         
_________________________________________________________________
conv2d_1 (Conv2D)            (None, 14, 14, 32)        25632     
_________________________________________________________________
max_pooling2d_1 (MaxPooling2 (None, 7, 7, 32)          0         
_________________________________________________________________
dropout_4 (Dropout)          (None, 7, 7, 32)          0         
_________________________________________________________________
flatten_2 (Flatten)          (None, 1568)              0         
_________________________________________________________________
dense_8 (Dense)              (None, 256)               401664    
_________________________________________________________________
dropout_5 (Dropout)          (None, 256)               0         
_________________________________________________________________
dense_9 (Dense)              (None, 10)                2570      
=================================================================
Total params: 430,698
Trainable params: 430,698
Non-trainable params: 0
_________________________________________________________________
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Train the Model
</span><span class="n">history_no_augm</span> <span class="o">=</span> <span class="n">model_cnn</span><span class="p">.</span><span class="nf">fit_generator</span><span class="p">(</span>
    <span class="n">train_datagen</span><span class="p">.</span><span class="nf">flow</span><span class="p">(</span><span class="n">training_images</span><span class="p">,</span> <span class="n">training_labels</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">steps_per_epoch</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">training_images</span><span class="p">)</span> <span class="o">/</span> <span class="mi">32</span><span class="p">,</span>
    <span class="n">epochs</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">validation_data</span><span class="o">=</span><span class="n">validation_datagen</span><span class="p">.</span><span class="nf">flow</span><span class="p">(</span><span class="n">testing_images</span><span class="p">,</span> <span class="n">testing_labels</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">),</span>
    <span class="n">validation_steps</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">testing_images</span><span class="p">)</span> <span class="o">/</span> <span class="mi">32</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Epoch 1/30
1875/1875 [==============================] - 88s 47ms/step - loss: 0.1924 - acc: 0.9391 - val_loss: 0.0425 - val_acc: 0.9855
Epoch 2/30
1875/1875 [==============================] - 76s 41ms/step - loss: 0.0738 - acc: 0.9778 - val_loss: 0.0296 - val_acc: 0.9904
Epoch 3/30
1875/1875 [==============================] - 70s 38ms/step - loss: 0.0575 - acc: 0.9827 - val_loss: 0.0249 - val_acc: 0.9905
Epoch 4/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0503 - acc: 0.9846 - val_loss: 0.0234 - val_acc: 0.9921
Epoch 5/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0440 - acc: 0.9864 - val_loss: 0.0225 - val_acc: 0.9920
Epoch 6/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0397 - acc: 0.9877 - val_loss: 0.0208 - val_acc: 0.9927
Epoch 7/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0361 - acc: 0.9892 - val_loss: 0.0194 - val_acc: 0.9932
Epoch 8/30
1875/1875 [==============================] - 70s 38ms/step - loss: 0.0325 - acc: 0.9898 - val_loss: 0.0221 - val_acc: 0.9919
Epoch 9/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0317 - acc: 0.9899 - val_loss: 0.0215 - val_acc: 0.9926
Epoch 10/30
1875/1875 [==============================] - 73s 39ms/step - loss: 0.0296 - acc: 0.9904 - val_loss: 0.0184 - val_acc: 0.9939
Epoch 11/30
1875/1875 [==============================] - 73s 39ms/step - loss: 0.0281 - acc: 0.9917 - val_loss: 0.0181 - val_acc: 0.9944
Epoch 12/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0281 - acc: 0.9914 - val_loss: 0.0216 - val_acc: 0.9930
Epoch 13/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0280 - acc: 0.9916 - val_loss: 0.0196 - val_acc: 0.9936
Epoch 14/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0240 - acc: 0.9923 - val_loss: 0.0201 - val_acc: 0.9937
Epoch 15/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0234 - acc: 0.9928 - val_loss: 0.0188 - val_acc: 0.9942
Epoch 16/30
1875/1875 [==============================] - 69s 37ms/step - loss: 0.0250 - acc: 0.9927 - val_loss: 0.0175 - val_acc: 0.9943
Epoch 17/30
1875/1875 [==============================] - 69s 37ms/step - loss: 0.0222 - acc: 0.9928 - val_loss: 0.0168 - val_acc: 0.9946
Epoch 18/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0227 - acc: 0.9930 - val_loss: 0.0212 - val_acc: 0.9937
Epoch 19/30
1875/1875 [==============================] - 69s 37ms/step - loss: 0.0222 - acc: 0.9934 - val_loss: 0.0209 - val_acc: 0.9935
Epoch 20/30
1875/1875 [==============================] - 69s 37ms/step - loss: 0.0245 - acc: 0.9927 - val_loss: 0.0183 - val_acc: 0.9949
Epoch 21/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0225 - acc: 0.9934 - val_loss: 0.0201 - val_acc: 0.9946
Epoch 22/30
1875/1875 [==============================] - 69s 37ms/step - loss: 0.0227 - acc: 0.9933 - val_loss: 0.0187 - val_acc: 0.9943
Epoch 23/30
1875/1875 [==============================] - 70s 37ms/step - loss: 0.0198 - acc: 0.9940 - val_loss: 0.0189 - val_acc: 0.9948
Epoch 24/30
1875/1875 [==============================] - 71s 38ms/step - loss: 0.0212 - acc: 0.9937 - val_loss: 0.0214 - val_acc: 0.9946
Epoch 25/30
1875/1875 [==============================] - 70s 38ms/step - loss: 0.0224 - acc: 0.9929 - val_loss: 0.0196 - val_acc: 0.9951
Epoch 26/30
1875/1875 [==============================] - 69s 37ms/step - loss: 0.0214 - acc: 0.9936 - val_loss: 0.0199 - val_acc: 0.9947
Epoch 27/30
1875/1875 [==============================] - 69s 37ms/step - loss: 0.0195 - acc: 0.9941 - val_loss: 0.0211 - val_acc: 0.9945
Epoch 28/30
1875/1875 [==============================] - 79s 42ms/step - loss: 0.0206 - acc: 0.9939 - val_loss: 0.0189 - val_acc: 0.9948
Epoch 29/30
1875/1875 [==============================] - 79s 42ms/step - loss: 0.0207 - acc: 0.9941 - val_loss: 0.0193 - val_acc: 0.9952
Epoch 30/30
1875/1875 [==============================] - 83s 44ms/step - loss: 0.0205 - acc: 0.9939 - val_loss: 0.0188 - val_acc: 0.9950
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># evaluate performance
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Training = </span><span class="sh">"</span><span class="p">)</span>
<span class="n">model_cnn</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">training_images</span><span class="o">/</span><span class="mf">255.0</span><span class="p">,</span> <span class="n">training_labels</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Test = </span><span class="sh">"</span><span class="p">)</span>
<span class="n">model_cnn</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">testing_images</span><span class="o">/</span><span class="mf">255.0</span><span class="p">,</span> <span class="n">testing_labels</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training = 
60000/60000 [==============================] - 13s 209us/sample - loss: 0.0024 - acc: 0.9994

Test = 
10000/10000 [==============================] - 2s 204us/sample - loss: 0.0188 - acc: 0.9950

[0.018755361672989995, 0.995]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the loss and accuracy curves for training and validation 
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history_no_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Training loss</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history_no_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">validation loss</span><span class="sh">"</span><span class="p">,</span><span class="n">axes</span> <span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">legend</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">best</span><span class="sh">'</span><span class="p">,</span> <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,)</span>

<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history_no_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Training accuracy</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history_no_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Validation accuracy</span><span class="sh">"</span><span class="p">)</span>
<span class="n">legend</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">best</span><span class="sh">'</span><span class="p">,</span> <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mf">0.8</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_73_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot non-normalized confusion matrix
</span><span class="n">Y_test_pred</span> <span class="o">=</span> <span class="n">model_cnn</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">testing_images</span><span class="o">/</span><span class="mf">255.0</span><span class="p">)</span>
<span class="n">Y_test_pred</span> <span class="o">=</span> <span class="n">Y_test_pred</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">TAD_tools</span><span class="p">.</span><span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">testing_labels</span><span class="p">,</span> <span class="n">Y_test_pred</span><span class="p">,</span> <span class="n">classes</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="nf">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">11</span><span class="p">)]),</span>
                     <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Confusion matrix, without normalization</span><span class="sh">'</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_74_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TAD_tools</span><span class="p">.</span><span class="nf">plot_worst_predictions</span><span class="p">(</span><span class="n">model_cnn</span><span class="p">,</span><span class="n">testing_images</span><span class="o">/</span><span class="mf">255.0</span><span class="p">,</span><span class="n">testing_labels</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_75_0.png" />
</figure>

<p>From the above, we can see that our model approaches human-prediction baseline. Indeed, several of these digits cannot be properly identified by a human eye.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TAD_tools</span><span class="p">.</span><span class="nf">plot_convolutions_v2</span><span class="p">(</span><span class="n">model_cnn</span><span class="p">,</span><span class="n">testing_images</span><span class="o">/</span><span class="mf">1.0</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_77_0.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_77_1.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_77_2.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_77_3.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_77_4.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_results</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">:</span><span class="sh">"</span><span class="s">CNN</span><span class="sh">"</span><span class="p">,</span>
                                <span class="sh">'</span><span class="s">Training accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">history_no_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
                                <span class="sh">'</span><span class="s">Testing accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">history_no_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]},</span><span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<hr />
<p><a id="Section_5"></a></p>
<h2 id="5-convolutional-networks-cnn-with-data-augmentation">5. Convolutional Networks (CNN) with data augmentation</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># load data
</span><span class="n">mnist</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">datasets</span><span class="p">.</span><span class="n">mnist</span>
<span class="p">(</span><span class="n">training_images</span><span class="p">,</span> <span class="n">training_labels</span><span class="p">),</span> <span class="p">(</span><span class="n">testing_images</span><span class="p">,</span> <span class="n">testing_labels</span><span class="p">)</span> <span class="o">=</span> <span class="n">mnist</span><span class="p">.</span><span class="nf">load_data</span><span class="p">()</span>

<span class="n">training_images</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">expand_dims</span><span class="p">(</span><span class="n">training_images</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
<span class="n">testing_images</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">expand_dims</span><span class="p">(</span><span class="n">testing_images</span><span class="p">,</span><span class="mi">4</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Import Image Generator
</span><span class="kn">from</span> <span class="n">tensorflow.keras.preprocessing.image</span> <span class="kn">import</span> <span class="n">ImageDataGenerator</span>

<span class="c1"># Create an ImageDataGenerator and do Image Augmentation
</span><span class="n">train_datagen_augm</span> <span class="o">=</span> <span class="nc">ImageDataGenerator</span><span class="p">(</span>
    <span class="n">rescale</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mf">255.0</span><span class="p">,</span>
    <span class="n">zoom_range</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span>
    <span class="n">rotation_range</span> <span class="o">=</span> <span class="mi">10</span><span class="p">,</span>
    <span class="n">width_shift_range</span> <span class="o">=</span> <span class="mf">0.1</span><span class="p">,</span>
    <span class="n">height_shift_range</span> <span class="o">=</span> <span class="mf">0.1</span>
    <span class="p">)</span>

<span class="n">train_datagen</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">training_images</span><span class="p">,</span> <span class="n">augment</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">validation_datagen</span> <span class="o">=</span> <span class="nc">ImageDataGenerator</span><span class="p">(</span>
    <span class="n">rescale</span> <span class="o">=</span> <span class="mi">1</span><span class="o">/</span><span class="mf">255.0</span>
    <span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># create CNN Conv2D_64 -&gt; MaxPooling_2 -&gt; Conv2D_64 -&gt; MaxPooling_2 -&gt; NN_128 -&gt; NN_10
</span><span class="n">model_cnn_augm</span> <span class="o">=</span> <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">models</span><span class="p">.</span><span class="nc">Sequential</span><span class="p">([</span>
    
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">28</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">1</span><span class="p">),</span> <span class="n">padding</span><span class="o">=</span><span class="sh">'</span><span class="s">same</span><span class="sh">'</span><span class="p">),</span>
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">MaxPooling2D</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span>
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.25</span><span class="p">),</span>
    
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Conv2D</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">),</span> <span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="sh">'</span><span class="s">same</span><span class="sh">'</span><span class="p">),</span>
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">MaxPooling2D</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span>
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.25</span><span class="p">),</span>
    
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Flatten</span><span class="p">(),</span>
    
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">relu</span><span class="sh">'</span><span class="p">),</span>
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dropout</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span>
    
    <span class="n">tf</span><span class="p">.</span><span class="n">keras</span><span class="p">.</span><span class="n">layers</span><span class="p">.</span><span class="nc">Dense</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="n">activation</span><span class="o">=</span><span class="sh">'</span><span class="s">softmax</span><span class="sh">'</span><span class="p">)</span>
<span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># compile model
</span><span class="n">model_cnn_augm</span><span class="p">.</span><span class="nf">compile</span><span class="p">(</span>
    <span class="n">optimizer</span> <span class="o">=</span> <span class="sh">'</span><span class="s">adam</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">loss</span> <span class="o">=</span> <span class="sh">'</span><span class="s">sparse_categorical_crossentropy</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">metrics</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">accuracy</span><span class="sh">'</span><span class="p">]</span>
    <span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model_cnn_augm</span><span class="p">.</span><span class="nf">summary</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Model: "sequential_3"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
conv2d_2 (Conv2D)            (None, 28, 28, 32)        832       
_________________________________________________________________
max_pooling2d_2 (MaxPooling2 (None, 14, 14, 32)        0         
_________________________________________________________________
dropout_6 (Dropout)          (None, 14, 14, 32)        0         
_________________________________________________________________
conv2d_3 (Conv2D)            (None, 14, 14, 32)        25632     
_________________________________________________________________
max_pooling2d_3 (MaxPooling2 (None, 7, 7, 32)          0         
_________________________________________________________________
dropout_7 (Dropout)          (None, 7, 7, 32)          0         
_________________________________________________________________
flatten_3 (Flatten)          (None, 1568)              0         
_________________________________________________________________
dense_10 (Dense)             (None, 256)               401664    
_________________________________________________________________
dropout_8 (Dropout)          (None, 256)               0         
_________________________________________________________________
dense_11 (Dense)             (None, 10)                2570      
=================================================================
Total params: 430,698
Trainable params: 430,698
Non-trainable params: 0
_________________________________________________________________
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Augmented training set
</span><span class="n">training_set</span> <span class="o">=</span> <span class="n">train_datagen_augm</span><span class="p">.</span><span class="nf">flow</span><span class="p">(</span><span class="n">training_images</span><span class="p">,</span> <span class="n">training_labels</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
<span class="n">validation_set</span> <span class="o">=</span> <span class="n">validation_datagen</span><span class="p">.</span><span class="nf">flow</span><span class="p">(</span><span class="n">testing_images</span><span class="p">,</span> <span class="n">testing_labels</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Train the Model
</span><span class="n">history_augm</span> <span class="o">=</span> <span class="n">model_cnn_augm</span><span class="p">.</span><span class="nf">fit_generator</span><span class="p">(</span>
    <span class="n">training_set</span><span class="p">,</span>
    <span class="n">steps_per_epoch</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">training_images</span><span class="p">)</span> <span class="o">/</span> <span class="mi">32</span><span class="p">,</span>
    <span class="n">epochs</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
    <span class="n">verbose</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">validation_data</span><span class="o">=</span><span class="n">validation_set</span><span class="p">,</span>
    <span class="n">validation_steps</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">testing_images</span><span class="p">)</span> <span class="o">/</span> <span class="mi">32</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Epoch 1/30
1875/1875 [==============================] - 81s 43ms/step - loss: 0.3100 - acc: 0.9015 - val_loss: 0.0379 - val_acc: 0.9862
Epoch 2/30
1875/1875 [==============================] - 78s 41ms/step - loss: 0.1261 - acc: 0.9620 - val_loss: 0.0286 - val_acc: 0.9888
Epoch 3/30
1875/1875 [==============================] - 74s 40ms/step - loss: 0.1016 - acc: 0.9700 - val_loss: 0.0247 - val_acc: 0.9917
Epoch 4/30
1875/1875 [==============================] - 78s 41ms/step - loss: 0.0865 - acc: 0.9740 - val_loss: 0.0222 - val_acc: 0.9929
Epoch 5/30
1875/1875 [==============================] - 76s 41ms/step - loss: 0.0794 - acc: 0.9752 - val_loss: 0.0210 - val_acc: 0.9928
Epoch 6/30
1875/1875 [==============================] - 84s 45ms/step - loss: 0.0747 - acc: 0.9769 - val_loss: 0.0191 - val_acc: 0.9931
Epoch 7/30
1875/1875 [==============================] - 82s 44ms/step - loss: 0.0703 - acc: 0.9795 - val_loss: 0.0171 - val_acc: 0.9945
Epoch 8/30
1875/1875 [==============================] - 95s 51ms/step - loss: 0.0638 - acc: 0.9808 - val_loss: 0.0194 - val_acc: 0.9936
Epoch 9/30
1875/1875 [==============================] - 79s 42ms/step - loss: 0.0660 - acc: 0.9801 - val_loss: 0.0193 - val_acc: 0.9933
Epoch 10/30
1875/1875 [==============================] - 76s 41ms/step - loss: 0.0621 - acc: 0.9815 - val_loss: 0.0171 - val_acc: 0.9944
Epoch 11/30
1875/1875 [==============================] - 80s 43ms/step - loss: 0.0612 - acc: 0.9822 - val_loss: 0.0173 - val_acc: 0.9944
Epoch 12/30
1875/1875 [==============================] - 81s 43ms/step - loss: 0.0580 - acc: 0.9825 - val_loss: 0.0174 - val_acc: 0.9940
Epoch 13/30
1875/1875 [==============================] - 74s 39ms/step - loss: 0.0564 - acc: 0.9830 - val_loss: 0.0189 - val_acc: 0.9942
Epoch 14/30
1875/1875 [==============================] - 74s 40ms/step - loss: 0.0571 - acc: 0.9830 - val_loss: 0.0217 - val_acc: 0.9928
Epoch 15/30
1875/1875 [==============================] - 78s 42ms/step - loss: 0.0559 - acc: 0.9834 - val_loss: 0.0193 - val_acc: 0.9937
Epoch 16/30
1875/1875 [==============================] - 75s 40ms/step - loss: 0.0561 - acc: 0.9837 - val_loss: 0.0185 - val_acc: 0.9937
Epoch 17/30
1875/1875 [==============================] - 74s 39ms/step - loss: 0.0542 - acc: 0.9840 - val_loss: 0.0205 - val_acc: 0.9925
Epoch 18/30
1875/1875 [==============================] - 77s 41ms/step - loss: 0.0529 - acc: 0.9842 - val_loss: 0.0184 - val_acc: 0.9939
Epoch 19/30
1875/1875 [==============================] - 78s 42ms/step - loss: 0.0555 - acc: 0.9839 - val_loss: 0.0194 - val_acc: 0.9943
Epoch 20/30
1875/1875 [==============================] - 78s 42ms/step - loss: 0.0539 - acc: 0.9839 - val_loss: 0.0190 - val_acc: 0.9943
Epoch 21/30
1875/1875 [==============================] - 78s 42ms/step - loss: 0.0540 - acc: 0.9845 - val_loss: 0.0217 - val_acc: 0.9924
Epoch 22/30
1875/1875 [==============================] - 77s 41ms/step - loss: 0.0521 - acc: 0.9851 - val_loss: 0.0196 - val_acc: 0.9938
Epoch 23/30
1875/1875 [==============================] - 92s 49ms/step - loss: 0.0542 - acc: 0.9849 - val_loss: 0.0191 - val_acc: 0.9939
Epoch 24/30
1875/1875 [==============================] - 82s 44ms/step - loss: 0.0496 - acc: 0.9851 - val_loss: 0.0225 - val_acc: 0.9935
Epoch 25/30
1875/1875 [==============================] - 86s 46ms/step - loss: 0.0526 - acc: 0.9843 - val_loss: 0.0220 - val_acc: 0.9940
Epoch 26/30
1875/1875 [==============================] - 82s 44ms/step - loss: 0.0479 - acc: 0.9862 - val_loss: 0.0210 - val_acc: 0.9937
Epoch 27/30
1875/1875 [==============================] - 79s 42ms/step - loss: 0.0493 - acc: 0.9858 - val_loss: 0.0204 - val_acc: 0.9933
Epoch 28/30
1875/1875 [==============================] - 78s 42ms/step - loss: 0.0510 - acc: 0.9857 - val_loss: 0.0190 - val_acc: 0.9941
Epoch 29/30
1875/1875 [==============================] - 91s 49ms/step - loss: 0.0511 - acc: 0.9854 - val_loss: 0.0191 - val_acc: 0.9942
Epoch 30/30
1875/1875 [==============================] - 86s 46ms/step - loss: 0.0505 - acc: 0.9851 - val_loss: 0.0190 - val_acc: 0.9938
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># evaluate performance
</span><span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Training = </span><span class="sh">"</span><span class="p">)</span>
<span class="n">model_cnn_augm</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">training_images</span><span class="o">/</span><span class="mf">255.0</span><span class="p">,</span> <span class="n">training_labels</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="se">\n</span><span class="s">Test = </span><span class="sh">"</span><span class="p">)</span>
<span class="n">model_cnn_augm</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">testing_images</span><span class="o">/</span><span class="mf">255.0</span><span class="p">,</span> <span class="n">testing_labels</span><span class="p">)</span>
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Training = 
60000/60000 [==============================] - 13s 212us/sample - loss: 0.0128 - acc: 0.9959

Test = 
10000/10000 [==============================] - 2s 199us/sample - loss: 0.0190 - acc: 0.9938

[0.019008814232396254, 0.9938]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot the loss and accuracy curves for training and validation 
</span><span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Training loss</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_loss</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">validation loss</span><span class="sh">"</span><span class="p">,</span><span class="n">axes</span> <span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">legend</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">best</span><span class="sh">'</span><span class="p">,</span> <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mi">0</span><span class="p">,)</span>

<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">b</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Training accuracy</span><span class="sh">"</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">plot</span><span class="p">(</span><span class="n">history_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">,</span><span class="n">label</span><span class="o">=</span><span class="sh">"</span><span class="s">Validation accuracy</span><span class="sh">"</span><span class="p">)</span>
<span class="n">legend</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="sh">'</span><span class="s">best</span><span class="sh">'</span><span class="p">,</span> <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nf">set_ylim</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span><span class="mf">1.0</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_88_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Plot non-normalized confusion matrix
</span><span class="n">Y_test_pred</span> <span class="o">=</span> <span class="n">model_cnn_augm</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">testing_images</span><span class="o">/</span><span class="mf">255.0</span><span class="p">)</span>
<span class="n">Y_test_pred</span> <span class="o">=</span> <span class="n">Y_test_pred</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">TAD_tools</span><span class="p">.</span><span class="nf">plot_confusion_matrix</span><span class="p">(</span><span class="n">testing_labels</span><span class="p">,</span> <span class="n">Y_test_pred</span><span class="p">,</span> <span class="n">classes</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="nf">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">11</span><span class="p">)]),</span>
                     <span class="n">title</span><span class="o">=</span><span class="sh">'</span><span class="s">Confusion matrix, without normalization</span><span class="sh">'</span><span class="p">);</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_89_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TAD_tools</span><span class="p">.</span><span class="nf">plot_worst_predictions</span><span class="p">(</span><span class="n">model_cnn_augm</span><span class="p">,</span><span class="n">testing_images</span><span class="o">/</span><span class="mf">255.0</span><span class="p">,</span><span class="n">testing_labels</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_90_0.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">TAD_tools</span><span class="p">.</span><span class="nf">plot_convolutions_v2</span><span class="p">(</span><span class="n">model_cnn_augm</span><span class="p">,</span><span class="n">testing_images</span><span class="o">/</span><span class="mf">1.0</span><span class="p">)</span>
</code></pre></div></div>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_91_0.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_91_1.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_91_2.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_91_3.png" />
</figure>

<figure>
    <img src="https://tdody.github.io/assets/img/2019-08-24-MNIST/output_91_4.png" />
</figure>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_results</span> <span class="o">=</span> <span class="n">df_results</span><span class="p">.</span><span class="nf">append</span><span class="p">({</span><span class="sh">'</span><span class="s">Model</span><span class="sh">'</span><span class="p">:</span><span class="sh">"</span><span class="s">CNN Augmented</span><span class="sh">"</span><span class="p">,</span>
                                <span class="sh">'</span><span class="s">Training accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">history_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">acc</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span>
                                <span class="sh">'</span><span class="s">Testing accuracy</span><span class="sh">'</span><span class="p">:</span><span class="n">history_augm</span><span class="p">.</span><span class="n">history</span><span class="p">[</span><span class="sh">'</span><span class="s">val_acc</span><span class="sh">'</span><span class="p">][</span><span class="o">-</span><span class="mi">1</span><span class="p">]},</span><span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<hr />
<p><a id="Section_6"></a></p>
<h2 id="6-conclusion-and-kaggle-submittal">6. Conclusion and Kaggle Submittal</h2>

<p>As shown below, the best model correctly predicts the hand-written digits of the test set for 99.50% of the case (CCN no augmentation).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df_results</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Model</th>
      <th>Training accuracy</th>
      <th>Testing accuracy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>Log Reg</td>
      <td>0.911450</td>
      <td>0.8987</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Lasso</td>
      <td>0.913900</td>
      <td>0.9070</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Ridge</td>
      <td>0.920400</td>
      <td>0.9152</td>
    </tr>
    <tr>
      <th>3</th>
      <td>DNN No dropout</td>
      <td>0.997883</td>
      <td>0.9786</td>
    </tr>
    <tr>
      <th>4</th>
      <td>DNN Dropout</td>
      <td>0.990883</td>
      <td>0.9829</td>
    </tr>
    <tr>
      <th>5</th>
      <td>CNN</td>
      <td>0.993883</td>
      <td>0.9950</td>
    </tr>
    <tr>
      <th>6</th>
      <td>CNN Augmented</td>
      <td>0.985100</td>
      <td>0.9938</td>
    </tr>
  </tbody>
</table>
</div>]]></content><author><name>Thibault Dody</name></author><category term="neuralnetwork" /><category term="cnn" /><category term="tensorflow" /><category term="numpy" /><category term="keras" /><summary type="html"><![CDATA[The MNIST hand-written digits is often considered the equivalent of the print('Hello World').]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://tdody.github.io/assets/img/2019-08-24-MNIST/tile.png" /><media:content medium="image" url="https://tdody.github.io/assets/img/2019-08-24-MNIST/tile.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>